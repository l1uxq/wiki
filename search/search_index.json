{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u4ecb\u7ecd"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"wp/DASCTF/","text":"Web \u5e2e\u5e2e\u5c0f\u7ea2\u82b1 \u8003\u70b9\uff1a \u9884\u671f\uff1a\u9632\u706b\u5899\u7ed5\u8fc7 \u975e\u9884\u671f\uff1a\u76f2\u6ce8 \u56e0\u4e3a\u662f\u4e00\u5f00\u59cb\u505a\u7684\uff0c\u6743\u9650\u6ca1\u5bf9\u6709\u4eba\u5199\u4e86shell.php\uff0c\u88ab\u6211\u626b\u51fa\u6765\u4e86\uff0c\u76f4\u63a5\u4e0a\u8f66\uff0c\u540e\u9762\u7528\u770b\u5230flag\u77e5\u9053\u4e86\u8ddfiptables\u547d\u4ee4\u6709\u5173\uff0c\u4e5f\u5c31\u662f\u9632\u706b\u5899\u3002\u8fd9\u513f\u6ca1\u73af\u5883\u4e86\uff0c\u7b49\u6709\u73af\u5883\u8865\u4e0a\u3002 \u540e\u9762\u8fd8\u6709\u76f2\u6ce8\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7grep\u6765\u67e5\u627e\u5b57\u7b26\u548csleep\u6765\u8fdb\u884c\u76f2\u6ce8\uff0c\u5927\u6982\u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2); Misc baby_web \u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1ahttp://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open('f14g.png','rb').read() f2 = list(f) f3 = f2[::-1] #print f3 f4 = ''.join(f3) with open('f1ag.png','wb') as f: f.write(f4) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002 bin/cat 2 \u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003 questionnaire \u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef Crypto bbcrypto \u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string.ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt(m, a, si): c=\"\" for i in range(len(m)): c+=hex(((ord(m[i])) * a + ord(next(si))) % 128)[2:].zfill(2) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle(salt.lower()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789'+string.ascii_lowercase+'{}' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag =list('ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u') for i in flag: if ord(i) > ord('f'): flag.remove(i) print(''.join(flag)) easyLCG \u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range(65536): s1 = int(bin(16269)[2:]+bin(i)[2:].zfill(16),2) s2 = (s1*a + b)%m if s2 >> 16 == 4249: print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg: def __init__(self): self.a = 3844066521 self.b = 3316005024 self.m = 2249804527 self.seed = 278490266 def next(self): self.seed = (self.a*self.seed+self.b) % self.m return self.seed>>16 class DH: def __init__(self): self.lcg = lcg() self.g = 183096451267674849541594370111199688704 self.m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self.A, self.a = self.gen_AB() self.B, self.b = self.gen_AB() self.key = pow(self.A, self.b, self.m) def gen_AB(self): x = '' for _ in range(64): x += '1' if self.lcg.next() % 2 else '0' return pow(self.g, int(x, 2), self.m), int(x, 2) #DH = DH() print long_to_bytes(DH().key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703)","title":"DASCTF2020"},{"location":"wp/DASCTF/#web","text":"","title":"Web"},{"location":"wp/DASCTF/#_1","text":"\u8003\u70b9\uff1a \u9884\u671f\uff1a\u9632\u706b\u5899\u7ed5\u8fc7 \u975e\u9884\u671f\uff1a\u76f2\u6ce8 \u56e0\u4e3a\u662f\u4e00\u5f00\u59cb\u505a\u7684\uff0c\u6743\u9650\u6ca1\u5bf9\u6709\u4eba\u5199\u4e86shell.php\uff0c\u88ab\u6211\u626b\u51fa\u6765\u4e86\uff0c\u76f4\u63a5\u4e0a\u8f66\uff0c\u540e\u9762\u7528\u770b\u5230flag\u77e5\u9053\u4e86\u8ddfiptables\u547d\u4ee4\u6709\u5173\uff0c\u4e5f\u5c31\u662f\u9632\u706b\u5899\u3002\u8fd9\u513f\u6ca1\u73af\u5883\u4e86\uff0c\u7b49\u6709\u73af\u5883\u8865\u4e0a\u3002 \u540e\u9762\u8fd8\u6709\u76f2\u6ce8\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7grep\u6765\u67e5\u627e\u5b57\u7b26\u548csleep\u6765\u8fdb\u884c\u76f2\u6ce8\uff0c\u5927\u6982\u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2);","title":"\u5e2e\u5e2e\u5c0f\u7ea2\u82b1"},{"location":"wp/DASCTF/#misc","text":"","title":"Misc"},{"location":"wp/DASCTF/#baby_web","text":"\u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1ahttp://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open('f14g.png','rb').read() f2 = list(f) f3 = f2[::-1] #print f3 f4 = ''.join(f3) with open('f1ag.png','wb') as f: f.write(f4) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002","title":"baby_web"},{"location":"wp/DASCTF/#bincat-2","text":"\u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003","title":"bin/cat 2"},{"location":"wp/DASCTF/#questionnaire","text":"\u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef","title":"questionnaire"},{"location":"wp/DASCTF/#crypto","text":"","title":"Crypto"},{"location":"wp/DASCTF/#bbcrypto","text":"\u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string.ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt(m, a, si): c=\"\" for i in range(len(m)): c+=hex(((ord(m[i])) * a + ord(next(si))) % 128)[2:].zfill(2) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle(salt.lower()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789'+string.ascii_lowercase+'{}' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag =list('ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u') for i in flag: if ord(i) > ord('f'): flag.remove(i) print(''.join(flag))","title":"bbcrypto"},{"location":"wp/DASCTF/#easylcg","text":"\u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range(65536): s1 = int(bin(16269)[2:]+bin(i)[2:].zfill(16),2) s2 = (s1*a + b)%m if s2 >> 16 == 4249: print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg: def __init__(self): self.a = 3844066521 self.b = 3316005024 self.m = 2249804527 self.seed = 278490266 def next(self): self.seed = (self.a*self.seed+self.b) % self.m return self.seed>>16 class DH: def __init__(self): self.lcg = lcg() self.g = 183096451267674849541594370111199688704 self.m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self.A, self.a = self.gen_AB() self.B, self.b = self.gen_AB() self.key = pow(self.A, self.b, self.m) def gen_AB(self): x = '' for _ in range(64): x += '1' if self.lcg.next() % 2 else '0' return pow(self.g, int(x, 2), self.m), int(x, 2) #DH = DH() print long_to_bytes(DH().key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703)","title":"easyLCG"}]}